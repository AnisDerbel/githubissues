{"version":3,"sources":["repoSaga.spec.ts"],"names":["setupTest","storeInitialState","repoSaga","withReducer","form","formReducer","repo","repoReducer","describe","page","formMock","initialState","it","response","repoIssuesMock","provide","matchers","call","fn","axios","get","dispatch","repoActions","getRepoIssues","put","getRepoIssuesSuccess","issues","data","hasMoreIssues","silentRun","storeState","expect","toEqual","error","isLoading","setCurrentPage","getRepoIssuesFailed"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,iBAAD;AAAA,SAChB,mCAAWC,aAAX,EAAqBC,WAArB,CACE,4BAAgB;AACdC,IAAAA,IAAI,EAAEC,kBADQ;AAEdC,IAAAA,IAAI,EAAEC;AAFQ,GAAhB,CADF,EAKEN,iBALF,CADgB;AAAA,CAAlB;;AASAO,QAAQ,CAAC,UAAD,EAAa,YAAM;AACzB,MAAMC,IAAI,GAAG,CAAb;AACAD,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClC,QAAMP,iBAAoC,GAAG;AAC3CG,MAAAA,IAAI,EAAEM,aADqC;AAE3CJ,MAAAA,IAAI,EAAEK;AAFqC,KAA7C;AAIAC,IAAAA,EAAE,CAAC,kDAAD,EAAqD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC/CC,cAAAA,QAD+C,GACpC,wCAAyBC,oBAAzB,CADoC;AAAA;AAAA,gDAE1Bd,SAAS,CAACC,iBAAD,CAAT,CACxBc,OADwB,CAChB,CAAC,CAACC,QAAQ,CAACC,IAAT,CAAcC,EAAd,CAAiBC,eAAMC,GAAvB,CAAD,EAA8BP,QAA9B,CAAD,CADgB,EAExBQ,QAFwB,CAEfC,qBAAYC,aAAZ,CAA0B;AAACd,gBAAAA,IAAI,EAAJA;AAAD,eAA1B,CAFe,EAGxBe,GAHwB,CAIvBF,qBAAYG,oBAAZ,CAAiC;AAC/BC,gBAAAA,MAAM,EAAEb,QAAQ,CAACc,IADc;AAE/BlB,gBAAAA,IAAI,EAAJA,IAF+B;AAG/BmB,gBAAAA,aAAa,EAAE;AAHgB,eAAjC,CAJuB,EAUxBC,SAVwB,EAF0B;;AAAA;AAAA;AAE9CC,cAAAA,UAF8C,yBAE9CA,UAF8C;AAarDC,cAAAA,MAAM,CAACD,UAAU,CAACxB,IAAZ,CAAN,CAAwB0B,OAAxB,4BACKF,UAAU,CAACxB,IADhB;AAEEoB,gBAAAA,MAAM,6BACDI,UAAU,CAACxB,IAAX,CAAgBoB,MADf,oCAEHjB,IAFG,EAEII,QAAQ,CAACc,IAFb,EAFR;AAMElB,gBAAAA,IAAI,EAAJA,IANF;AAOEwB,gBAAAA,KAAK,EAAE,KAPT;AAQEC,gBAAAA,SAAS,EAAE,KARb;AASEN,gBAAAA,aAAa,EAAE;AATjB;;AAbqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArD,CAAF;AAyBAhB,IAAAA,EAAE,CAAC,iDAAD,EAAoD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACzBZ,SAAS,4BAC/BC,iBAD+B;AAElCK,gBAAAA,IAAI,6BACCL,iBAAiB,CAACK,IADnB;AAEFoB,kBAAAA,MAAM,oCAAIjB,IAAJ,EAAWK,qBAAea,IAA1B;AAFJ;AAF8B,iBAAT,CAOxBN,QAPwB,CAOfC,qBAAYC,aAAZ,CAA0B;AAACd,gBAAAA,IAAI,EAAJA;AAAD,eAA1B,CAPe,EAQxBe,GARwB,CASvBF,qBAAYa,cAAZ,CAA2B;AACzB1B,gBAAAA,IAAI,EAAJA,IADyB;AAEzBmB,gBAAAA,aAAa,EAAE;AAFU,eAA3B,CATuB,EAcxBC,SAdwB,EADyB;;AAAA;AAAA;AAC7CC,cAAAA,UAD6C,yBAC7CA,UAD6C;AAgBpDC,cAAAA,MAAM,CAACD,UAAU,CAACxB,IAAZ,CAAN,CAAwB0B,OAAxB,4BACKF,UAAU,CAACxB,IADhB;AAEEG,gBAAAA,IAAI,EAAJA,IAFF;AAGEwB,gBAAAA,KAAK,EAAE,KAHT;AAIEC,gBAAAA,SAAS,EAAE,KAJb;AAKEN,gBAAAA,aAAa,EAAE;AALjB;;AAhBoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApD,CAAF;AAwBAhB,IAAAA,EAAE,CAAC,sEAAD,EAAyE;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnEC,cAAAA,QADmE,GACxD,oCAAqB,GAArB,CADwD;AAAA;AAAA,gDAE9Cb,SAAS,CAACC,iBAAD,CAAT,CACxBc,OADwB,CAChB,CAAC,CAACC,QAAQ,CAACC,IAAT,CAAcC,EAAd,CAAiBC,eAAMC,GAAvB,CAAD,EAA8B,2BAAW;AAACP,gBAAAA,QAAQ,EAARA;AAAD,eAAX,CAA9B,CAAD,CADgB,EAExBQ,QAFwB,CAEfC,qBAAYc,mBAAZ,EAFe,EAGxBP,SAHwB,EAF8C;;AAAA;AAAA;AAElEC,cAAAA,UAFkE,0BAElEA,UAFkE;AAOzEC,cAAAA,MAAM,CAACD,UAAU,CAACxB,IAAZ,CAAN,CAAwB0B,OAAxB,CAAgC/B,iBAAiB,CAACK,IAAlD;;AAPyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzE,CAAF;AASAM,IAAAA,EAAE,CAAC,gDAAD,EAAmD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC7CC,cAAAA,QAD6C,GAClC,oCAAqB,GAArB,CADkC;AAAA;AAAA,gDAExBb,SAAS,CAACC,iBAAD,CAAT,CACxBc,OADwB,CAChB,CAAC,CAACC,QAAQ,CAACC,IAAT,CAAcC,EAAd,CAAiBC,eAAMC,GAAvB,CAAD,EAA8B,2BAAW;AAACP,gBAAAA,QAAQ,EAARA;AAAD,eAAX,CAA9B,CAAD,CADgB,EAExBQ,QAFwB,CAEfC,qBAAYc,mBAAZ,EAFe,EAGxBP,SAHwB,EAFwB;;AAAA;AAAA;AAE5CC,cAAAA,UAF4C,0BAE5CA,UAF4C;AAOnDC,cAAAA,MAAM,CAACD,UAAU,CAACxB,IAAZ,CAAN,CAAwB0B,OAAxB,CAAgC/B,iBAAiB,CAACK,IAAlD;;AAPmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnD,CAAF;AASD,GAxEO,CAAR;AAyED,CA3EO,CAAR","sourcesContent":["import {expectSaga} from 'redux-saga-test-plan';\nimport {reducer as formReducer} from 'redux-form';\nimport {Action} from 'redux';\nimport * as matchers from 'redux-saga-test-plan/matchers';\nimport {combineReducers} from 'redux';\nimport {\n  createFailedResponse,\n  createSuccessfulResponse,\n} from '../../../__mocks__/response';\nimport repoReducer, {initialState} from '../reducer';\nimport axios from '../../axios';\nimport repoSaga from '../saga';\nimport formMock from '../../../__mocks__/form';\nimport {repoActions} from '../actions';\nimport {repoIssuesMock} from '../../../__mocks__/repo';\nimport {IApplicationState} from '../../appReducer';\nimport {throwError} from 'redux-saga-test-plan/providers';\n\nconst setupTest = (storeInitialState: IApplicationState) =>\n  expectSaga(repoSaga).withReducer<IApplicationState, Action<any>>(\n    combineReducers({\n      form: formReducer,\n      repo: repoReducer,\n    }),\n    storeInitialState,\n  );\n\ndescribe('repoSaga', () => {\n  const page = 1;\n  describe('get github issues', () => {\n    const storeInitialState: IApplicationState = {\n      form: formMock,\n      repo: initialState,\n    };\n    it('should fetch github issues from api successfully', async () => {\n      const response = createSuccessfulResponse(repoIssuesMock);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), response]])\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.getRepoIssuesSuccess({\n            issues: response.data,\n            page,\n            hasMoreIssues: true,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        issues: {\n          ...storeState.repo.issues,\n          [page]: response.data,\n        },\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: true,\n      });\n    });\n    it('should set current page if it is fetched before', async () => {\n      const {storeState} = await setupTest({\n        ...storeInitialState,\n        repo: {\n          ...storeInitialState.repo,\n          issues: {[page]: repoIssuesMock.data},\n        },\n      })\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.setCurrentPage({\n            page,\n            hasMoreIssues: false,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: false,\n      });\n    });\n    it('should throw an error when organization and/or repository not found ', async () => {\n      const response = createFailedResponse(404);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), throwError({response} as any)]])\n        .dispatch(repoActions.getRepoIssuesFailed())\n        .silentRun();\n\n      expect(storeState.repo).toEqual(storeInitialState.repo);\n    });\n    it('should throw an error when api fails with 500 ', async () => {\n      const response = createFailedResponse(500);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), throwError({response} as any)]])\n        .dispatch(repoActions.getRepoIssuesFailed())\n        .silentRun();\n\n      expect(storeState.repo).toEqual(storeInitialState.repo);\n    });\n  });\n});\n"]}