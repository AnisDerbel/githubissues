724891da8dbc3659dc0472126e73957e
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = reduceAssertionObject;

var _deepEqualIdent = _interopRequireDefault(require("deep-equal-ident"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function reduceAssertionObject(componentDetails, objectOrKey, potentialValue) {
  var matcherDetails = typeof objectOrKey === 'object' && !Array.isArray(objectOrKey) ? objectOrKey : require("@babel/runtime/helpers/defineProperty")({},
  objectOrKey, potentialValue);

  var equals = this && this.equals ? this.equals : _deepEqualIdent.default;
  return Object.keys(matcherDetails).reduce(function (prevVal, key) {
    var retVal = _objectSpread({}, prevVal);

    var match = equals(componentDetails[key], matcherDetails[key]);
    retVal.actual[key] = componentDetails[key];
    retVal.expected[key] = matcherDetails[key];





    if (!componentDetails.hasOwnProperty(key)) {
      retVal.missingKeys.push(key);
      retVal.pass = false;
      return retVal;
    }





    if (!match) {
      retVal.unmatchedKeys.push(key);
    }






    if (retVal.pass) {
      retVal.pass = match;
    }

    return retVal;
  }, {
    actual: {},
    expected: {},
    pass: true,
    missingKeys: [],
    unmatchedKeys: [] });

}

module.exports = exports.default;