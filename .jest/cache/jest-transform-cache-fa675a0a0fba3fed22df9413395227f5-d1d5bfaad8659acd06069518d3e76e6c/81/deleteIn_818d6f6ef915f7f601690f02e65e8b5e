f101eeaa2e9c6d58b1365fb505030dd9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toPath2 = _interopRequireDefault(require("lodash/toPath"));

function deleteInWithPath(state, first) {
  if (state === undefined || state === null || first === undefined || first === null) {
    return state;
  }

  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }

  if (rest.length) {
    if (Array.isArray(state)) {
      if (isNaN(first)) {
        throw new Error("Must access array elements with a number, not \"" + String(first) + "\".");
      }

      var firstIndex = Number(first);

      if (firstIndex < state.length) {
        var result = deleteInWithPath.apply(void 0, [state && state[firstIndex]].concat(rest));

        if (result !== state[firstIndex]) {
          var copy = [].concat(state);
          copy[firstIndex] = result;
          return copy;
        }
      }

      return state;
    }

    if (first in state) {
      var _extends2;

      var _result = deleteInWithPath.apply(void 0, [state && state[first]].concat(rest));

      return state[first] === _result ? state : (0, _extends3["default"])({}, state, (_extends2 = {}, _extends2[first] = _result, _extends2));
    }

    return state;
  }

  if (Array.isArray(state)) {
    if (isNaN(first)) {
      throw new Error("Cannot delete non-numerical index from an array. Given: \"" + String(first));
    }

    var _firstIndex = Number(first);

    if (_firstIndex < state.length) {
      var _copy = [].concat(state);

      _copy.splice(_firstIndex, 1);

      return _copy;
    }

    return state;
  }

  if (first in state) {
    var _copy2 = (0, _extends3["default"])({}, state);

    delete _copy2[first];
    return _copy2;
  }

  return state;
}

var deleteIn = function deleteIn(state, field) {
  return deleteInWithPath.apply(void 0, [state].concat((0, _toPath2["default"])(field)));
};

var _default = deleteIn;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlbGV0ZUluLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kczMiLCJfdG9QYXRoMiIsImRlbGV0ZUluV2l0aFBhdGgiLCJzdGF0ZSIsImZpcnN0IiwidW5kZWZpbmVkIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlc3QiLCJBcnJheSIsIl9rZXkiLCJpc0FycmF5IiwiaXNOYU4iLCJFcnJvciIsIlN0cmluZyIsImZpcnN0SW5kZXgiLCJOdW1iZXIiLCJyZXN1bHQiLCJhcHBseSIsImNvbmNhdCIsImNvcHkiLCJfZXh0ZW5kczIiLCJfcmVzdWx0IiwiX2ZpcnN0SW5kZXgiLCJfY29weSIsInNwbGljZSIsIl9jb3B5MiIsImRlbGV0ZUluIiwiZmllbGQiLCJfZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBRCxDQUFwQzs7QUFFQUMsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjs7QUFFQSxJQUFJRSxTQUFTLEdBQUdKLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQUQsQ0FBUixDQUF0Qzs7QUFFQSxJQUFJSSxRQUFRLEdBQUdMLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZUFBRCxDQUFSLENBQXJDOztBQUVBLFNBQVNLLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsS0FBakMsRUFBd0M7QUFDdEMsTUFBSUQsS0FBSyxLQUFLRSxTQUFWLElBQXVCRixLQUFLLEtBQUssSUFBakMsSUFBeUNDLEtBQUssS0FBS0MsU0FBbkQsSUFBZ0VELEtBQUssS0FBSyxJQUE5RSxFQUFvRjtBQUNsRixXQUFPRCxLQUFQO0FBQ0Q7O0FBRUQsT0FBSyxJQUFJRyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBckIsRUFB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RUFBOEJHLEtBQTlCLENBQWI7O0FBRUEsV0FBT3dCLE1BQU0sQ0FBQ3ZCLEtBQUQsQ0FBYjtBQUNBLFdBQU91QixNQUFQO0FBQ0Q7O0FBRUQsU0FBT3hCLEtBQVA7QUFDRDs7QUFFRCxJQUFJeUIsUUFBUSxHQUFHLFNBQVNBLFFBQVQsQ0FBa0J6QixLQUFsQixFQUF5QjBCLEtBQXpCLEVBQWdDO0FBQzdDLFNBQU8zQixnQkFBZ0IsQ0FBQ2lCLEtBQWpCLENBQXVCLEtBQUssQ0FBNUIsRUFBK0IsQ0FBQ2hCLEtBQUQsRUFBUWlCLE1BQVIsQ0FBZSxDQUFDLEdBQUduQixRQUFRLENBQUMsU0FBRCxDQUFaLEVBQXlCNEIsS0FBekIsQ0FBZixDQUEvQixDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxJQUFJQyxRQUFRLEdBQUdGLFFBQWY7QUFDQTlCLE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUJnQyxRQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF90b1BhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL3RvUGF0aFwiKSk7XG5cbmZ1bmN0aW9uIGRlbGV0ZUluV2l0aFBhdGgoc3RhdGUsIGZpcnN0KSB7XG4gIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHN0YXRlID09PSBudWxsIHx8IGZpcnN0ID09PSB1bmRlZmluZWQgfHwgZmlyc3QgPT09IG51bGwpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVzdFtfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAocmVzdC5sZW5ndGgpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdGF0ZSkpIHtcbiAgICAgIGlmIChpc05hTihmaXJzdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBhY2Nlc3MgYXJyYXkgZWxlbWVudHMgd2l0aCBhIG51bWJlciwgbm90IFxcXCJcIiArIFN0cmluZyhmaXJzdCkgKyBcIlxcXCIuXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlyc3RJbmRleCA9IE51bWJlcihmaXJzdCk7XG5cbiAgICAgIGlmIChmaXJzdEluZGV4IDwgc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkZWxldGVJbldpdGhQYXRoLmFwcGx5KHZvaWQgMCwgW3N0YXRlICYmIHN0YXRlW2ZpcnN0SW5kZXhdXS5jb25jYXQocmVzdCkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHN0YXRlW2ZpcnN0SW5kZXhdKSB7XG4gICAgICAgICAgdmFyIGNvcHkgPSBbXS5jb25jYXQoc3RhdGUpO1xuICAgICAgICAgIGNvcHlbZmlyc3RJbmRleF0gPSByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGlmIChmaXJzdCBpbiBzdGF0ZSkge1xuICAgICAgdmFyIF9leHRlbmRzMjtcblxuICAgICAgdmFyIF9yZXN1bHQgPSBkZWxldGVJbldpdGhQYXRoLmFwcGx5KHZvaWQgMCwgW3N0YXRlICYmIHN0YXRlW2ZpcnN0XV0uY29uY2F0KHJlc3QpKTtcblxuICAgICAgcmV0dXJuIHN0YXRlW2ZpcnN0XSA9PT0gX3Jlc3VsdCA/IHN0YXRlIDogKDAsIF9leHRlbmRzM1tcImRlZmF1bHRcIl0pKHt9LCBzdGF0ZSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbZmlyc3RdID0gX3Jlc3VsdCwgX2V4dGVuZHMyKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RhdGUpKSB7XG4gICAgaWYgKGlzTmFOKGZpcnN0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGRlbGV0ZSBub24tbnVtZXJpY2FsIGluZGV4IGZyb20gYW4gYXJyYXkuIEdpdmVuOiBcXFwiXCIgKyBTdHJpbmcoZmlyc3QpKTtcbiAgICB9XG5cbiAgICB2YXIgX2ZpcnN0SW5kZXggPSBOdW1iZXIoZmlyc3QpO1xuXG4gICAgaWYgKF9maXJzdEluZGV4IDwgc3RhdGUubGVuZ3RoKSB7XG4gICAgICB2YXIgX2NvcHkgPSBbXS5jb25jYXQoc3RhdGUpO1xuXG4gICAgICBfY29weS5zcGxpY2UoX2ZpcnN0SW5kZXgsIDEpO1xuXG4gICAgICByZXR1cm4gX2NvcHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgaWYgKGZpcnN0IGluIHN0YXRlKSB7XG4gICAgdmFyIF9jb3B5MiA9ICgwLCBfZXh0ZW5kczNbXCJkZWZhdWx0XCJdKSh7fSwgc3RhdGUpO1xuXG4gICAgZGVsZXRlIF9jb3B5MltmaXJzdF07XG4gICAgcmV0dXJuIF9jb3B5MjtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxudmFyIGRlbGV0ZUluID0gZnVuY3Rpb24gZGVsZXRlSW4oc3RhdGUsIGZpZWxkKSB7XG4gIHJldHVybiBkZWxldGVJbldpdGhQYXRoLmFwcGx5KHZvaWQgMCwgW3N0YXRlXS5jb25jYXQoKDAsIF90b1BhdGgyW1wiZGVmYXVsdFwiXSkoZmllbGQpKSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBkZWxldGVJbjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il19