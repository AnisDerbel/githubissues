0c9fb4ddc5b8d0c71980c17a8673524b
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;

var DomUtils = __importStar(require("domutils"));

var boolbase_1 = require("boolbase");

var compile_1 = require("./compile");

var subselects_1 = require("./pseudo-selectors/subselects");

var defaultEquals = function defaultEquals(a, b) {
  return a === b;
};

var defaultOptions = {
  adapter: DomUtils,
  equals: defaultEquals
};

function convertOptionFormats(options) {
  var _a, _b, _c, _d;

  var opts = options !== null && options !== void 0 ? options : defaultOptions;
  (_a = opts.adapter) !== null && _a !== void 0 ? _a : opts.adapter = DomUtils;
  (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;
  return opts;
}

function wrapCompile(func) {
  return function addAdapter(selector, options, context) {
    var opts = convertOptionFormats(options);
    return func(selector, opts, context);
  };
}

exports.compile = wrapCompile(compile_1.compile);
exports._compileUnsafe = wrapCompile(compile_1.compileUnsafe);
exports._compileToken = wrapCompile(compile_1.compileToken);

function getSelectorFunc(searchFunc) {
  return function select(query, elements, options) {
    var opts = convertOptionFormats(options);

    if (typeof query !== "function") {
      query = compile_1.compileUnsafe(query, opts, elements);
    }

    var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
    return searchFunc(query, filteredElements, opts);
  };
}

function prepareContext(elems, adapter, shouldTestNextSiblings) {
  if (shouldTestNextSiblings === void 0) {
    shouldTestNextSiblings = false;
  }

  if (shouldTestNextSiblings) {
    elems = appendNextSiblings(elems, adapter);
  }

  return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);
}

exports.prepareContext = prepareContext;

function appendNextSiblings(elem, adapter) {
  var elems = Array.isArray(elem) ? elem.slice(0) : [elem];

  for (var i = 0; i < elems.length; i++) {
    var nextSiblings = subselects_1.getNextSiblings(elems[i], adapter);
    elems.push.apply(elems, nextSiblings);
  }

  return elems;
}

exports.selectAll = getSelectorFunc(function (query, elems, options) {
  return query === boolbase_1.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems);
});
exports.selectOne = getSelectorFunc(function (query, elems, options) {
  return query === boolbase_1.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems);
});

function is(elem, query, options) {
  var opts = convertOptionFormats(options);
  return (typeof query === "function" ? query : compile_1.compile(query, opts))(elem);
}

exports.is = is;
exports.default = exports.selectAll;

var pseudo_selectors_1 = require("./pseudo-selectors");

Object.defineProperty(exports, "filters", {
  enumerable: true,
  get: function get() {
    return pseudo_selectors_1.filters;
  }
});
Object.defineProperty(exports, "pseudos", {
  enumerable: true,
  get: function get() {
    return pseudo_selectors_1.pseudos;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,