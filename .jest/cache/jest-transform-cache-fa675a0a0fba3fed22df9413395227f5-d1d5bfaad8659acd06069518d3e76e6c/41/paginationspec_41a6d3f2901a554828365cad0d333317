b9d17c173f6709a6fea8fc9880b8bf5c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

require("jest");

var react_1 = tslib_1.__importDefault(require("react"));

var react_native_paper_1 = require("react-native-paper");

var enzyme_1 = require("enzyme");

var enzyme_adapter_react_17_1 = tslib_1.__importDefault(require("@wojtekmaj/enzyme-adapter-react-17"));

enzyme_1.configure({
  adapter: new enzyme_adapter_react_17_1.default()
});

var Pagination_1 = tslib_1.__importDefault(require("../Pagination"));

var react_redux_1 = require("react-redux");

var redux_mock_store_1 = tslib_1.__importDefault(require("redux-mock-store"));

var reducer_1 = require("../../redux/repo/reducer");

var theme_1 = tslib_1.__importDefault(require("../../theme"));

var actions_1 = require("../../redux/repo/actions");

var getRepoIssuesMock = jest.spyOn(actions_1.repoActions, 'getRepoIssues');
var mockStore = redux_mock_store_1.default();
var mockedStore;
var component;
var onPress = jest.fn();

var getPreviousButton = function getPreviousButton() {
  return component.find({
    testID: 'previous__button'
  }).first();
};

var getNextButton = function getNextButton() {
  return component.find({
    testID: 'next__button'
  }).first();
};

describe('Pagination', function () {
  var renderComponent = function renderComponent(store) {
    return enzyme_1.mount(react_1.default.createElement(react_native_paper_1.Provider, {
      theme: theme_1.default
    }, react_1.default.createElement(Pagination_1.default, null)), {
      wrappingComponent: react_redux_1.Provider,
      wrappingComponentProps: {
        store: store
      }
    });
  };

  describe('initial state', function () {
    var repoState = (0, _extends2.default)({}, reducer_1.initialState, {
      page: 1
    });
    beforeEach(function () {
      Pagination_1.default.prototype.onPressNext = onPress;
      mockedStore = mockStore({
        repo: repoState
      });
      component = renderComponent(mockedStore);
    });
    it('should show disabled previous button', function () {
      expect(getPreviousButton().props()).toMatchObject({
        children: expect.anything(),
        disabled: true,
        mode: 'contained',
        onPress: expect.any(Function)
      });
    });
    describe('on press next button', function () {
      beforeEach(function () {
        getNextButton().props().onPress();
        mockedStore = mockStore({
          repo: (0, _extends2.default)({}, reducer_1.initialState, {
            isLoading: true
          })
        });
        component = renderComponent(mockedStore);
      });
      it('should dispatch getRepoIssues action with incremented page number ', function _callee() {
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                expect(getRepoIssuesMock).toHaveBeenCalledTimes(1);
                expect(getRepoIssuesMock).toHaveBeenCalledWith({
                  page: repoState.page + 1
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, null, null, null, Promise);
      });
      it('should be disabled + loading', function () {
        expect(getNextButton().props()).toMatchObject({
          children: expect.anything(),
          disabled: true,
          loading: true,
          mode: 'contained',
          onPress: expect.any(Function)
        });
        expect(getPreviousButton().props()).toMatchObject({
          children: expect.anything(),
          disabled: true,
          mode: 'contained',
          onPress: expect.any(Function)
        });
      });
    });
    describe('on press previous button', function () {
      beforeEach(function () {
        getPreviousButton().props().onPress();
      });
      it('should dispatch getRepoIssues action with decremented page number ', function () {
        expect(getRepoIssuesMock).toHaveBeenCalled();
        expect(getRepoIssuesMock).toHaveBeenCalledWith({
          page: repoState.page - 1
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,