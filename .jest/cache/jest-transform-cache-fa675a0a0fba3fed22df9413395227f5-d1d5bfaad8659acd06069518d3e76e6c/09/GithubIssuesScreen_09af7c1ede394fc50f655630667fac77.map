{"version":3,"sources":["GithubIssuesScreen.tsx"],"names":["GithubIssuesScreen","theme","refList","state","repo","issues","page","form","values","current","scrollToOffset","offset","renderItem","item","openURL","html_url","marginHorizontal","spacing","m","styles","row","top","xs","marginLeft","title","labels","length","variants","info","color","colors","text","marginTop","s","number","created_at","fromNow","user","login","ItemSeparatorComponent","marginVertical","backgroundColor","divider","h1","margin","primary","organization","repository","node_id","container","Pagination","StyleSheet","create","flexDirection","paddingBottom"],"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","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport {\n  FlatList,\n  View,\n  Text,\n  StyleSheet,\n  Linking,\n  TouchableOpacity,\n} from 'react-native';\nimport {Divider, useTheme} from 'react-native-paper';\nimport {useSelector} from 'react-redux';\nimport moment from 'moment';\nimport Labels from '../components/Labels';\nimport {IApplicationState} from '../redux/appReducer';\nimport Title from '../components/Title';\nimport {Issue} from '../redux/repo/reducer';\nimport Open from '../assets/svgs/open.svg';\nimport Closed from '../assets/svgs/closed.svg';\nimport Pagination from '../components/Pagination';\n\nconst GithubIssuesScreen = () => {\n  const theme = useTheme();\n  const refList = useRef<FlatList>(null);\n  const {issues, page} = useSelector((state: IApplicationState) => state.repo);\n  const {\n    form: {values},\n  } = useSelector((state: IApplicationState) => state.form);\n\n  useEffect(() => {\n    refList?.current?.scrollToOffset({offset: 0});\n  }, [page]);\n\n  const renderItem = ({item}: {item: Issue}) => (\n    <TouchableOpacity onPress={() => Linking.openURL(item.html_url)}>\n      <View style={[{marginHorizontal: theme.spacing.m}, styles.row]}>\n        <View style={{top: theme.spacing.xs}}>\n          {item.state === 'open' ? <Open /> : <Closed />}\n        </View>\n        <View style={{marginLeft: theme.spacing.m}}>\n          <Title>{item.title}</Title>\n          {item.labels && item.labels.length > 0 && (\n            <Labels items={item.labels} />\n          )}\n          <Text\n            style={[\n              theme.variants.info,\n              {color: theme.colors.text, marginTop: theme.spacing.s},\n            ]}>\n            #{item.number} opened {moment(item.created_at).fromNow()} by{' '}\n            {item.user.login}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const ItemSeparatorComponent = () => (\n    <Divider\n      style={{\n        marginVertical: theme.spacing.m,\n        backgroundColor: theme.colors.divider,\n      }}\n    />\n  );\n\n  return (\n    <View>\n      {values && (\n        <Text\n          style={[\n            theme.variants.h1,\n            {margin: theme.spacing.m, color: theme.colors.primary},\n          ]}>{`${values.organization}/${values.repository}`}</Text>\n      )}\n\n      <FlatList\n        ref={refList}\n        keyExtractor={item => item.node_id}\n        contentContainerStyle={styles.container}\n        ItemSeparatorComponent={ItemSeparatorComponent}\n        ListFooterComponent={Pagination}\n        renderItem={renderItem}\n        data={issues[page]}\n      />\n    </View>\n  );\n};\n\nexport default GithubIssuesScreen;\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  container: {\n    paddingBottom: 100,\n  },\n});\n"]}