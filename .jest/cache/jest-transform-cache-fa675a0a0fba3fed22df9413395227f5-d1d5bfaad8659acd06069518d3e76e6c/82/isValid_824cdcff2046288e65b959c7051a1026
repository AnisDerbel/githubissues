5a040eb6a968ebd025cf83ac5de24167
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = createIsValid;

var _hasError = _interopRequireDefault(require("../hasError"));

function createIsValid(structure) {
  var getIn = structure.getIn,
      keys = structure.keys;
  var hasError = (0, _hasError["default"])(structure);
  return function (form, getFormState, ignoreSubmitErrors) {
    if (ignoreSubmitErrors === void 0) {
      ignoreSubmitErrors = false;
    }

    return function (state) {
      var nonNullGetFormState = getFormState || function (state) {
        return getIn(state, 'form');
      };

      var formState = nonNullGetFormState(state);
      var syncError = getIn(formState, form + ".syncError");

      if (syncError) {
        return false;
      }

      if (!ignoreSubmitErrors) {
        var error = getIn(formState, form + ".error");

        if (error) {
          return false;
        }
      }

      var syncErrors = getIn(formState, form + ".syncErrors");
      var asyncErrors = getIn(formState, form + ".asyncErrors");
      var submitErrors = ignoreSubmitErrors ? undefined : getIn(formState, form + ".submitErrors");

      if (!syncErrors && !asyncErrors && !submitErrors) {
        return true;
      }

      var registeredFields = getIn(formState, form + ".registeredFields");

      if (!registeredFields) {
        return true;
      }

      return !keys(registeredFields).filter(function (name) {
        return getIn(registeredFields, "['" + name + "'].count") > 0;
      }).some(function (name) {
        return hasError(getIn(registeredFields, "['" + name + "']"), syncErrors, asyncErrors, submitErrors);
      });
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzVmFsaWQuanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsImNyZWF0ZUlzVmFsaWQiLCJfaGFzRXJyb3IiLCJzdHJ1Y3R1cmUiLCJnZXRJbiIsImtleXMiLCJoYXNFcnJvciIsImZvcm0iLCJnZXRGb3JtU3RhdGUiLCJpZ25vcmVTdWJtaXRFcnJvcnMiLCJzdGF0ZSIsIm5vbk51bGxHZXRGb3JtU3RhdGUiLCJmb3JtU3RhdGUiLCJzeW5jRXJyb3IiLCJlcnJvciIsInN5bmNFcnJvcnMiLCJhc3luY0Vycm9ycyIsInN1Ym1pdEVycm9ycyIsInVuZGVmaW5lZCIsInJlZ2lzdGVyZWRGaWVsZHMiLCJmaWx0ZXIiLCJuYW1lIiwic29tZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBRCxDQUFwQzs7QUFFQUMsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUJFLGFBQXJCOztBQUVBLElBQUlDLFNBQVMsR0FBR0wsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxhQUFELENBQVIsQ0FBdEM7O0FBRUEsU0FBU0csYUFBVCxDQUF1QkUsU0FBdkIsRUFBa0M7QUFDaEMsTUFBSUMsS0FBSyxHQUFHRCxTQUFTLENBQUNDLEtBQXRCO0FBQUEsTUFDSUMsSUFBSSxHQUFHRixTQUFTLENBQUNFLElBRHJCO0FBRUEsTUFBSUMsUUFBUSxHQUFHLENBQUMsR0FBR0osU0FBUyxDQUFDLFNBQUQsQ0FBYixFQUEwQkMsU0FBMUIsQ0FBZjtBQUNBLFNBQU8sVUFBVUksSUFBVixFQUFnQkMsWUFBaEIsRUFBOEJDLGtCQUE5QixFQUFrRDtBQUN2RCxRQUFJQSxrQkFBa0IsS0FBSyxLQUFLLENBQWhDLEVBQW1DO0FBQ2pDQSxNQUFBQSxrQkFBa0IsR0FBRyxLQUFyQjtBQUNEOztBQUVELFdBQU8sVUFBVUMsS0FBVixFQUFpQjtBQUN0QixVQUFJQyxtQkFBbUIsR0FBR0gsWUFBWSxJQUFJLFVBQVVFLEtBQVYsRUFBaUI7QUFDekQsZUFBT04sS0FBSyxDQUFDTSxLQUFELEVBQVEsTUFBUixDQUFaO0FBQ0QsT0FGRDs7QUFJQSxVQUFJRSxTQUFTLEdBQUdELG1CQUFtQixDQUFDRCxLQUFELENBQW5DO0FBQ0EsVUFBSUcsU0FBUyxHQUFHVCxLQUFLLENBQUNRLFNBQUQsRUFBWUwsSUFBSSxHQUFHLFlBQW5CLENBQXJCOztBQUVBLFVBQUlNLFNBQUosRUFBZTtBQUNiLGVBQU8sS0FBUDtBQUNEOztBQUVELFVBQUksQ0FBQ0osa0JBQUwsRUFBeUI7QUFDdkIsWUFBSUssS0FBSyxHQUFHVixLQUFLLENBQUNRLFNBQUQsRUFBWUwsSUFBSSxHQUFHLFFBQW5CLENBQWpCOztBQUVBLFlBQUlPLEtBQUosRUFBVztBQUNULGlCQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFVBQUlDLFVBQVUsR0FBR1gsS0FBSyxDQUFDUSxTQUFELEVBQVlMLElBQUksR0FBRyxhQUFuQixDQUF0QjtBQUNBLFVBQUlTLFdBQVcsR0FBR1osS0FBSyxDQUFDUSxTQUFELEVBQVlMLElBQUksR0FBRyxjQUFuQixDQUF2QjtBQUNBLFVBQUlVLFlBQVksR0FBR1Isa0JBQWtCLEdBQUdTLFNBQUgsR0FBZWQsS0FBSyxDQUFDUSxTQUFELEVBQVlMLElBQUksR0FBRyxlQUFuQixDQUF6RDs7QUFFQSxVQUFJLENBQUNRLFVBQUQsSUFBZSxDQUFDQyxXQUFoQixJQUErQixDQUFDQyxZQUFwQyxFQUFrRDtBQUNoRCxlQUFPLElBQVA7QUFDRDs7QUFFRCxVQUFJRSxnQkFBZ0IsR0FBR2YsS0FBSyxDQUFDUSxTQUFELEVBQVlMLElBQUksR0FBRyxtQkFBbkIsQ0FBNUI7O0FBRUEsVUFBSSxDQUFDWSxnQkFBTCxFQUF1QjtBQUNyQixlQUFPLElBQVA7QUFDRDs7QUFFRCxhQUFPLENBQUNkLElBQUksQ0FBQ2MsZ0JBQUQsQ0FBSixDQUF1QkMsTUFBdkIsQ0FBOEIsVUFBVUMsSUFBVixFQUFnQjtBQUNwRCxlQUFPakIsS0FBSyxDQUFDZSxnQkFBRCxFQUFtQixPQUFPRSxJQUFQLEdBQWMsVUFBakMsQ0FBTCxHQUFvRCxDQUEzRDtBQUNELE9BRk8sRUFFTEMsSUFGSyxDQUVBLFVBQVVELElBQVYsRUFBZ0I7QUFDdEIsZUFBT2YsUUFBUSxDQUFDRixLQUFLLENBQUNlLGdCQUFELEVBQW1CLE9BQU9FLElBQVAsR0FBYyxJQUFqQyxDQUFOLEVBQThDTixVQUE5QyxFQUEwREMsV0FBMUQsRUFBdUVDLFlBQXZFLENBQWY7QUFDRCxPQUpPLENBQVI7QUFLRCxLQXZDRDtBQXdDRCxHQTdDRDtBQThDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gY3JlYXRlSXNWYWxpZDtcblxudmFyIF9oYXNFcnJvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2hhc0Vycm9yXCIpKTtcblxuZnVuY3Rpb24gY3JlYXRlSXNWYWxpZChzdHJ1Y3R1cmUpIHtcbiAgdmFyIGdldEluID0gc3RydWN0dXJlLmdldEluLFxuICAgICAga2V5cyA9IHN0cnVjdHVyZS5rZXlzO1xuICB2YXIgaGFzRXJyb3IgPSAoMCwgX2hhc0Vycm9yW1wiZGVmYXVsdFwiXSkoc3RydWN0dXJlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmb3JtLCBnZXRGb3JtU3RhdGUsIGlnbm9yZVN1Ym1pdEVycm9ycykge1xuICAgIGlmIChpZ25vcmVTdWJtaXRFcnJvcnMgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlU3VibWl0RXJyb3JzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgdmFyIG5vbk51bGxHZXRGb3JtU3RhdGUgPSBnZXRGb3JtU3RhdGUgfHwgZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBnZXRJbihzdGF0ZSwgJ2Zvcm0nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmb3JtU3RhdGUgPSBub25OdWxsR2V0Rm9ybVN0YXRlKHN0YXRlKTtcbiAgICAgIHZhciBzeW5jRXJyb3IgPSBnZXRJbihmb3JtU3RhdGUsIGZvcm0gKyBcIi5zeW5jRXJyb3JcIik7XG5cbiAgICAgIGlmIChzeW5jRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlnbm9yZVN1Ym1pdEVycm9ycykge1xuICAgICAgICB2YXIgZXJyb3IgPSBnZXRJbihmb3JtU3RhdGUsIGZvcm0gKyBcIi5lcnJvclwiKTtcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN5bmNFcnJvcnMgPSBnZXRJbihmb3JtU3RhdGUsIGZvcm0gKyBcIi5zeW5jRXJyb3JzXCIpO1xuICAgICAgdmFyIGFzeW5jRXJyb3JzID0gZ2V0SW4oZm9ybVN0YXRlLCBmb3JtICsgXCIuYXN5bmNFcnJvcnNcIik7XG4gICAgICB2YXIgc3VibWl0RXJyb3JzID0gaWdub3JlU3VibWl0RXJyb3JzID8gdW5kZWZpbmVkIDogZ2V0SW4oZm9ybVN0YXRlLCBmb3JtICsgXCIuc3VibWl0RXJyb3JzXCIpO1xuXG4gICAgICBpZiAoIXN5bmNFcnJvcnMgJiYgIWFzeW5jRXJyb3JzICYmICFzdWJtaXRFcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWdpc3RlcmVkRmllbGRzID0gZ2V0SW4oZm9ybVN0YXRlLCBmb3JtICsgXCIucmVnaXN0ZXJlZEZpZWxkc1wiKTtcblxuICAgICAgaWYgKCFyZWdpc3RlcmVkRmllbGRzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWtleXMocmVnaXN0ZXJlZEZpZWxkcykuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBnZXRJbihyZWdpc3RlcmVkRmllbGRzLCBcIlsnXCIgKyBuYW1lICsgXCInXS5jb3VudFwiKSA+IDA7XG4gICAgICB9KS5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBoYXNFcnJvcihnZXRJbihyZWdpc3RlcmVkRmllbGRzLCBcIlsnXCIgKyBuYW1lICsgXCInXVwiKSwgc3luY0Vycm9ycywgYXN5bmNFcnJvcnMsIHN1Ym1pdEVycm9ycyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufSJdfQ==