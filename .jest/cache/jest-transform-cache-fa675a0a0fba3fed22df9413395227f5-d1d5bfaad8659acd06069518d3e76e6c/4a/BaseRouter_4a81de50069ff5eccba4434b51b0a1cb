86f7b418287036b07a9ffeceef479c37
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;







var BaseRouter = {
  getStateForAction: function getStateForAction(state, action) {
    switch (action.type) {
      case 'SET_PARAMS':
        {
          var index = action.source ? state.routes.findIndex(function (r) {return r.key === action.source;}) : state.index;

          if (index === -1) {
            return null;
          }

          return _objectSpread(_objectSpread({}, state), {}, {
            routes: state.routes.map(function (r, i) {return i === index ? _objectSpread(_objectSpread({}, r), {}, {
                params: _objectSpread(_objectSpread({}, r.params),
                action.payload.params) }) :

              r;}) });

        }

      case 'RESET':
        {
          var nextState = action.payload;

          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {return !state.routeNames.includes(route.name);})) {
            return null;
          }

          if (nextState.stale === false) {
            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {return !state.routeNames.includes(name);})) {
              return null;
            }

            return _objectSpread(_objectSpread({}, nextState), {}, {
              routes: nextState.routes.map(function (route) {return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {
                  key: "".concat(route.name, "-").concat((0, require("nanoid/non-secure").nanoid)()) });}) });


          }

          return nextState;
        }

      default:
        return null;}

  },

  shouldActionChangeFocus: function shouldActionChangeFocus(action) {
    return action.type === 'NAVIGATE';
  } };


var _default = BaseRouter;
exports.default = _default;