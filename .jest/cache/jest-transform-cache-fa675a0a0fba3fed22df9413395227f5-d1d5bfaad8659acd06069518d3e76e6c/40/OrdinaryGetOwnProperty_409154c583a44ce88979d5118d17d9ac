633bdea9ef2852364537dbb0a95d7742
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = require('../helpers/getOwnPropertyDescriptor');

var $TypeError = GetIntrinsic('%TypeError%');

var callBound = require('call-bind/callBound');

var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

var has = require('has');

var IsArray = require('./IsArray');

var IsPropertyKey = require('./IsPropertyKey');

var IsRegExp = require('./IsRegExp');

var ToPropertyDescriptor = require('./ToPropertyDescriptor');

var Type = require('./Type');

module.exports = function OrdinaryGetOwnProperty(O, P) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: O must be an Object');
  }

  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: P must be a Property Key');
  }

  if (!has(O, P)) {
    return void 0;
  }

  if (!$gOPD) {
    var arrayLength = IsArray(O) && P === 'length';
    var regexLastIndex = IsRegExp(O) && P === 'lastIndex';
    return {
      '[[Configurable]]': !(arrayLength || regexLastIndex),
      '[[Enumerable]]': $isEnumerable(O, P),
      '[[Value]]': O[P],
      '[[Writable]]': true
    };
  }

  return ToPropertyDescriptor($gOPD(O, P));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9yZGluYXJ5R2V0T3duUHJvcGVydHkuanMiXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsIiRnT1BEIiwiJFR5cGVFcnJvciIsImNhbGxCb3VuZCIsIiRpc0VudW1lcmFibGUiLCJoYXMiLCJJc0FycmF5IiwiSXNQcm9wZXJ0eUtleSIsIklzUmVnRXhwIiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9yZGluYXJ5R2V0T3duUHJvcGVydHkiLCJPIiwiUCIsImFycmF5TGVuZ3RoIiwicmVnZXhMYXN0SW5kZXgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLENBQUMscUNBQUQsQ0FBbkI7O0FBQ0EsSUFBSUUsVUFBVSxHQUFHSCxZQUFZLENBQUMsYUFBRCxDQUE3Qjs7QUFFQSxJQUFJSSxTQUFTLEdBQUdILE9BQU8sQ0FBQyxxQkFBRCxDQUF2Qjs7QUFFQSxJQUFJSSxhQUFhLEdBQUdELFNBQVMsQ0FBQyx1Q0FBRCxDQUE3Qjs7QUFFQSxJQUFJRSxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxLQUFELENBQWpCOztBQUVBLElBQUlNLE9BQU8sR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsSUFBSU8sYUFBYSxHQUFHUCxPQUFPLENBQUMsaUJBQUQsQ0FBM0I7O0FBQ0EsSUFBSVEsUUFBUSxHQUFHUixPQUFPLENBQUMsWUFBRCxDQUF0Qjs7QUFDQSxJQUFJUyxvQkFBb0IsR0FBR1QsT0FBTyxDQUFDLHdCQUFELENBQWxDOztBQUNBLElBQUlVLElBQUksR0FBR1YsT0FBTyxDQUFDLFFBQUQsQ0FBbEI7O0FBSUFXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxzQkFBVCxDQUFnQ0MsQ0FBaEMsRUFBbUNDLENBQW5DLEVBQXNDO0FBQ3RELE1BQUlMLElBQUksQ0FBQ0ksQ0FBRCxDQUFKLEtBQVksUUFBaEIsRUFBMEI7QUFDekIsVUFBTSxJQUFJWixVQUFKLENBQWUsdUNBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUksQ0FBQ0ssYUFBYSxDQUFDUSxDQUFELENBQWxCLEVBQXVCO0FBQ3RCLFVBQU0sSUFBSWIsVUFBSixDQUFlLDRDQUFmLENBQU47QUFDQTs7QUFDRCxNQUFJLENBQUNHLEdBQUcsQ0FBQ1MsQ0FBRCxFQUFJQyxDQUFKLENBQVIsRUFBZ0I7QUFDZixXQUFPLEtBQUssQ0FBWjtBQUNBOztBQUNELE1BQUksQ0FBQ2QsS0FBTCxFQUFZO0FBRVgsUUFBSWUsV0FBVyxHQUFHVixPQUFPLENBQUNRLENBQUQsQ0FBUCxJQUFjQyxDQUFDLEtBQUssUUFBdEM7QUFDQSxRQUFJRSxjQUFjLEdBQUdULFFBQVEsQ0FBQ00sQ0FBRCxDQUFSLElBQWVDLENBQUMsS0FBSyxXQUExQztBQUNBLFdBQU87QUFDTiwwQkFBb0IsRUFBRUMsV0FBVyxJQUFJQyxjQUFqQixDQURkO0FBRU4sd0JBQWtCYixhQUFhLENBQUNVLENBQUQsRUFBSUMsQ0FBSixDQUZ6QjtBQUdOLG1CQUFhRCxDQUFDLENBQUNDLENBQUQsQ0FIUjtBQUlOLHNCQUFnQjtBQUpWLEtBQVA7QUFNQTs7QUFDRCxTQUFPTixvQkFBb0IsQ0FBQ1IsS0FBSyxDQUFDYSxDQUFELEVBQUlDLENBQUosQ0FBTixDQUEzQjtBQUNBLENBdEJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkaXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgSXNSZWdFeHAgPSByZXF1aXJlKCcuL0lzUmVnRXhwJyk7XG52YXIgVG9Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1RvUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb3JkaW5hcnlnZXRvd25wcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE9yZGluYXJ5R2V0T3duUHJvcGVydHkoTywgUCkge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogTyBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRpZiAoIWhhcyhPLCBQKSkge1xuXHRcdHJldHVybiB2b2lkIDA7XG5cdH1cblx0aWYgKCEkZ09QRCkge1xuXHRcdC8vIEVTMyAvIElFIDggZmFsbGJhY2tcblx0XHR2YXIgYXJyYXlMZW5ndGggPSBJc0FycmF5KE8pICYmIFAgPT09ICdsZW5ndGgnO1xuXHRcdHZhciByZWdleExhc3RJbmRleCA9IElzUmVnRXhwKE8pICYmIFAgPT09ICdsYXN0SW5kZXgnO1xuXHRcdHJldHVybiB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6ICEoYXJyYXlMZW5ndGggfHwgcmVnZXhMYXN0SW5kZXgpLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogJGlzRW51bWVyYWJsZShPLCBQKSxcblx0XHRcdCdbW1ZhbHVlXV0nOiBPW1BdLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXHR9XG5cdHJldHVybiBUb1Byb3BlcnR5RGVzY3JpcHRvcigkZ09QRChPLCBQKSk7XG59O1xuIl19