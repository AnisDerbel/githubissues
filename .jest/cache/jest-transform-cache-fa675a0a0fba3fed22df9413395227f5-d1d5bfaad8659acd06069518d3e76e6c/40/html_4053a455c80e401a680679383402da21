1c1f99e9216c1468f483ea83f2af908b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = printHTMLForWrapper;

var _instance = _interopRequireDefault(require("./instance"));

var _isShallowWrapper = _interopRequireDefault(require("./isShallowWrapper"));

var _getConsoleObject = _interopRequireDefault(require("./getConsoleObject"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var consoleObject = (0, _getConsoleObject.default)();

var noop = function noop() {};

function mapWrappersHTML(wrapper) {
  return wrapper.getElements().map(function (node) {
    var inst = (0, _instance.default)(node);
    var type = node.type || inst._tag;
    var error = consoleObject.error;
    consoleObject.error = noop;

    var _ref = node.props ? node.props : inst._currentElement.props,
        children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, ["children"]);

    consoleObject.error = error;
    var transformedProps = Object.keys(props).map(function (key) {
      try {
        return key + "=\"" + props[key].toString() + "\"";
      } catch (e) {
        return key + "=\"[object Object]\"";
      }
    });
    var stringifiedNode = "<" + type + " " + transformedProps.join(' ');

    if (children) {
      stringifiedNode += ">[..children..]</" + node.type;
    } else {
      stringifiedNode += '/>';
    }

    return stringifiedNode;
  });
}

function printHTMLForWrapper(wrapper) {
  switch (wrapper.getElements().length) {
    case 0:
      {
        return '[empty set]';
      }

    case 1:
      {
        if ((0, _isShallowWrapper.default)(wrapper)) {
          return wrapper.debug().replace(/\n(\s*)/g, '');
        }

        return wrapper.html();
      }

    default:
      {
        var nodes = mapWrappersHTML(wrapper).reduce(function (acc, curr, index) {
          return "" + acc + index + ": " + curr + "\n";
        }, '');
        return "Multiple nodes found:\n" + nodes;
      }
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWwuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwicHJpbnRIVE1MRm9yV3JhcHBlciIsIl9pbnN0YW5jZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2lzU2hhbGxvd1dyYXBwZXIiLCJfZ2V0Q29uc29sZU9iamVjdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjb25zb2xlT2JqZWN0Iiwibm9vcCIsIm1hcFdyYXBwZXJzSFRNTCIsIndyYXBwZXIiLCJnZXRFbGVtZW50cyIsIm1hcCIsIm5vZGUiLCJpbnN0IiwidHlwZSIsIl90YWciLCJlcnJvciIsInByb3BzIiwiX2N1cnJlbnRFbGVtZW50IiwiY2hpbGRyZW4iLCJ0cmFuc2Zvcm1lZFByb3BzIiwia2V5cyIsImtleSIsInRvU3RyaW5nIiwiZSIsInN0cmluZ2lmaWVkTm9kZSIsImpvaW4iLCJsZW5ndGgiLCJkZWJ1ZyIsInJlcGxhY2UiLCJodG1sIiwibm9kZXMiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwiaW5kZXgiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsbUJBQWxCOztBQUVBLElBQUlDLFNBQVMsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFELENBQVIsQ0FBdEM7O0FBRUEsSUFBSUMsaUJBQWlCLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQUQsQ0FBUixDQUE5Qzs7QUFFQSxJQUFJRSxpQkFBaUIsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxvQkFBRCxDQUFSLENBQTlDOztBQUVBLFNBQVNELHNCQUFULENBQWdDSSxHQUFoQyxFQUFxQztB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b3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJpbnRIVE1MRm9yV3JhcHBlcjtcblxudmFyIF9pbnN0YW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5zdGFuY2VcIikpO1xuXG52YXIgX2lzU2hhbGxvd1dyYXBwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzU2hhbGxvd1dyYXBwZXJcIikpO1xuXG52YXIgX2dldENvbnNvbGVPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldENvbnNvbGVPYmplY3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBjb25zb2xlT2JqZWN0ID0gKDAsIF9nZXRDb25zb2xlT2JqZWN0LmRlZmF1bHQpKCk7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuZnVuY3Rpb24gbWFwV3JhcHBlcnNIVE1MKHdyYXBwZXIpIHtcbiAgcmV0dXJuIHdyYXBwZXIuZ2V0RWxlbWVudHMoKS5tYXAobm9kZSA9PiB7XG4gICAgY29uc3QgaW5zdCA9ICgwLCBfaW5zdGFuY2UuZGVmYXVsdCkobm9kZSk7XG4gICAgY29uc3QgdHlwZSA9IG5vZGUudHlwZSB8fCBpbnN0Ll90YWc7XG4gICAgY29uc3Qge1xuICAgICAgZXJyb3JcbiAgICB9ID0gY29uc29sZU9iamVjdDtcbiAgICBjb25zb2xlT2JqZWN0LmVycm9yID0gbm9vcDtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IG5vZGUucHJvcHMgPyBub2RlLnByb3BzIDogaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgY29uc29sZU9iamVjdC5lcnJvciA9IGVycm9yO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkUHJvcHMgPSBPYmplY3Qua2V5cyhwcm9wcykubWFwKGtleSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYCR7a2V5fT1cIiR7cHJvcHNba2V5XS50b1N0cmluZygpfVwiYDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGAke2tleX09XCJbb2JqZWN0IE9iamVjdF1cImA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IHN0cmluZ2lmaWVkTm9kZSA9IGA8JHt0eXBlfSAke3RyYW5zZm9ybWVkUHJvcHMuam9pbignICcpfWA7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIHN0cmluZ2lmaWVkTm9kZSArPSBgPlsuLmNoaWxkcmVuLi5dPC8ke25vZGUudHlwZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJpbmdpZmllZE5vZGUgKz0gJy8+JztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZpZWROb2RlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJpbnRIVE1MRm9yV3JhcHBlcih3cmFwcGVyKSB7XG4gIHN3aXRjaCAod3JhcHBlci5nZXRFbGVtZW50cygpLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICdbZW1wdHkgc2V0XSc7XG4gICAgICB9XG5cbiAgICBjYXNlIDE6XG4gICAgICB7XG4gICAgICAgIGlmICgoMCwgX2lzU2hhbGxvd1dyYXBwZXIuZGVmYXVsdCkod3JhcHBlcikpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gY2xlYW4gdXAgaW4gYW55IGF3a3dhcmQgc3BhY2luZyBpbiB0aGUgZGVidWcgb3V0cHV0LlxuICAgICAgICAgIC8vIDxkaXY+ICA8Rm9vIC8+PC9kaXY+ID0+IDxkaXY+PEZvbyAvPjwvZGl2PlxuICAgICAgICAgIHJldHVybiB3cmFwcGVyLmRlYnVnKCkucmVwbGFjZSgvXFxuKFxccyopL2csICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3cmFwcGVyLmh0bWwoKTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gbWFwV3JhcHBlcnNIVE1MKHdyYXBwZXIpLnJlZHVjZSgoYWNjLCBjdXJyLCBpbmRleCkgPT4gYCR7YWNjfSR7aW5kZXh9OiAke2N1cnJ9XFxuYCwgJycpO1xuICAgICAgICByZXR1cm4gYE11bHRpcGxlIG5vZGVzIGZvdW5kOlxcbiR7bm9kZXN9YDtcbiAgICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=