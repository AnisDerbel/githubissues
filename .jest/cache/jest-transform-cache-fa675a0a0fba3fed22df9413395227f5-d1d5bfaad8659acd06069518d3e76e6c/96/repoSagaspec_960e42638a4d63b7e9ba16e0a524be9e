34dcf67c31b71ac4f419c61117c6b5de
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var redux_saga_test_plan_1 = require("redux-saga-test-plan");

var redux_form_1 = require("redux-form");

var matchers = tslib_1.__importStar(require("redux-saga-test-plan/matchers"));

var redux_1 = require("redux");

var response_1 = require("../../../__mocks__/response");

var reducer_1 = tslib_1.__importStar(require("../reducer"));

var axios_1 = tslib_1.__importDefault(require("../../axios"));

var saga_1 = tslib_1.__importDefault(require("../saga"));

var form_1 = tslib_1.__importDefault(require("../../../__mocks__/form"));

var actions_1 = require("../actions");

var repo_1 = require("../../../__mocks__/repo");

var providers_1 = require("redux-saga-test-plan/providers");

var setupTest = function setupTest(storeInitialState) {
  return redux_saga_test_plan_1.expectSaga(saga_1.default).withReducer(redux_1.combineReducers({
    form: redux_form_1.reducer,
    repo: reducer_1.default
  }), storeInitialState);
};

describe('repoSaga', function () {
  var page = 1;
  describe('get github issues', function () {
    var storeInitialState = {
      form: form_1.default,
      repo: reducer_1.initialState
    };
    it('should fetch github issues from api successfully', function _callee() {
      var response, _await$setupTest$prov, storeState;

      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              response = response_1.createSuccessfulResponse(repo_1.repoIssuesMock);
              _context.next = 3;
              return _regenerator.default.awrap(setupTest(storeInitialState).provide([[matchers.call.fn(axios_1.default.get), response]]).dispatch(actions_1.repoActions.getRepoIssues({
                page: page
              })).put(actions_1.repoActions.getRepoIssuesSuccess({
                issues: response.data,
                page: page,
                hasMoreIssues: true
              })).silentRun());

            case 3:
              _await$setupTest$prov = _context.sent;
              storeState = _await$setupTest$prov.storeState;
              expect(storeState.repo).toEqual((0, _extends3.default)({}, storeState.repo, {
                issues: (0, _extends3.default)({}, storeState.repo.issues, (0, _defineProperty2.default)({}, page, response.data)),
                page: page,
                error: false,
                isLoading: false,
                hasMoreIssues: true
              }));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    });
    it('should set current page if it is fetched before', function _callee2() {
      var _await$setupTest$disp, storeState;

      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _regenerator.default.awrap(setupTest((0, _extends3.default)({}, storeInitialState, {
                repo: (0, _extends3.default)({}, storeInitialState.repo, {
                  issues: (0, _defineProperty2.default)({}, page, repo_1.repoIssuesMock.data)
                })
              })).dispatch(actions_1.repoActions.getRepoIssues({
                page: page
              })).put(actions_1.repoActions.setCurrentPage({
                page: page,
                hasMoreIssues: false
              })).silentRun());

            case 2:
              _await$setupTest$disp = _context2.sent;
              storeState = _await$setupTest$disp.storeState;
              expect(storeState.repo).toEqual((0, _extends3.default)({}, storeState.repo, {
                page: page,
                error: false,
                isLoading: false,
                hasMoreIssues: false
              }));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, null, Promise);
    });
    it('should throw an error when organization and/or repository not found ', function _callee3() {
      var response, _await$setupTest$prov2, storeState;

      return _regenerator.default.async(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              response = response_1.createFailedResponse(404);
              _context3.next = 3;
              return _regenerator.default.awrap(setupTest(storeInitialState).provide([[matchers.call.fn(axios_1.default.get), providers_1.throwError({
                response: response
              })]]).dispatch(actions_1.repoActions.getRepoIssuesFailed()).silentRun());

            case 3:
              _await$setupTest$prov2 = _context3.sent;
              storeState = _await$setupTest$prov2.storeState;
              expect(storeState.repo).toEqual(storeInitialState.repo);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, null, null, null, Promise);
    });
    it('should throw an error when api fails with 500 ', function _callee4() {
      var response, _await$setupTest$prov3, storeState;

      return _regenerator.default.async(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              response = response_1.createFailedResponse(500);
              _context4.next = 3;
              return _regenerator.default.awrap(setupTest(storeInitialState).provide([[matchers.call.fn(axios_1.default.get), providers_1.throwError({
                response: response
              })]]).dispatch(actions_1.repoActions.getRepoIssuesFailed()).silentRun());

            case 3:
              _await$setupTest$prov3 = _context4.sent;
              storeState = _await$setupTest$prov3.storeState;
              expect(storeState.repo).toEqual(storeInitialState.repo);

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, null, null, null, Promise);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,