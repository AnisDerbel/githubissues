79041be632c25bd58a41e4d0b3fc77ac
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ReduxFormContext = require("./ReduxFormContext");

var Form = function (_Component) {
  (0, _inheritsLoose2["default"])(Form, _Component);

  function Form(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    if (!props._reduxForm) {
      throw new Error('Form must be inside a component decorated with reduxForm()');
    }

    return _this;
  }

  var _proto = Form.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onSubmit !== prevProps.onSubmit) {
      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        _reduxForm = _this$props._reduxForm,
        rest = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, ["_reduxForm"]);
    return _react["default"].createElement("form", rest);
  };

  return Form;
}(_react.Component);

Form.propTypes = {
  onSubmit: _propTypes["default"].func.isRequired,
  _reduxForm: _propTypes["default"].object
};

var _default = (0, _ReduxFormContext.withReduxForm)(Form);

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvcm0uanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyIiwiX2luaGVyaXRzTG9vc2UyIiwiX3JlYWN0IiwiX3Byb3BUeXBlcyIsIl9SZWR1eEZvcm1Db250ZXh0IiwiRm9ybSIsIl9Db21wb25lbnQiLCJwcm9wcyIsIl90aGlzIiwiY2FsbCIsIl9yZWR1eEZvcm0iLCJFcnJvciIsIl9wcm90byIsInByb3RvdHlwZSIsImNvbXBvbmVudERpZE1vdW50IiwicmVnaXN0ZXJJbm5lck9uU3VibWl0Iiwib25TdWJtaXQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJyZW5kZXIiLCJfdGhpcyRwcm9wcyIsInJlc3QiLCJjcmVhdGVFbGVtZW50IiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJvYmplY3QiLCJfZGVmYXVsdCIsIndpdGhSZWR1eEZvcm0iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHVCQUF1QixHQUFHQyxPQUFPLENBQUMsK0NBQUQsQ0FBckM7O0FBRUEsSUFBSUMsc0JBQXNCLEdBQUdELE9BQU8sQ0FBQyw4Q0FBRCxDQUFwQzs7QUFFQUUsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjs7QUFFQSxJQUFJRSw4QkFBOEIsR0FBR0gsc0JBQXNCLENBQUNELE9BQU8sQ0FBQyxxREFBRCxDQUFSLENBQTNEOztBQUVBLElBQUlLLGVBQWUsR0FBR0osc0JBQXNCLENBQUNELE9BQU8sQ0FBQyxzQ0FBRCxDQUFSLENBQTVDOztBQUVBLElBQUlNLE1BQU0sR0FBR1AsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxPQUFELENBQVIsQ0FBcEM7O0FBRUEsSUFBSU8sVUFBVSxHQUFHTixzQkFBc0IsQ0FBQ0QsT0FBTyxDQUFDLFlBQUQsQ0FBUixDQUF2Qzs7QUFFQSxJQUFJUSxpQkFBaUIsR0FBR1IsT0FBTyxDQUFDLG9CQUFELENBQS9COztBQUVBLElBQUlTLElBQUksR0FBZ0IsVUFBVUMsVUFBVixFQUFzQjtBQUM1QyxHQUFDLEdBQUdMLGVBQWUsQ0FBQyxTQUFELENBQW5CLEVBQWdDSSxJQUFoQyxFQUFzQ0MsVUFBdEM7O0FBRUEsV0FBU0QsSUFBVCxDQUFjRSxLQUFkLEVBQXFCO0FBQ25CLFFBQUlDLEtBQUo7O0FBRUFBLElBQUFBLEtBQUssR0FBR0YsVUFBVSxDQUFDRyxJQUFYLENBQWdCLElBQWhCLEVBQXNCRixLQUF0QixLQUFnQyxJQUF4Qzs7QUFFQSxRQUFJLENBQUNBLEtBQUssQ0FBQ0csVUFBWCxFQUF1QjtBQUNyQixZQUFNLElBQUlDLEtBQUosQ0FBVSw0REFBVixDQUFOO0FBQ0Q7O0FBRUQsV0FBT0gsS0FBUDtBQUNEOztBQUVELE1BQUlJLE1BQU0sR0FBR1AsSUFBSSxDQUFDUSxTQUFsQjs7QUFFQUQsRUFBQUEsTUFBTSxDQUFDRSxpQkFBUCxHQUEyQixTQUFTQSxpQkFBVCxHQUE2QjtBQUN0RCxTQUFLUCxLQUFMLENBQVdHLFVBQVgsQ0FBc0JLLHFCQUF0QixDQUE0QyxLQUFLUixLQUFMLENBQVdTLFFBQXZEO0FBQ0QsR0FGRDs7QUFJQUosRUFBQUEsTUFBTSxDQUFDSyxrQkFBUCxHQUE0QixTQUFTQSxrQkFBVCxDQUE0QkMsU0FBNUIsRUFBdUM7QUFDakUsUUFBSSxLQUFLWCxLQUFMLENBQVdTLFFBQVgsS0FBd0JFLFNBQVMsQ0FBQ0YsUUFBdEMsRUFBZ0Q7QUFDOUMsV0FBS1QsS0FBTCxDQUFXRyxVQUFYLENBQXNCSyxxQkFBdEIsQ0FBNEMsS0FBS1IsS0FBTCxDQUFXUyxRQUF2RDtBQUNEO0FBQ0YsR0FKRDs7QUFNQUosRUFBQUEsTUFBTSxDQUFDTyxNQUFQLEdBQWdCLFNBQVNBLE1BQVQsR0FBa0I7QUFDaEMsUUFBSUMsV0FBVyxHQUFHLEtBQUtiLEtBQXZCO0FBQUEsUUFDSUcsVUFBVSxHQUFHVSxXQUFXLENBQUNWLFVBRDdCO0FBQUEsUUFFSVcsSUFBSSxHQUFHLENBQUMsR0FBR3JCLDhCQUE4QixDQUFDLFNBQUQsQ0FBbEMsRUFBK0NvQixXQUEvQyxFQUE0RCxDQUFDLFlBQUQsQ0FBNUQsQ0FGWDtBQUdBLFdBQW9CbEIsTUFBTSxDQUFDLFNBQUQsQ0FBTixDQUFrQm9CLGFBQWxCLENBQWdDLE1BQWhDLEVBQXdDRCxJQUF4QyxDQUFwQjtBQUNELEdBTEQ7O0FBT0EsU0FBT2hCLElBQVA7QUFDRCxDQW5DdUIsQ0FtQ3RCSCxNQUFNLENBQUNxQixTQW5DZSxDQUF4Qjs7QUFxQ0FsQixJQUFJLENBQUNtQixTQUFMLEdBQWlCO0FBQ2ZSLEVBQUFBLFFBQVEsRUFBRWIsVUFBVSxDQUFDLFNBQUQsQ0FBVixDQUFzQnNCLElBQXRCLENBQTJCQyxVQUR0QjtBQUVmaEIsRUFBQUEsVUFBVSxFQUFFUCxVQUFVLENBQUMsU0FBRCxDQUFWLENBQXNCd0I7QUFGbkIsQ0FBakI7O0FBS0EsSUFBSUMsUUFBUSxHQUFHLENBQUMsR0FBR3hCLGlCQUFpQixDQUFDeUIsYUFBdEIsRUFBcUN4QixJQUFyQyxDQUFmOztBQUVBUCxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCOEIsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9SZWR1eEZvcm1Db250ZXh0ID0gcmVxdWlyZShcIi4vUmVkdXhGb3JtQ29udGV4dFwiKTtcblxudmFyIEZvcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKEZvcm0sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvcm0ocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcblxuICAgIGlmICghcHJvcHMuX3JlZHV4Rm9ybSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtIG11c3QgYmUgaW5zaWRlIGEgY29tcG9uZW50IGRlY29yYXRlZCB3aXRoIHJlZHV4Rm9ybSgpJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuX3JlZHV4Rm9ybS5yZWdpc3RlcklubmVyT25TdWJtaXQodGhpcy5wcm9wcy5vblN1Ym1pdCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblN1Ym1pdCAhPT0gcHJldlByb3BzLm9uU3VibWl0KSB7XG4gICAgICB0aGlzLnByb3BzLl9yZWR1eEZvcm0ucmVnaXN0ZXJJbm5lck9uU3VibWl0KHRoaXMucHJvcHMub25TdWJtaXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF9yZWR1eEZvcm0gPSBfdGhpcyRwcm9wcy5fcmVkdXhGb3JtLFxuICAgICAgICByZXN0ID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMltcImRlZmF1bHRcIl0pKF90aGlzJHByb3BzLCBbXCJfcmVkdXhGb3JtXCJdKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImZvcm1cIiwgcmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm07XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtLnByb3BUeXBlcyA9IHtcbiAgb25TdWJtaXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgX3JlZHV4Rm9ybTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0XG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX1JlZHV4Rm9ybUNvbnRleHQud2l0aFJlZHV4Rm9ybSkoRm9ybSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il19