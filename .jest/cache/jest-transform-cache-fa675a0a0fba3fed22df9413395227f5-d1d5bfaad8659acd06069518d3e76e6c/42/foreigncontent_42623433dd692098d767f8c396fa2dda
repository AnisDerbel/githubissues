31090f0543a5786db2b0f89b6314aeeb
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _EXITS_FOREIGN_CONTEN;

var Tokenizer = require('../tokenizer');

var HTML = require('./html');

var $ = HTML.TAG_NAMES;
var NS = HTML.NAMESPACES;
var ATTRS = HTML.ATTRS;
var MIME_TYPES = {
  TEXT_HTML: 'text/html',
  APPLICATION_XML: 'application/xhtml+xml'
};
var DEFINITION_URL_ATTR = 'definitionurl';
var ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
var SVG_ATTRS_ADJUSTMENT_MAP = {
  attributename: 'attributeName',
  attributetype: 'attributeType',
  basefrequency: 'baseFrequency',
  baseprofile: 'baseProfile',
  calcmode: 'calcMode',
  clippathunits: 'clipPathUnits',
  diffuseconstant: 'diffuseConstant',
  edgemode: 'edgeMode',
  filterunits: 'filterUnits',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  limitingconeangle: 'limitingConeAngle',
  markerheight: 'markerHeight',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  numoctaves: 'numOctaves',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  refx: 'refX',
  refy: 'refY',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stitchtiles: 'stitchTiles',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textlength: 'textLength',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  xchannelselector: 'xChannelSelector',
  ychannelselector: 'yChannelSelector',
  zoomandpan: 'zoomAndPan'
};
var XML_ATTRS_ADJUSTMENT_MAP = {
  'xlink:actuate': {
    prefix: 'xlink',
    name: 'actuate',
    namespace: NS.XLINK
  },
  'xlink:arcrole': {
    prefix: 'xlink',
    name: 'arcrole',
    namespace: NS.XLINK
  },
  'xlink:href': {
    prefix: 'xlink',
    name: 'href',
    namespace: NS.XLINK
  },
  'xlink:role': {
    prefix: 'xlink',
    name: 'role',
    namespace: NS.XLINK
  },
  'xlink:show': {
    prefix: 'xlink',
    name: 'show',
    namespace: NS.XLINK
  },
  'xlink:title': {
    prefix: 'xlink',
    name: 'title',
    namespace: NS.XLINK
  },
  'xlink:type': {
    prefix: 'xlink',
    name: 'type',
    namespace: NS.XLINK
  },
  'xml:base': {
    prefix: 'xml',
    name: 'base',
    namespace: NS.XML
  },
  'xml:lang': {
    prefix: 'xml',
    name: 'lang',
    namespace: NS.XML
  },
  'xml:space': {
    prefix: 'xml',
    name: 'space',
    namespace: NS.XML
  },
  xmlns: {
    prefix: '',
    name: 'xmlns',
    namespace: NS.XMLNS
  },
  'xmlns:xlink': {
    prefix: 'xmlns',
    name: 'xlink',
    namespace: NS.XMLNS
  }
};
var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
  altglyph: 'altGlyph',
  altglyphdef: 'altGlyphDef',
  altglyphitem: 'altGlyphItem',
  animatecolor: 'animateColor',
  animatemotion: 'animateMotion',
  animatetransform: 'animateTransform',
  clippath: 'clipPath',
  feblend: 'feBlend',
  fecolormatrix: 'feColorMatrix',
  fecomponenttransfer: 'feComponentTransfer',
  fecomposite: 'feComposite',
  feconvolvematrix: 'feConvolveMatrix',
  fediffuselighting: 'feDiffuseLighting',
  fedisplacementmap: 'feDisplacementMap',
  fedistantlight: 'feDistantLight',
  feflood: 'feFlood',
  fefunca: 'feFuncA',
  fefuncb: 'feFuncB',
  fefuncg: 'feFuncG',
  fefuncr: 'feFuncR',
  fegaussianblur: 'feGaussianBlur',
  feimage: 'feImage',
  femerge: 'feMerge',
  femergenode: 'feMergeNode',
  femorphology: 'feMorphology',
  feoffset: 'feOffset',
  fepointlight: 'fePointLight',
  fespecularlighting: 'feSpecularLighting',
  fespotlight: 'feSpotLight',
  fetile: 'feTile',
  feturbulence: 'feTurbulence',
  foreignobject: 'foreignObject',
  glyphref: 'glyphRef',
  lineargradient: 'linearGradient',
  radialgradient: 'radialGradient',
  textpath: 'textPath'
};
var EXITS_FOREIGN_CONTENT = (_EXITS_FOREIGN_CONTEN = {}, (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.B, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.BIG, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.BLOCKQUOTE, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.BODY, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.BR, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.CENTER, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.CODE, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.DD, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.DIV, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.DL, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.DT, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.EM, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.EMBED, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.H1, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.H2, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.H3, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.H4, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.H5, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.H6, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.HEAD, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.HR, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.I, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.IMG, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.LI, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.LISTING, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.MENU, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.META, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.NOBR, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.OL, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.P, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.PRE, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.RUBY, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.S, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.SMALL, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.SPAN, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.STRONG, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.STRIKE, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.SUB, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.SUP, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.TABLE, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.TT, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.U, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.UL, true), (0, _defineProperty2.default)(_EXITS_FOREIGN_CONTEN, $.VAR, true), _EXITS_FOREIGN_CONTEN);

exports.causesExit = function (startTagToken) {
  var tn = startTagToken.tagName;
  var isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);
  return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
};

exports.adjustTokenMathMLAttrs = function (token) {
  for (var i = 0; i < token.attrs.length; i++) {
    if (token.attrs[i].name === DEFINITION_URL_ATTR) {
      token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
      break;
    }
  }
};

exports.adjustTokenSVGAttrs = function (token) {
  for (var i = 0; i < token.attrs.length; i++) {
    var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

    if (adjustedAttrName) {
      token.attrs[i].name = adjustedAttrName;
    }
  }
};

exports.adjustTokenXMLAttrs = function (token) {
  for (var i = 0; i < token.attrs.length; i++) {
    var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

    if (adjustedAttrEntry) {
      token.attrs[i].prefix = adjustedAttrEntry.prefix;
      token.attrs[i].name = adjustedAttrEntry.name;
      token.attrs[i].namespace = adjustedAttrEntry.namespace;
    }
  }
};

exports.adjustTokenSVGTagName = function (token) {
  var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

  if (adjustedTagName) {
    token.tagName = adjustedTagName;
  }
};

function isMathMLTextIntegrationPoint(tn, ns) {
  return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
}

function isHtmlIntegrationPoint(tn, ns, attrs) {
  if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
    for (var i = 0; i < attrs.length; i++) {
      if (attrs[i].name === ATTRS.ENCODING) {
        var value = attrs[i].value.toLowerCase();
        return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
      }
    }
  }

  return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
}

exports.isIntegrationPoint = function (tn, ns, attrs, foreignNS) {
  if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
    return true;
  }

  if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
    return true;
  }

  return false;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,