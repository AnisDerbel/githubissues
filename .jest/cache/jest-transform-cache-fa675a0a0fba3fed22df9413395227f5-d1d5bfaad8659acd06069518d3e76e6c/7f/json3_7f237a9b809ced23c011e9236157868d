e433cd0f9134b0acc232b901cdc28a0a
;

(function (root) {
  var isLoader = typeof define === "function" && define.amd;
  var freeGlobal = typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal)) {
    root = freeGlobal;
  }

  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        _isProperty,
        _forEach,
        undef;

    var isExtended = new Date(-3509827334573292);

    try {
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    function has(name) {
      if (has[name] !== undef) {
        return has[name];
      }

      var isSupported;

      if (name == "bug-string-char-index") {
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value,
            serialized = "{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";

        if (name == "json-stringify") {
          var stringify = exports.stringify,
              stringifySupported = typeof stringify == "function" && isExtended;

          if (stringifySupported) {
            (value = function value() {
              return 1;
            }).toJSON = value;

            try {
              stringifySupported = stringify(0) === "0" && stringify(new Number()) === "0" && stringify(new String()) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === "1" && stringify([value]) == "[1]" && stringify([undef]) == "[null]" && stringify(null) == "null" && stringify([undef, getClass, null]) == "[null,null,null]" && stringify({
                "a": [value, true, false, null, "\x00\b\n\f\r\t"]
              }) == serialized && stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }

          isSupported = stringifySupported;
        }

        if (name == "json-parse") {
          var parse = exports.parse;

          if (typeof parse == "function") {
            try {
              if (parse("0") === 0 && !parse(false)) {
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                if (parseSupported) {
                  try {
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}

                  if (parseSupported) {
                    try {
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }

                  if (parseSupported) {
                    try {
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }

          isSupported = parseSupported;
        }
      }

      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";
      var charIndexBuggy = has("bug-string-char-index");

      if (!isExtended) {
        var floor = Math.floor;
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];

        var getDay = function getDay(year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      if (!(_isProperty = objectProto.hasOwnProperty)) {
        _isProperty = function isProperty(property) {
          var members = {},
              constructor;

          if ((members.__proto__ = null, members.__proto__ = {
            "toString": 1
          }, members).toString != getClass) {
            _isProperty = function isProperty(property) {
              var original = this.__proto__,
                  result = (property in (this.__proto__ = null, this));
              this.__proto__ = original;
              return result;
            };
          } else {
            constructor = members.constructor;

            _isProperty = function isProperty(property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }

          members = null;
          return _isProperty.call(this, property);
        };
      }

      var PrimitiveTypes = {
        "boolean": 1,
        "number": 1,
        "string": 1,
        "undefined": 1
      };

      var isHostType = function isHostType(object, property) {
        var type = typeof object[property];
        return type == "object" ? !!object[property] : !PrimitiveTypes[type];
      };

      _forEach = function forEach(object, callback) {
        var size = 0,
            Properties,
            members,
            property;
        (Properties = function Properties() {
          this.valueOf = 0;
        }).prototype.valueOf = 0;
        members = new Properties();

        for (property in members) {
          if (_isProperty.call(members, property)) {
            size++;
          }
        }

        Properties = members = null;

        if (!size) {
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];

          _forEach = function forEach(object, callback) {
            var isFunction = getClass.call(object) == functionClass,
                property,
                length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && isHostType(object, "hasOwnProperty") ? object.hasOwnProperty : _isProperty;

            for (property in object) {
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }

            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {
              ;
            }
          };
        } else if (size == 2) {
          _forEach = function forEach(object, callback) {
            var members = {},
                isFunction = getClass.call(object) == functionClass,
                property;

            for (property in object) {
              if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          _forEach = function forEach(object, callback) {
            var isFunction = getClass.call(object) == functionClass,
                property,
                isConstructor;

            for (property in object) {
              if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }

            if (isConstructor || _isProperty.call(object, property = "constructor")) {
              callback(property);
            }
          };
        }

        return _forEach(object, callback);
      };

      if (!has("json-stringify")) {
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };
        var leadingZeroes = "000000";

        var toPaddedString = function toPaddedString(width, value) {
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        var unicodePrefix = "\\u00";

        var quote = function quote(value) {
          var result = '"',
              index = 0,
              length = value.length,
              useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);

            switch (charCode) {
              case 8:
              case 9:
              case 10:
              case 12:
              case 13:
              case 34:
              case 92:
                result += Escapes[charCode];
                break;

              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }

                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }

          return result + '"';
        };

        var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

          try {
            value = object[property];
          } catch (exception) {}

          if (typeof value == "object" && value) {
            className = getClass.call(value);

            if (className == dateClass && !_isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                if (getDay) {
                  date = floor(value / 864e5);

                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {
                    ;
                  }

                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {
                    ;
                  }

                  date = 1 + date - getDay(year, month);
                  time = (value % 864e5 + 864e5) % 864e5;
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }

                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
              value = value.toJSON(property);
            }
          }

          if (callback) {
            value = callback.call(object, property, value);
          }

          if (value === null) {
            return "null";
          }

          className = getClass.call(value);

          if (className == booleanClass) {
            return "" + value;
          } else if (className == numberClass) {
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            return quote("" + value);
          }

          if (typeof value == "object") {
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                throw TypeError();
              }
            }

            stack.push(value);
            results = [];
            prefix = indentation;
            indentation += whitespace;

            if (className == arrayClass) {
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }

              result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
            } else {
              _forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                if (element !== undef) {
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });

              result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
            }

            stack.pop();
            return result;
          }
        };

        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;

          if (typeof filter == "function" || typeof filter == "object" && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              properties = {};

              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {
                ;
              }
            }
          }

          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {
                  ;
                }
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }

          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };
        var Index, Source;

        var abort = function abort() {
          Index = Source = null;
          throw SyntaxError();
        };

        var lex = function lex() {
          var source = Source,
              length = source.length,
              value,
              begin,
              position,
              isSigned,
              charCode;

          while (Index < length) {
            charCode = source.charCodeAt(Index);

            switch (charCode) {
              case 9:
              case 10:
              case 13:
              case 32:
                Index++;
                break;

              case 123:
              case 125:
              case 91:
              case 93:
              case 58:
              case 44:
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;

              case 34:
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);

                  if (charCode < 32) {
                    abort();
                  } else if (charCode == 92) {
                    charCode = source.charCodeAt(++Index);

                    switch (charCode) {
                      case 92:
                      case 34:
                      case 47:
                      case 98:
                      case 116:
                      case 110:
                      case 102:
                      case 114:
                        value += Unescapes[charCode];
                        Index++;
                        break;

                      case 117:
                        begin = ++Index;

                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);

                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            abort();
                          }
                        }

                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;

                      default:
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      break;
                    }

                    charCode = source.charCodeAt(Index);
                    begin = Index;

                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }

                    value += source.slice(begin, Index);
                  }
                }

                if (source.charCodeAt(Index) == 34) {
                  Index++;
                  return value;
                }

                abort();

              default:
                begin = Index;

                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }

                if (charCode >= 48 && charCode <= 57) {
                  if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                    abort();
                  }

                  isSigned = false;

                  for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {
                    ;
                  }

                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;

                    for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {
                      ;
                    }

                    if (position == Index) {
                      abort();
                    }

                    Index = position;
                  }

                  charCode = source.charCodeAt(Index);

                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);

                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }

                    for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {
                      ;
                    }

                    if (position == Index) {
                      abort();
                    }

                    Index = position;
                  }

                  return +source.slice(begin, Index);
                }

                if (isSigned) {
                  abort();
                }

                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }

                abort();
            }
          }

          return "$";
        };

        var get = function get(value) {
          var results, hasMembers;

          if (value == "$") {
            abort();
          }

          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              return value.slice(1);
            }

            if (value == "[") {
              results = [];

              for (;; hasMembers || (hasMembers = true)) {
                value = lex();

                if (value == "]") {
                  break;
                }

                if (hasMembers) {
                  if (value == ",") {
                    value = lex();

                    if (value == "]") {
                      abort();
                    }
                  } else {
                    abort();
                  }
                }

                if (value == ",") {
                  abort();
                }

                results.push(get(value));
              }

              return results;
            } else if (value == "{") {
              results = {};

              for (;; hasMembers || (hasMembers = true)) {
                value = lex();

                if (value == "}") {
                  break;
                }

                if (hasMembers) {
                  if (value == ",") {
                    value = lex();

                    if (value == "}") {
                      abort();
                    }
                  } else {
                    abort();
                  }
                }

                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }

                results[value.slice(1)] = get(lex());
              }

              return results;
            }

            abort();
          }

          return value;
        };

        var update = function update(source, property, callback) {
          var element = walk(source, property, callback);

          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        var walk = function walk(source, property, callback) {
          var value = source[property],
              length;

          if (typeof value == "object" && value) {
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              _forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }

          return callback.call(source, property, value);
        };

        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());

          if (lex() != "$") {
            abort();
          }

          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (typeof exports == "object" && exports && !exports.nodeType && !isLoader) {
    runInContext(root, exports);
  } else {
    var nativeJSON = root.JSON;
    var JSON3 = runInContext(root, root["JSON3"] = {
      "noConflict": function noConflict() {
        root.JSON = nativeJSON;
        return JSON3;
      }
    });
    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
})(this);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,