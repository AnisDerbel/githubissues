{"version":3,"sources":["/Users/anisderbel/Documents/apcgithubissues/src/redux/repo/__tests__/repoSaga.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {expectSaga} from 'redux-saga-test-plan';\nimport {reducer as formReducer} from 'redux-form';\nimport {Action} from 'redux';\nimport * as matchers from 'redux-saga-test-plan/matchers';\nimport {combineReducers} from 'redux';\nimport {\n  createFailedResponse,\n  createSuccessfulResponse,\n} from '../../../__mocks__/response';\nimport repoReducer, {initialState} from '../reducer';\nimport axios from '../../axios';\nimport repoSaga from '../saga';\nimport formMock from '../../../__mocks__/form';\nimport {repoActions} from '../actions';\nimport {repoIssuesMock} from '../../../__mocks__/repo';\nimport {IApplicationState} from '../../appReducer';\nimport {throwError} from 'redux-saga-test-plan/providers';\n\nconst setupTest = (storeInitialState: IApplicationState) =>\n  expectSaga(repoSaga).withReducer<IApplicationState, Action<any>>(\n    combineReducers({\n      form: formReducer,\n      repo: repoReducer,\n    }),\n    storeInitialState,\n  );\n\ndescribe('repoSaga', () => {\n  const page = 1;\n  describe('get github issues', () => {\n    const storeInitialState: IApplicationState = {\n      form: formMock,\n      repo: initialState,\n    };\n    it('should fetch github issues from api successfully', async () => {\n      const response = createSuccessfulResponse(repoIssuesMock);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), response]])\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.getRepoIssuesSuccess({\n            issues: response.data,\n            page,\n            hasMoreIssues: true,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        issues: {\n          ...storeState.repo.issues,\n          [page]: response.data,\n        },\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: true,\n      });\n    });\n    it('should set current page if it is fetched before', async () => {\n      const {storeState} = await setupTest({\n        ...storeInitialState,\n        repo: {\n          ...storeInitialState.repo,\n          issues: {[page]: repoIssuesMock.data},\n        },\n      })\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.setCurrentPage({\n            page,\n            hasMoreIssues: false,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: false,\n      });\n    });\n    it('should throw an error when organization and/or repository not found ', async () => {\n      const response = createFailedResponse(404);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), throwError({response} as any)]])\n        .dispatch(repoActions.getRepoIssuesFailed())\n        .silentRun();\n\n      expect(storeState.repo).toEqual(storeInitialState.repo);\n    });\n    it('should throw an error when api fails with 500 ', async () => {\n      const response = createFailedResponse(500);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), throwError({response} as any)]])\n        .dispatch(repoActions.getRepoIssuesFailed())\n        .silentRun();\n\n      expect(storeState.repo).toEqual(storeInitialState.repo);\n    });\n  });\n});\n"]}