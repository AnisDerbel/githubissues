1aea43f436764c23988d89e49106978e
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;

if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
  try {
    badArrayLike = Object.defineProperty({}, 'length', {
      get: function get() {
        throw isCallableMarker;
      }
    });
    isCallableMarker = {};
    reflectApply(function () {
      throw 42;
    }, null, badArrayLike);
  } catch (_) {
    if (_ !== isCallableMarker) {
      reflectApply = null;
    }
  }
} else {
  reflectApply = null;
}

var constructorRegex = /^\s*class\b/;

var isES6ClassFn = function isES6ClassFunction(value) {
  try {
    var fnStr = fnToStr.call(value);
    return constructorRegex.test(fnStr);
  } catch (e) {
    return false;
  }
};

var tryFunctionObject = function tryFunctionToStr(value) {
  try {
    if (isES6ClassFn(value)) {
      return false;
    }

    fnToStr.call(value);
    return true;
  } catch (e) {
    return false;
  }
};

var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};
module.exports = reflectApply ? function isCallable(value) {
  if (value === documentDotAll) {
    return true;
  }

  if (!value) {
    return false;
  }

  if (typeof value !== 'function' && typeof value !== 'object') {
    return false;
  }

  if (typeof value === 'function' && !value.prototype) {
    return true;
  }

  try {
    reflectApply(value, null, badArrayLike);
  } catch (e) {
    if (e !== isCallableMarker) {
      return false;
    }
  }

  return !isES6ClassFn(value);
} : function isCallable(value) {
  if (value === documentDotAll) {
    return true;
  }

  if (!value) {
    return false;
  }

  if (typeof value !== 'function' && typeof value !== 'object') {
    return false;
  }

  if (typeof value === 'function' && !value.prototype) {
    return true;
  }

  if (hasToStringTag) {
    return tryFunctionObject(value);
  }

  if (isES6ClassFn(value)) {
    return false;
  }

  var strClass = toStr.call(value);
  return strClass === fnClass || strClass === genClass;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImZuVG9TdHIiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwicmVmbGVjdEFwcGx5IiwiUmVmbGVjdCIsImFwcGx5IiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiXyIsImNvbnN0cnVjdG9yUmVnZXgiLCJpc0VTNkNsYXNzRm4iLCJpc0VTNkNsYXNzRnVuY3Rpb24iLCJ2YWx1ZSIsImZuU3RyIiwiY2FsbCIsInRlc3QiLCJlIiwidHJ5RnVuY3Rpb25PYmplY3QiLCJ0cnlGdW5jdGlvblRvU3RyIiwidG9TdHIiLCJmbkNsYXNzIiwiZ2VuQ2xhc3MiLCJoYXNUb1N0cmluZ1RhZyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiZG9jdW1lbnREb3RBbGwiLCJkb2N1bWVudCIsImFsbCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc0NhbGxhYmxlIiwic3RyQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxTQUFULENBQW1CQyxRQUFqQztBQUNBLElBQUlDLFlBQVksR0FBRyxPQUFPQyxPQUFQLEtBQW1CLFFBQW5CLElBQStCQSxPQUFPLEtBQUssSUFBM0MsSUFBbURBLE9BQU8sQ0FBQ0MsS0FBOUU7QUFDQSxJQUFJQyxZQUFKO0FBQ0EsSUFBSUMsZ0JBQUo7O0FBQ0EsSUFBSSxPQUFPSixZQUFQLEtBQXdCLFVBQXhCLElBQXNDLE9BQU9LLE1BQU0sQ0FBQ0MsY0FBZCxLQUFpQyxVQUEzRSxFQUF1RjtBQUN0RixNQUFJO0FBQ0hILElBQUFBLFlBQVksR0FBR0UsTUFBTSxDQUFDQyxjQUFQLENBQXNCLEVBQXRCLEVBQTBCLFFBQTFCLEVBQW9DO0FBQ2xEQyxNQUFBQSxHQUFHLEVBQUUsZUFBWTtBQUNoQixjQUFNSCxnQkFBTjtBQUNBO0FBSGlELEtBQXBDLENBQWY7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LFdBQU8sS0FBUDtBQUFlOztBQUM3QixNQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBakIsSUFBK0IsT0FBT0EsS0FBUCxLQUFpQixRQUFwRCxFQUE4RDtBQUFFLFdBQU8sS0FBUDtBQUFlOztBQUMvRSxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBakIsSUFBK0IsQ0FBQ0EsS0FBSyxDQUFDZCxTQUExQyxFQUFxRDtBQUFFLFdBQU8sSUFBUDtBQUFjOztBQUNyRSxNQUFJd0IsY0FBSixFQUFvQjtBQUFFLFdBQU9MLGlCQUFpQixDQUFDTCxLQUFELENBQXhCO0FBQWtDOztBQUN4RCxNQUFJRixZQUFZLENBQUNFLEtBQUQsQ0FBaEIsRUFBeUI7QUFBRSxXQUFPLEtBQVA7QUFBZTs7QUFDMUMsTUFBSW9CLFFBQVEsR0FBR2IsS0FBSyxDQUFDTCxJQUFOLENBQVdGLEtBQVgsQ0FBZjtBQUNBLFNBQU9vQixRQUFRLEtBQUtaLE9BQWIsSUFBd0JZLFFBQVEsS0FBS1gsUUFBNUM7QUFDQSxDQXRCRiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVmbGVjdEFwcGx5ID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QgIT09IG51bGwgJiYgUmVmbGVjdC5hcHBseTtcbnZhciBiYWRBcnJheUxpa2U7XG52YXIgaXNDYWxsYWJsZU1hcmtlcjtcbmlmICh0eXBlb2YgcmVmbGVjdEFwcGx5ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcblx0dHJ5IHtcblx0XHRiYWRBcnJheUxpa2UgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdsZW5ndGgnLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgaXNDYWxsYWJsZU1hcmtlcjtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpc0NhbGxhYmxlTWFya2VyID0ge307XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcblx0XHRyZWZsZWN0QXBwbHkoZnVuY3Rpb24gKCkgeyB0aHJvdyA0MjsgfSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0fSBjYXRjaCAoXykge1xuXHRcdGlmIChfICE9PSBpc0NhbGxhYmxlTWFya2VyKSB7XG5cdFx0XHRyZWZsZWN0QXBwbHkgPSBudWxsO1xuXHRcdH1cblx0fVxufSBlbHNlIHtcblx0cmVmbGVjdEFwcGx5ID0gbnVsbDtcbn1cblxudmFyIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxccypjbGFzc1xcYi87XG52YXIgaXNFUzZDbGFzc0ZuID0gZnVuY3Rpb24gaXNFUzZDbGFzc0Z1bmN0aW9uKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGZuU3RyID0gZm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KGZuU3RyKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTsgLy8gbm90IGEgZnVuY3Rpb25cblx0fVxufTtcblxudmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZuQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xudmFyIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG4vKiBnbG9iYWxzIGRvY3VtZW50OiBmYWxzZSAqL1xudmFyIGRvY3VtZW50RG90QWxsID0gdHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZG9jdW1lbnQuYWxsID09PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5hbGwgIT09IHVuZGVmaW5lZCA/IGRvY3VtZW50LmFsbCA6IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmxlY3RBcHBseVxuXHQ/IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAodmFsdWUgPT09IGRvY3VtZW50RG90QWxsKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJlZmxlY3RBcHBseSh2YWx1ZSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoZSAhPT0gaXNDYWxsYWJsZU1hcmtlcikgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR9XG5cdFx0cmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpO1xuXHR9XG5cdDogZnVuY3Rpb24gaXNDYWxsYWJsZSh2YWx1ZSkge1xuXHRcdGlmICh2YWx1ZSA9PT0gZG9jdW1lbnREb3RBbGwpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICF2YWx1ZS5wcm90b3R5cGUpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfVxuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHZhciBzdHJDbGFzcyA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBzdHJDbGFzcyA9PT0gZm5DbGFzcyB8fCBzdHJDbGFzcyA9PT0gZ2VuQ2xhc3M7XG5cdH07XG4iXX0=