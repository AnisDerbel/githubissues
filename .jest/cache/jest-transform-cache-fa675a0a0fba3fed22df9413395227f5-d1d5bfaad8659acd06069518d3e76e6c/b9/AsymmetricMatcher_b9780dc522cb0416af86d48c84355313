b453620657139073347dec8bbfea5dea
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true });

exports.default = exports.test = exports.serialize = void 0;



var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
var asymmetricMatcher =
typeof Symbol === 'function' && Symbol.for ?
Symbol.for('jest.asymmetricMatcher') :
0x1357a5;
var SPACE = ' ';

var serialize = function serialize(val, config, indentation, depth, refs, printer) {
  var stringedValue = val.toString();

  if (
  stringedValue === 'ArrayContaining' ||
  stringedValue === 'ArrayNotContaining')
  {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return (
      stringedValue +
      SPACE +
      '[' +
      (0, require('../collections').printListItems)(
      val.sample,
      config,
      indentation,
      depth,
      refs,
      printer) +

      ']');

  }

  if (
  stringedValue === 'ObjectContaining' ||
  stringedValue === 'ObjectNotContaining')
  {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }

    return (
      stringedValue +
      SPACE +
      '{' +
      (0, require('../collections').printObjectProperties)(
      val.sample,
      config,
      indentation,
      depth,
      refs,
      printer) +

      '}');

  }

  if (
  stringedValue === 'StringMatching' ||
  stringedValue === 'StringNotMatching')
  {
    return (
      stringedValue +
      SPACE +
      printer(val.sample, config, indentation, depth, refs));

  }

  if (
  stringedValue === 'StringContaining' ||
  stringedValue === 'StringNotContaining')
  {
    return (
      stringedValue +
      SPACE +
      printer(val.sample, config, indentation, depth, refs));

  }

  return val.toAsymmetricMatcher();
};

exports.serialize = serialize;

var test = function test(val) {return val && val.$$typeof === asymmetricMatcher;};

exports.test = test;
var plugin = {
  serialize: serialize,
  test: test };

var _default = plugin;
exports.default = _default;