{"version":3,"sources":["/Users/anisderbel/Documents/apcgithubissues/src/components/__tests__/inputform.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\nimport React from 'react';\nimport { Button, Provider as PaperProvider } from 'react-native-paper';\nimport { mount, ReactWrapper, configure } from 'enzyme';\nimport Adapter from '@wojtekmaj/enzyme-adapter-react-17';\nconfigure({ adapter: new Adapter() });\nimport { Provider } from 'react-redux';\nimport configureMockStore, { MockStoreEnhanced } from 'redux-mock-store';\nimport formMock from '../../__mocks__/form';\nimport { repoIssuesMock } from '../../__mocks__/repo';\nimport { initialState } from '../../redux/repo/reducer';\nimport theme from '../../theme';\nimport { Store } from 'redux';\nimport InputForm from '../InputForm';\nconst mockStore = configureMockStore();\nlet mockedStore: MockStoreEnhanced;\ntype ComponentWrapper = ReactWrapper<void, void, React.Component>;\nlet component: ComponentWrapper;\n\nconst onSuccess = jest.fn();\ndescribe('InputForm', () => {\n  const renderComponent = (store: Store): ComponentWrapper =>\n    mount(\n      <Provider store={store}>\n        <PaperProvider theme={theme}>\n          <InputForm onSuccess={onSuccess} />\n        </PaperProvider>\n      </Provider>,\n    );\n\n  describe('when fetch issues is failed', async () => {\n    const repoState = {\n      ...initialState,\n      page: 1,\n      error: true,\n      isLoading: false,\n    };\n    beforeEach(() => {\n      mockedStore = mockStore({ repo: repoState, form: formMock }) as MockStoreEnhanced;\n      renderComponent(mockedStore);\n    });\n\n    it('should not call on Success', () => {\n      expect(onSuccess).toHaveBeenCalledTimes(0);\n    });\n  });\n  describe('when fetch issues is success', async () => {\n    const repoState = {\n      ...initialState,\n      page: 1,\n      error: false,\n      isLoading: false,\n      issues: { 1: repoIssuesMock.data },\n    };\n    beforeEach(() => {\n      mockedStore = mockStore({ repo: repoState, form: formMock }) as MockStoreEnhanced;\n      renderComponent(mockedStore);\n    });\n\n    it('should call on Success', () => {\n      expect(onSuccess).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('when fetching issues', async () => {\n    const repoState = {\n      ...initialState,\n      page: 1,\n      isLoading: true,\n    };\n    beforeEach(() => {\n      mockedStore = mockStore({ repo: repoState, form: formMock }) as MockStoreEnhanced;\n      component = renderComponent(mockedStore);\n    });\n\n    it('should disable the button + show loading ', () => {\n      expect(component.find(Button).props()).toMatchObject({\n        children: expect.anything(),\n        onPress: expect.any(Function),\n        disabled: true,\n        loading: true,\n      });\n    });\n  });\n});\n"]}