{"version":3,"sources":["/Users/anisderbel/Documents/apcgithubissues/src/redux/repo/saga.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;wCAKU,a;yCAqCA,Q;;AAvCV,IAAM,SAAS,GAAG,EAAlB;;AAEA,SAAU,aAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyB,UAAA,OAAzB,QAAyB,OAAzB;AAAA;AAEW,UAAA,IAFX,GAEmB,OAFnB,CAEW,IAFX;AAAA;AAKQ,iBAAM,qBAAO,UAAC,KAAD;AAAA,mBAA8B,KAAK,CAAC,IAApC;AAAA,WAAP,CAAN;;AALR;AAAA;AAIa,UAAA,MAJb,iBAIM,IAJN,CAIa,MAJb;AAAA;AAMoC,iBAAM,qBACpC,UAAC,KAAD;AAAA,mBAA8B,KAAK,CAAC,IAApC;AAAA,WADoC,CAAN;;AANpC;AAAA;AAMW,UAAA,MANX,kBAMW,MANX;AAMmB,UAAA,aANnB,kBAMmB,aANnB;;AAAA,cAUS,CAAC,MAAM,CAAC,IAAD,CAVhB;AAAA;AAAA;AAAA;;AAAA;AAWM,iBAAM,kBACJ,qBAAY,oBAAZ,CAAiC;AAC/B,YAAA,MAAM,EAAE,MAAM,CAAC,IAAD,CADiB;AAE/B,YAAA,IAAI,EAAJ,IAF+B;AAG/B,YAAA,aAAa,EAAE,aAAa,IAAI,MAAM,CAAC,IAAI,GAAG,CAAR,CAAvB,GAAoC,IAApC,GAA2C;AAH3B,WAAjC,CADI,CAAN;;AAXN;AAAA;;AAAA;AAAA;AAoBsC,iBAAM,mBACtC,eAAM,GADgC,cAE5B,MAAM,CAAC,YAFqB,SAEL,MAAM,CAAC,UAFF,2DAEkE,IAFlE,kBAEmF,SAFnF,CAAN;;AApBtC;AAoBU,UAAA,UApBV;AAwBU,UAAA,MAxBV,GAwBmB,UAAU,CAAC,IAAX,CAAgB,MAxBnC;AAAA;AAyBI,iBAAM,kBACJ,qBAAY,oBAAZ,CAAiC;AAC/B,YAAA,MAAM,EAAE,UAAU,CAAC,IADY;AAE/B,YAAA,IAAI,EAAJ,IAF+B;AAG/B,YAAA,aAAa,EAAE,MAAM,KAAK,CAAX,IAAgB,MAAM,GAAG,SAAzB,GAAqC,KAArC,GAA6C;AAH7B,WAAjC,CADI,CAAN;;AAzBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiCI,iBAAM,kBAAI,qBAAY,mBAAZ,EAAJ,CAAN;;AAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCA,SAAU,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAM,yBAAW,0BAAiB,eAA5B,EAA6C,aAA7C,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;eAIe,Q","sourcesContent":["import {call, put, takeLatest, select} from 'redux-saga/effects';\nimport {AxiosResponse} from 'axios';\nimport {ERepoActionTypes, repoActions, TRepoIssuesAction} from './actions';\nimport axios from '../axios';\nimport {IApplicationState} from '../appReducer';\n\nconst PAGE_SIZE = 30;\n\nfunction* getRepoIssues({payload}: TRepoIssuesAction) {\n  try {\n    const {page} = payload;\n    const {\n      form: {values},\n    } = yield select((state: IApplicationState) => state.form);\n    const {issues, hasMoreIssues} = yield select(\n      (state: IApplicationState) => state.repo,\n    );\n\n    if (!!issues[page]) {\n      yield put(\n        repoActions.getRepoIssuesSuccess({\n          issues: issues[page],\n          page,\n          hasMoreIssues: hasMoreIssues || issues[page + 1] ? true : false,\n        }),\n      );\n      return;\n    }\n    const repoIssues: AxiosResponse = yield call(\n      axios.get,\n      `/repos/${values.organization}/${values.repository}/issues?direction=desc&sort=created&state=all&page=${page}&per_page=${PAGE_SIZE}`,\n    );\n    const length = repoIssues.data.length;\n    yield put(\n      repoActions.getRepoIssuesSuccess({\n        issues: repoIssues.data,\n        page,\n        hasMoreIssues: length === 0 || length < PAGE_SIZE ? false : true,\n      }),\n    );\n  } catch (e) {\n    yield put(repoActions.getRepoIssuesFailed());\n  }\n}\n\nfunction* repoSaga() {\n  yield takeLatest(ERepoActionTypes.GET_REPO_ISSUES, getRepoIssues);\n}\n\nexport default repoSaga;\n"]}