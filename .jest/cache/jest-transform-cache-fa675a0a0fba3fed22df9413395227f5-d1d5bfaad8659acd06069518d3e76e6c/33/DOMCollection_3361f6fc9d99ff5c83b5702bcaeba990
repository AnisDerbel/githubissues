c04f2dda9e87b6c34bebdfe994142f54
'use strict';function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, '__esModule', {
  value: true });

exports.default = exports.serialize = exports.test = void 0;











var SPACE = ' ';
var OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;

var testName = function testName(name) {return (
    OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name));};

var test = function test(val) {return (
    val &&
    val.constructor &&
    !!val.constructor.name &&
    testName(val.constructor.name));};

exports.test = test;

var isNamedNodeMap = function isNamedNodeMap(collection) {return (
    collection.constructor.name === 'NamedNodeMap');};

var serialize = function serialize(collection, config, indentation, depth, refs, printer) {
  var name = collection.constructor.name;

  if (++depth > config.maxDepth) {
    return '[' + name + ']';
  }

  return (
    (config.min ? '' : name + SPACE) + (
    OBJECT_NAMES.indexOf(name) !== -1 ?
    '{' +
    (0, require('../collections').printObjectProperties)(
    isNamedNodeMap(collection) ?
    Array.from(collection).reduce(function (props, attribute) {
      props[attribute.name] = attribute.value;
      return props;
    }, {}) : _objectSpread({},
    collection),
    config,
    indentation,
    depth,
    refs,
    printer) +

    '}' :
    '[' +
    (0, require('../collections').printListItems)(
    Array.from(collection),
    config,
    indentation,
    depth,
    refs,
    printer) +

    ']'));

};

exports.serialize = serialize;
var plugin = {
  serialize: serialize,
  test: test };

var _default = plugin;
exports.default = _default;