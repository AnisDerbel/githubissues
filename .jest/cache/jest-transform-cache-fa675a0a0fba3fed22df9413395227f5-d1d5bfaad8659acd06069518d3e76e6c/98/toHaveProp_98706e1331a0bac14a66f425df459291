d581df1857e33a03e6eae6f75080ceb9
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _name = _interopRequireDefault(require("../utils/name"));

var _reduceAssertionObject = _interopRequireDefault(require("../utils/reduceAssertionObject"));

var _stringify = _interopRequireDefault(require("../utils/stringify"));

var _single = _interopRequireDefault(require("../utils/single"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function toHaveProp(enzymeWrapper, propKey, propValue) {
  var props = enzymeWrapper.props();
  var wrapperName = (0, _name.default)(enzymeWrapper);

  if (propValue === undefined && arguments.length === 2 && typeof propKey !== 'object' && Array.isArray(propKey) === false) {
    return {
      pass: props.hasOwnProperty(propKey),
      message: "Expected <" + wrapperName + "> to have received the prop \"" + propKey + "\", but it did not.",
      negatedMessage: "Expected <" + wrapperName + "> to not have received the prop \"" + propKey + "\", but it did.",
      contextualInformation: {
        actual: "Actual props: " + (0, _stringify.default)((0, _defineProperty2.default)({}, propKey, props[propKey]))
      }
    };
  }

  var results = _reduceAssertionObject.default.call(this, props, propKey, propValue);

  var unmatchedKeys = results.unmatchedKeys.join(', ');
  var contextualInformation = {
    actual: "Actual props: " + (0, _stringify.default)(results.actual),
    expected: "Expected props: " + (0, _stringify.default)(results.expected)
  };

  if (results.missingKeys.length) {
    var missingKeys = results.missingKeys.join(', ');

    var _prop_2 = results.missingKeys.length === 1 ? 'prop' : 'props';

    return {
      pass: false,
      message: "Expected <" + wrapperName + "}> to have " + _prop_2 + " \"" + missingKeys + "\", but it did not.",
      negatedMessage: "Expected <" + wrapperName + "> to not have " + _prop_2 + " \"" + missingKeys + "\", but it did.",
      contextualInformation: contextualInformation
    };
  }

  var _prop_ = results.unmatchedKeys.length === 1 ? 'prop' : 'props';

  return {
    pass: results.pass,
    message: "Expected <" + wrapperName + "> to match for " + _prop_ + " \"" + unmatchedKeys + "\", but it did not.",
    negatedMessage: "Expected <" + wrapperName + "> to not match for " + _prop_ + " \"" + unmatchedKeys + "\", but it did.",
    contextualInformation: contextualInformation
  };
}

var _default = (0, _single.default)(toHaveProp);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvSGF2ZVByb3AuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX25hbWUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWR1Y2VBc3NlcnRpb25PYmplY3QiLCJfc3RyaW5naWZ5IiwiX3NpbmdsZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJ0b0hhdmVQcm9wIiwiZW56eW1lV3JhcHBlciIsInByb3BLZXkiLCJwcm9wVmFsdWUiLCJwcm9wcyIsIndyYXBwZXJOYW1lIiwidW5kZWZpbmVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJpc0FycmF5IiwicGFzcyIsImhhc093blByb3BlcnR5IiwibWVzc2FnZSIsIm5lZ2F0ZWRNZXNzYWdlIiwiY29udGV4dHVhbEluZm9ybWF0aW9uIiwiYWN0dWFsIiwicmVzdWx0cyIsImNhbGwiLCJ1bm1hdGNoZWRLZXlzIiwiam9pbiIsImV4cGVjdGVkIiwibWlzc2luZ0tleXMiLCJfcHJvcF8iLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGVBQUQsQ0FBUixDQUFsQzs7QUFFQSxJQUFJQyxzQkFBc0IsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBRCxDQUFSLENBQW5EOztBQUVBLElBQUlFLFVBQVUsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxvQkFBRCxDQUFSLENBQXZDOztBQUVBLElBQUlHLE9BQU8sR0FBR0osc0JBQXNCLENBQUNDLE9BQU8sQ0FB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Z0RrQixNQUFoRCxXQUEyREosYUFBM0Qsb0JBSFQ7QUFJTEosSUFBQUEscUJBQXFCLEVBQXJCQTtBQUpLLEdBQVA7QUFNRDs7QUFFRCxJQUFJUyxRQUFRLEdBQUcsQ0FBQyxHQUFHM0IsT0FBTyxDQUFDTixPQUFaLEVBQXFCUyxVQUFyQixDQUFmOztBQUVBWCxPQUFPLENBQUNFLE9BQVIsR0FBa0JpQyxRQUFsQjtBQUNBQyxNQUFNLENBQUNwQyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25hbWVcIikpO1xuXG52YXIgX3JlZHVjZUFzc2VydGlvbk9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3JlZHVjZUFzc2VydGlvbk9iamVjdFwiKSk7XG5cbnZhciBfc3RyaW5naWZ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvc3RyaW5naWZ5XCIpKTtcblxudmFyIF9zaW5nbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9zaW5nbGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiAqXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHRvSGF2ZVByb3BBc3NlcnRpb25cbiAqIFxuICovXG5mdW5jdGlvbiB0b0hhdmVQcm9wKGVuenltZVdyYXBwZXIsIHByb3BLZXksIHByb3BWYWx1ZSkge1xuICBjb25zdCBwcm9wcyA9IGVuenltZVdyYXBwZXIucHJvcHMoKTtcbiAgY29uc3Qgd3JhcHBlck5hbWUgPSAoMCwgX25hbWUuZGVmYXVsdCkoZW56eW1lV3JhcHBlcik7IC8vIFRoZSBBUEkgYWxsb3dzIHRvIGNoZWNrIGlmIGEgY29tcG9uZW50IGhhcyBhIHByb3AgaW4gZ2VuZXJhbCBieSBkcm9wcGluZyB0aGUgdGhpcmRcbiAgLy8gYXJndW1lbnQuXG5cbiAgaWYgKHByb3BWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BLZXkgIT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkocHJvcEtleSkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IHByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpLFxuICAgICAgbWVzc2FnZTogYEV4cGVjdGVkIDwke3dyYXBwZXJOYW1lfT4gdG8gaGF2ZSByZWNlaXZlZCB0aGUgcHJvcCBcIiR7cHJvcEtleX1cIiwgYnV0IGl0IGRpZCBub3QuYCxcbiAgICAgIG5lZ2F0ZWRNZXNzYWdlOiBgRXhwZWN0ZWQgPCR7d3JhcHBlck5hbWV9PiB0byBub3QgaGF2ZSByZWNlaXZlZCB0aGUgcHJvcCBcIiR7cHJvcEtleX1cIiwgYnV0IGl0IGRpZC5gLFxuICAgICAgY29udGV4dHVhbEluZm9ybWF0aW9uOiB7XG4gICAgICAgIGFjdHVhbDogYEFjdHVhbCBwcm9wczogJHsoMCwgX3N0cmluZ2lmeS5kZWZhdWx0KSh7XG4gICAgICAgICAgW3Byb3BLZXldOiBwcm9wc1twcm9wS2V5XVxuICAgICAgICB9KX1gXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdHMgPSBfcmVkdWNlQXNzZXJ0aW9uT2JqZWN0LmRlZmF1bHQuY2FsbCh0aGlzLCBwcm9wcywgcHJvcEtleSwgcHJvcFZhbHVlKTtcblxuICBjb25zdCB1bm1hdGNoZWRLZXlzID0gcmVzdWx0cy51bm1hdGNoZWRLZXlzLmpvaW4oJywgJyk7XG4gIGNvbnN0IGNvbnRleHR1YWxJbmZvcm1hdGlvbiA9IHtcbiAgICBhY3R1YWw6IGBBY3R1YWwgcHJvcHM6ICR7KDAsIF9zdHJpbmdpZnkuZGVmYXVsdCkocmVzdWx0cy5hY3R1YWwpfWAsXG4gICAgZXhwZWN0ZWQ6IGBFeHBlY3RlZCBwcm9wczogJHsoMCwgX3N0cmluZ2lmeS5kZWZhdWx0KShyZXN1bHRzLmV4cGVjdGVkKX1gXG4gIH07IC8vIGVycm9yIGlmIHNvbWUgcHJvcCBkb2Vzbid0IGV4aXN0XG5cbiAgaWYgKHJlc3VsdHMubWlzc2luZ0tleXMubGVuZ3RoKSB7XG4gICAgY29uc3QgbWlzc2luZ0tleXMgPSByZXN1bHRzLm1pc3NpbmdLZXlzLmpvaW4oJywgJyk7XG5cbiAgICBjb25zdCBfcHJvcF8gPSByZXN1bHRzLm1pc3NpbmdLZXlzLmxlbmd0aCA9PT0gMSA/ICdwcm9wJyA6ICdwcm9wcyc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgPCR7d3JhcHBlck5hbWV9fT4gdG8gaGF2ZSAke19wcm9wX30gXCIke21pc3NpbmdLZXlzfVwiLCBidXQgaXQgZGlkIG5vdC5gLFxuICAgICAgbmVnYXRlZE1lc3NhZ2U6IGBFeHBlY3RlZCA8JHt3cmFwcGVyTmFtZX0+IHRvIG5vdCBoYXZlICR7X3Byb3BffSBcIiR7bWlzc2luZ0tleXN9XCIsIGJ1dCBpdCBkaWQuYCxcbiAgICAgIGNvbnRleHR1YWxJbmZvcm1hdGlvblxuICAgIH07XG4gIH1cblxuICBjb25zdCBfcHJvcF8gPSByZXN1bHRzLnVubWF0Y2hlZEtleXMubGVuZ3RoID09PSAxID8gJ3Byb3AnIDogJ3Byb3BzJztcblxuICByZXR1cm4ge1xuICAgIHBhc3M6IHJlc3VsdHMucGFzcyxcbiAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgPCR7d3JhcHBlck5hbWV9PiB0byBtYXRjaCBmb3IgJHtfcHJvcF99IFwiJHt1bm1hdGNoZWRLZXlzfVwiLCBidXQgaXQgZGlkIG5vdC5gLFxuICAgIG5lZ2F0ZWRNZXNzYWdlOiBgRXhwZWN0ZWQgPCR7d3JhcHBlck5hbWV9PiB0byBub3QgbWF0Y2ggZm9yICR7X3Byb3BffSBcIiR7dW5tYXRjaGVkS2V5c31cIiwgYnV0IGl0IGRpZC5gLFxuICAgIGNvbnRleHR1YWxJbmZvcm1hdGlvblxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3NpbmdsZS5kZWZhdWx0KSh0b0hhdmVQcm9wKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=