5f62972c2b35ab16fe4da9f2ec04a2bc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _name = _interopRequireDefault(require("../utils/name"));

var _single = _interopRequireDefault(require("../utils/single"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function toIncludeText(enzymeWrapper, text) {
  var actualText = enzymeWrapper.text();

  if (text === undefined) {
    var message = "Expected \".toIncludeText(null)\" to be given some text.\n      If you are trying to assert this component has _some_ text, use the \".toHaveText()\" matcher";
    return {
      pass: false,
      message: message,
      negatedMessage: message,
      contextualInformation: {}
    };
  }

  var pass = actualText.includes(text);
  var wrapperName = "<" + (0, _name.default)(enzymeWrapper) + ">";
  return {
    pass: pass,
    message: "Expected " + wrapperName + " to contain \"" + text + "\" but it did not.",
    negatedMessage: "Expected " + wrapperName + " not to contain \"" + text + "\" but it did.",
    contextualInformation: {
      expected: "Expected HTML: \"" + text + "\"",
      actual: "Actual HTML: \"" + actualText + "\""
    }
  };
}

var _default = (0, _single.default)(toIncludeText);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvSW5jbHVkZVRleHQuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX25hbWUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zaW5nbGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwidG9JbmNsdWRlVGV4dCIsImVuenltZVdyYXBwZXIiLCJ0ZXh0IiwiYWN0dWFsVGV4dCIsInVuZGVmaW5lZCIsIm1lc3NhZ2UiLCJwYXNzIiwibmVnYXRlZE1lc3NhZ2UiLCJjb250ZXh0dWFsSW5mb3JtYXRpb24iLCJpbmNsdWRlcyIsIndyYXBwZXJOYW1lIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2Qjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZUFBRCxDQUFSLENBQWxDOztBQUVBLElBQUlDLE9BQU8sR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxpQkFBRCxDQUFSLENBQXBDOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFTCxJQUFBQSxPQUFPLEVBQUVLO0FBQVgsR0FBckM7QUFBd0Q7O0FBUy9GLFNBQVNFLGFBQVQsQ0FBdUJDLGFBQXZCLEVBQXNDQyxJQUF0QyxFQUE0QztBQUMxQyxNQUFNQyxVQUFVLEdBQUdGLGFBQWEsQ0FBQ0MsSUFBZCxFQUFuQjs7QUFFQSxNQUFJQSxJQUFJLEtBQUtFLFNBQWIsRUFBd0I7QUFDdEIsUUFBTUMsT0FBTyxrS0FBYjtBQUVBLFdBQU87QUFDTEMsTUFBQUEsSUFBSSxFQUFFLEtBREQ7QUFFTEQsTUFBQUEsT0FBTyxFQUFQQSxPQUZLO0FBR0xFLE1BQUFBLGNBQWMsRUFBRUYsT0FIWDtBQUlMRyxNQUFBQSxxQkFBcUIsRUFBRTtBQUpsQixLQUFQO0FBTUQ7O0FBRUQsTUFBTUYsSUFBSSxHQUFHSCxVQUFVLENBQUNNLFFBQVgsQ0FBb0JQLElBQXBCLENBQWI7QUFDQSxNQUFNUSxXQUFXLFNBQU8sQ0FBQyxHQUFHaEIsS0FBSyxDQUFDRCxPQUFWLEVBQW1CUSxhQUFuQixDQUFQLE1BQWpCO0FBQ0EsU0FBTztBQUNMSyxJQUFBQSxJQUFJLEVBQUpBLElBREs7QUFFTEQsSUFBQUEsT0FBTyxnQkFBY0ssV0FBZCxzQkFBeUNSLElBQXpDLHVCQUZGO0FBR0xLLElBQUFBLGNBQWMsZ0JBQWNHLFdBQWQsMEJBQTZDUixJQUE3QyxtQkFIVDtBQUlMTSxJQUFBQSxxQkFBcUIsRUFBRTtBQUNyQkcsTUFBQUEsUUFBUSx3QkFBcUJULElBQXJCLE9BRGE7QUFFckJVLE1BQUFBLE1BQU0sc0JBQW1CVCxVQUFuQjtBQUZlO0FBSmxCLEdBQVA7QUFTRDs7QUFFRCxJQUFJVSxRQUFRLEdBQUcsQ0FBQyxHQUFHaEIsT0FBTyxDQUFDSixPQUFaLEVBQXFCTyxhQUFyQixDQUFmOztBQUVBVCxPQUFPLENBQUNFLE9BQVIsR0FBa0JvQixRQUFsQjtBQUNBQyxNQUFNLENBQUN2QixPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25hbWVcIikpO1xuXG52YXIgX3NpbmdsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3NpbmdsZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlULXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuICpcbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9JbmNsdWRlVGV4dEFzc2VydGlvblxuICogXG4gKi9cbmZ1bmN0aW9uIHRvSW5jbHVkZVRleHQoZW56eW1lV3JhcHBlciwgdGV4dCkge1xuICBjb25zdCBhY3R1YWxUZXh0ID0gZW56eW1lV3JhcHBlci50ZXh0KCk7XG5cbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgRXhwZWN0ZWQgXCIudG9JbmNsdWRlVGV4dChudWxsKVwiIHRvIGJlIGdpdmVuIHNvbWUgdGV4dC5cbiAgICAgIElmIHlvdSBhcmUgdHJ5aW5nIHRvIGFzc2VydCB0aGlzIGNvbXBvbmVudCBoYXMgX3NvbWVfIHRleHQsIHVzZSB0aGUgXCIudG9IYXZlVGV4dCgpXCIgbWF0Y2hlcmA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIG5lZ2F0ZWRNZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgY29udGV4dHVhbEluZm9ybWF0aW9uOiB7fVxuICAgIH07XG4gIH1cblxuICBjb25zdCBwYXNzID0gYWN0dWFsVGV4dC5pbmNsdWRlcyh0ZXh0KTtcbiAgY29uc3Qgd3JhcHBlck5hbWUgPSBgPCR7KDAsIF9uYW1lLmRlZmF1bHQpKGVuenltZVdyYXBwZXIpfT5gO1xuICByZXR1cm4ge1xuICAgIHBhc3MsXG4gICAgbWVzc2FnZTogYEV4cGVjdGVkICR7d3JhcHBlck5hbWV9IHRvIGNvbnRhaW4gXCIke3RleHR9XCIgYnV0IGl0IGRpZCBub3QuYCxcbiAgICBuZWdhdGVkTWVzc2FnZTogYEV4cGVjdGVkICR7d3JhcHBlck5hbWV9IG5vdCB0byBjb250YWluIFwiJHt0ZXh0fVwiIGJ1dCBpdCBkaWQuYCxcbiAgICBjb250ZXh0dWFsSW5mb3JtYXRpb246IHtcbiAgICAgIGV4cGVjdGVkOiBgRXhwZWN0ZWQgSFRNTDogXCIke3RleHR9XCJgLFxuICAgICAgYWN0dWFsOiBgQWN0dWFsIEhUTUw6IFwiJHthY3R1YWxUZXh0fVwiYFxuICAgIH1cbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gKDAsIF9zaW5nbGUuZGVmYXVsdCkodG9JbmNsdWRlVGV4dCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19