{"version":3,"sources":["toIncludeText.js"],"names":["Object","defineProperty","exports","value","default","_name","_interopRequireDefault","require","_single","obj","__esModule","toIncludeText","enzymeWrapper","text","actualText","undefined","message","pass","negatedMessage","contextualInformation","includes","wrapperName","expected","actual","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAlC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAS/F,SAASE,aAAT,CAAuBC,aAAvB,EAAsCC,IAAtC,EAA4C;AAC1C,MAAMC,UAAU,GAAGF,aAAa,CAACC,IAAd,EAAnB;;AAEA,MAAIA,IAAI,KAAKE,SAAb,EAAwB;AACtB,QAAMC,OAAO,kKAAb;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAE,KADD;AAELD,MAAAA,OAAO,EAAPA,OAFK;AAGLE,MAAAA,cAAc,EAAEF,OAHX;AAILG,MAAAA,qBAAqB,EAAE;AAJlB,KAAP;AAMD;;AAED,MAAMF,IAAI,GAAGH,UAAU,CAACM,QAAX,CAAoBP,IAApB,CAAb;AACA,MAAMQ,WAAW,SAAO,CAAC,GAAGhB,KAAK,CAACD,OAAV,EAAmBQ,aAAnB,CAAP,MAAjB;AACA,SAAO;AACLK,IAAAA,IAAI,EAAJA,IADK;AAELD,IAAAA,OAAO,gBAAcK,WAAd,sBAAyCR,IAAzC,uBAFF;AAGLK,IAAAA,cAAc,gBAAcG,WAAd,0BAA6CR,IAA7C,mBAHT;AAILM,IAAAA,qBAAqB,EAAE;AACrBG,MAAAA,QAAQ,wBAAqBT,IAArB,OADa;AAErBU,MAAAA,MAAM,sBAAmBT,UAAnB;AAFe;AAJlB,GAAP;AASD;;AAED,IAAIU,QAAQ,GAAG,CAAC,GAAGhB,OAAO,CAACJ,OAAZ,EAAqBO,aAArB,CAAf;;AAEAT,OAAO,CAACE,OAAR,GAAkBoB,QAAlB;AACAC,MAAM,CAACvB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _name = _interopRequireDefault(require(\"../utils/name\"));\n\nvar _single = _interopRequireDefault(require(\"../utils/single\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This source code is licensed under the MIT-style license found in the\n * LICENSE file in the root directory of this source tree. *\n *\n * @providesModule toIncludeTextAssertion\n * \n */\nfunction toIncludeText(enzymeWrapper, text) {\n  const actualText = enzymeWrapper.text();\n\n  if (text === undefined) {\n    const message = `Expected \".toIncludeText(null)\" to be given some text.\n      If you are trying to assert this component has _some_ text, use the \".toHaveText()\" matcher`;\n    return {\n      pass: false,\n      message,\n      negatedMessage: message,\n      contextualInformation: {}\n    };\n  }\n\n  const pass = actualText.includes(text);\n  const wrapperName = `<${(0, _name.default)(enzymeWrapper)}>`;\n  return {\n    pass,\n    message: `Expected ${wrapperName} to contain \"${text}\" but it did not.`,\n    negatedMessage: `Expected ${wrapperName} not to contain \"${text}\" but it did.`,\n    contextualInformation: {\n      expected: `Expected HTML: \"${text}\"`,\n      actual: `Actual HTML: \"${actualText}\"`\n    }\n  };\n}\n\nvar _default = (0, _single.default)(toIncludeText);\n\nexports.default = _default;\nmodule.exports = exports.default;"]}