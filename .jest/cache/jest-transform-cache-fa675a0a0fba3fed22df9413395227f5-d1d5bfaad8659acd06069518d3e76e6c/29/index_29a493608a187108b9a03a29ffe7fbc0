4ba4ea5c38f091616dd4e5d9053e591c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _INSERTION_MODE_RESET, _TEMPLATE_INSERTION_M, _INITIAL_MODE, _BEFORE_HTML_MODE, _BEFORE_HEAD_MODE, _IN_HEAD_MODE, _IN_HEAD_NO_SCRIPT_MO, _AFTER_HEAD_MODE, _IN_BODY_MODE, _TEXT_MODE, _IN_TABLE_MODE, _IN_TABLE_TEXT_MODE, _IN_CAPTION_MODE, _IN_COLUMN_GROUP_MODE, _IN_TABLE_BODY_MODE, _IN_ROW_MODE, _IN_CELL_MODE, _IN_SELECT_MODE, _IN_SELECT_IN_TABLE_M, _IN_TEMPLATE_MODE, _AFTER_BODY_MODE, _IN_FRAMESET_MODE, _AFTER_FRAMESET_MODE, _AFTER_AFTER_BODY_MOD, _AFTER_AFTER_FRAMESET, _TOKEN_HANDLERS;

var Tokenizer = require('../tokenizer');

var OpenElementStack = require('./open-element-stack');

var FormattingElementList = require('./formatting-element-list');

var LocationInfoParserMixin = require('../extensions/location-info/parser-mixin');

var ErrorReportingParserMixin = require('../extensions/error-reporting/parser-mixin');

var Mixin = require('../utils/mixin');

var defaultTreeAdapter = require('../tree-adapters/default');

var mergeOptions = require('../utils/merge-options');

var doctype = require('../common/doctype');

var foreignContent = require('../common/foreign-content');

var ERR = require('../common/error-codes');

var unicode = require('../common/unicode');

var HTML = require('../common/html');

var $ = HTML.TAG_NAMES;
var NS = HTML.NAMESPACES;
var ATTRS = HTML.ATTRS;
var DEFAULT_OPTIONS = {
  scriptingEnabled: true,
  sourceCodeLocationInfo: false,
  onParseError: null,
  treeAdapter: defaultTreeAdapter
};
var HIDDEN_INPUT_TYPE = 'hidden';
var AA_OUTER_LOOP_ITER = 8;
var AA_INNER_LOOP_ITER = 3;
var INITIAL_MODE = 'INITIAL_MODE';
var BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';
var BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';
var IN_HEAD_MODE = 'IN_HEAD_MODE';
var IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';
var AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';
var IN_BODY_MODE = 'IN_BODY_MODE';
var TEXT_MODE = 'TEXT_MODE';
var IN_TABLE_MODE = 'IN_TABLE_MODE';
var IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';
var IN_CAPTION_MODE = 'IN_CAPTION_MODE';
var IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';
var IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';
var IN_ROW_MODE = 'IN_ROW_MODE';
var IN_CELL_MODE = 'IN_CELL_MODE';
var IN_SELECT_MODE = 'IN_SELECT_MODE';
var IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';
var IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';
var AFTER_BODY_MODE = 'AFTER_BODY_MODE';
var IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';
var AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';
var AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';
var AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';
var INSERTION_MODE_RESET_MAP = (_INSERTION_MODE_RESET = {}, (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.TR, IN_ROW_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.TBODY, IN_TABLE_BODY_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.THEAD, IN_TABLE_BODY_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.TFOOT, IN_TABLE_BODY_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.CAPTION, IN_CAPTION_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.COLGROUP, IN_COLUMN_GROUP_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.TABLE, IN_TABLE_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.BODY, IN_BODY_MODE), (0, _defineProperty2.default)(_INSERTION_MODE_RESET, $.FRAMESET, IN_FRAMESET_MODE), _INSERTION_MODE_RESET);
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = (_TEMPLATE_INSERTION_M = {}, (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.CAPTION, IN_TABLE_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.COLGROUP, IN_TABLE_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.TBODY, IN_TABLE_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.TFOOT, IN_TABLE_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.THEAD, IN_TABLE_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.COL, IN_COLUMN_GROUP_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.TR, IN_TABLE_BODY_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.TD, IN_ROW_MODE), (0, _defineProperty2.default)(_TEMPLATE_INSERTION_M, $.TH, IN_ROW_MODE), _TEMPLATE_INSERTION_M);
var TOKEN_HANDLERS = (_TOKEN_HANDLERS = {}, (0, _defineProperty2.default)(_TOKEN_HANDLERS, INITIAL_MODE, (_INITIAL_MODE = {}, (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.CHARACTER_TOKEN, tokenInInitialMode), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenInInitialMode), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.DOCTYPE_TOKEN, doctypeInInitialMode), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.START_TAG_TOKEN, tokenInInitialMode), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.END_TAG_TOKEN, tokenInInitialMode), (0, _defineProperty2.default)(_INITIAL_MODE, Tokenizer.EOF_TOKEN, tokenInInitialMode), _INITIAL_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, BEFORE_HTML_MODE, (_BEFORE_HTML_MODE = {}, (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.CHARACTER_TOKEN, tokenBeforeHtml), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenBeforeHtml), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.START_TAG_TOKEN, startTagBeforeHtml), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.END_TAG_TOKEN, endTagBeforeHtml), (0, _defineProperty2.default)(_BEFORE_HTML_MODE, Tokenizer.EOF_TOKEN, tokenBeforeHtml), _BEFORE_HTML_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, BEFORE_HEAD_MODE, (_BEFORE_HEAD_MODE = {}, (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.CHARACTER_TOKEN, tokenBeforeHead), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenBeforeHead), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.START_TAG_TOKEN, startTagBeforeHead), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.END_TAG_TOKEN, endTagBeforeHead), (0, _defineProperty2.default)(_BEFORE_HEAD_MODE, Tokenizer.EOF_TOKEN, tokenBeforeHead), _BEFORE_HEAD_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_HEAD_MODE, (_IN_HEAD_MODE = {}, (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.CHARACTER_TOKEN, tokenInHead), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenInHead), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.START_TAG_TOKEN, startTagInHead), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.END_TAG_TOKEN, endTagInHead), (0, _defineProperty2.default)(_IN_HEAD_MODE, Tokenizer.EOF_TOKEN, tokenInHead), _IN_HEAD_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_HEAD_NO_SCRIPT_MODE, (_IN_HEAD_NO_SCRIPT_MO = {}, (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.CHARACTER_TOKEN, tokenInHeadNoScript), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.NULL_CHARACTER_TOKEN, tokenInHeadNoScript), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.START_TAG_TOKEN, startTagInHeadNoScript), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.END_TAG_TOKEN, endTagInHeadNoScript), (0, _defineProperty2.default)(_IN_HEAD_NO_SCRIPT_MO, Tokenizer.EOF_TOKEN, tokenInHeadNoScript), _IN_HEAD_NO_SCRIPT_MO)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, AFTER_HEAD_MODE, (_AFTER_HEAD_MODE = {}, (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.CHARACTER_TOKEN, tokenAfterHead), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenAfterHead), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.DOCTYPE_TOKEN, misplacedDoctype), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.START_TAG_TOKEN, startTagAfterHead), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.END_TAG_TOKEN, endTagAfterHead), (0, _defineProperty2.default)(_AFTER_HEAD_MODE, Tokenizer.EOF_TOKEN, tokenAfterHead), _AFTER_HEAD_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_BODY_MODE, (_IN_BODY_MODE = {}, (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.START_TAG_TOKEN, startTagInBody), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.END_TAG_TOKEN, endTagInBody), (0, _defineProperty2.default)(_IN_BODY_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_BODY_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, TEXT_MODE, (_TEXT_MODE = {}, (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.NULL_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.COMMENT_TOKEN, ignoreToken), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.START_TAG_TOKEN, ignoreToken), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.END_TAG_TOKEN, endTagInText), (0, _defineProperty2.default)(_TEXT_MODE, Tokenizer.EOF_TOKEN, eofInText), _TEXT_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_TABLE_MODE, (_IN_TABLE_MODE = {}, (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.NULL_CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.START_TAG_TOKEN, startTagInTable), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.END_TAG_TOKEN, endTagInTable), (0, _defineProperty2.default)(_IN_TABLE_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_TABLE_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_TABLE_TEXT_MODE, (_IN_TABLE_TEXT_MODE = {}, (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.CHARACTER_TOKEN, characterInTableText), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInTableText), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.COMMENT_TOKEN, tokenInTableText), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.DOCTYPE_TOKEN, tokenInTableText), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.START_TAG_TOKEN, tokenInTableText), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.END_TAG_TOKEN, tokenInTableText), (0, _defineProperty2.default)(_IN_TABLE_TEXT_MODE, Tokenizer.EOF_TOKEN, tokenInTableText), _IN_TABLE_TEXT_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_CAPTION_MODE, (_IN_CAPTION_MODE = {}, (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.START_TAG_TOKEN, startTagInCaption), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.END_TAG_TOKEN, endTagInCaption), (0, _defineProperty2.default)(_IN_CAPTION_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_CAPTION_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_COLUMN_GROUP_MODE, (_IN_COLUMN_GROUP_MODE = {}, (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.CHARACTER_TOKEN, tokenInColumnGroup), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenInColumnGroup), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.START_TAG_TOKEN, startTagInColumnGroup), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.END_TAG_TOKEN, endTagInColumnGroup), (0, _defineProperty2.default)(_IN_COLUMN_GROUP_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_COLUMN_GROUP_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_TABLE_BODY_MODE, (_IN_TABLE_BODY_MODE = {}, (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.NULL_CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.START_TAG_TOKEN, startTagInTableBody), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.END_TAG_TOKEN, endTagInTableBody), (0, _defineProperty2.default)(_IN_TABLE_BODY_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_TABLE_BODY_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_ROW_MODE, (_IN_ROW_MODE = {}, (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.NULL_CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, characterInTable), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.START_TAG_TOKEN, startTagInRow), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.END_TAG_TOKEN, endTagInRow), (0, _defineProperty2.default)(_IN_ROW_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_ROW_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_CELL_MODE, (_IN_CELL_MODE = {}, (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.START_TAG_TOKEN, startTagInCell), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.END_TAG_TOKEN, endTagInCell), (0, _defineProperty2.default)(_IN_CELL_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_CELL_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_SELECT_MODE, (_IN_SELECT_MODE = {}, (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.START_TAG_TOKEN, startTagInSelect), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.END_TAG_TOKEN, endTagInSelect), (0, _defineProperty2.default)(_IN_SELECT_MODE, Tokenizer.EOF_TOKEN, eofInBody), _IN_SELECT_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_SELECT_IN_TABLE_MODE, (_IN_SELECT_IN_TABLE_M = {}, (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.START_TAG_TOKEN, startTagInSelectInTable), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.END_TAG_TOKEN, endTagInSelectInTable), (0, _defineProperty2.default)(_IN_SELECT_IN_TABLE_M, Tokenizer.EOF_TOKEN, eofInBody), _IN_SELECT_IN_TABLE_M)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_TEMPLATE_MODE, (_IN_TEMPLATE_MODE = {}, (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.CHARACTER_TOKEN, characterInBody), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.START_TAG_TOKEN, startTagInTemplate), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.END_TAG_TOKEN, endTagInTemplate), (0, _defineProperty2.default)(_IN_TEMPLATE_MODE, Tokenizer.EOF_TOKEN, eofInTemplate), _IN_TEMPLATE_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, AFTER_BODY_MODE, (_AFTER_BODY_MODE = {}, (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.CHARACTER_TOKEN, tokenAfterBody), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.NULL_CHARACTER_TOKEN, tokenAfterBody), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.COMMENT_TOKEN, appendCommentToRootHtmlElement), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.START_TAG_TOKEN, startTagAfterBody), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.END_TAG_TOKEN, endTagAfterBody), (0, _defineProperty2.default)(_AFTER_BODY_MODE, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_BODY_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, IN_FRAMESET_MODE, (_IN_FRAMESET_MODE = {}, (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.START_TAG_TOKEN, startTagInFrameset), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.END_TAG_TOKEN, endTagInFrameset), (0, _defineProperty2.default)(_IN_FRAMESET_MODE, Tokenizer.EOF_TOKEN, stopParsing), _IN_FRAMESET_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, AFTER_FRAMESET_MODE, (_AFTER_FRAMESET_MODE = {}, (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.WHITESPACE_CHARACTER_TOKEN, insertCharacters), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.COMMENT_TOKEN, appendComment), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.START_TAG_TOKEN, startTagAfterFrameset), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.END_TAG_TOKEN, endTagAfterFrameset), (0, _defineProperty2.default)(_AFTER_FRAMESET_MODE, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_FRAMESET_MODE)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, AFTER_AFTER_BODY_MODE, (_AFTER_AFTER_BODY_MOD = {}, (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.CHARACTER_TOKEN, tokenAfterAfterBody), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.NULL_CHARACTER_TOKEN, tokenAfterAfterBody), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.COMMENT_TOKEN, appendCommentToDocument), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.START_TAG_TOKEN, startTagAfterAfterBody), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.END_TAG_TOKEN, tokenAfterAfterBody), (0, _defineProperty2.default)(_AFTER_AFTER_BODY_MOD, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_AFTER_BODY_MOD)), (0, _defineProperty2.default)(_TOKEN_HANDLERS, AFTER_AFTER_FRAMESET_MODE, (_AFTER_AFTER_FRAMESET = {}, (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.NULL_CHARACTER_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.WHITESPACE_CHARACTER_TOKEN, whitespaceCharacterInBody), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.COMMENT_TOKEN, appendCommentToDocument), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.DOCTYPE_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.START_TAG_TOKEN, startTagAfterAfterFrameset), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.END_TAG_TOKEN, ignoreToken), (0, _defineProperty2.default)(_AFTER_AFTER_FRAMESET, Tokenizer.EOF_TOKEN, stopParsing), _AFTER_AFTER_FRAMESET)), _TOKEN_HANDLERS);

var Parser = function () {
  function Parser(options) {
    (0, _classCallCheck2.default)(this, Parser);
    this.options = mergeOptions(DEFAULT_OPTIONS, options);
    this.treeAdapter = this.options.treeAdapter;
    this.pendingScript = null;

    if (this.options.sourceCodeLocationInfo) {
      Mixin.install(this, LocationInfoParserMixin);
    }

    if (this.options.onParseError) {
      Mixin.install(this, ErrorReportingParserMixin, {
        onParseError: this.options.onParseError
      });
    }
  }

  (0, _createClass2.default)(Parser, [{
    key: "parse",
    value: function parse(html) {
      var document = this.treeAdapter.createDocument();

      this._bootstrap(document, null);

      this.tokenizer.write(html, true);

      this._runParsingLoop(null);

      return document;
    }
  }, {
    key: "parseFragment",
    value: function parseFragment(html, fragmentContext) {
      if (!fragmentContext) {
        fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
      }

      var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

      this._bootstrap(documentMock, fragmentContext);

      if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
        this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
      }

      this._initTokenizerForFragmentParsing();

      this._insertFakeRootElement();

      this._resetInsertionMode();

      this._findFormInFragmentContext();

      this.tokenizer.write(html, true);

      this._runParsingLoop(null);

      var rootElement = this.treeAdapter.getFirstChild(documentMock);
      var fragment = this.treeAdapter.createDocumentFragment();

      this._adoptNodes(rootElement, fragment);

      return fragment;
    }
  }, {
    key: "_bootstrap",
    value: function _bootstrap(document, fragmentContext) {
      this.tokenizer = new Tokenizer(this.options);
      this.stopped = false;
      this.insertionMode = INITIAL_MODE;
      this.originalInsertionMode = '';
      this.document = document;
      this.fragmentContext = fragmentContext;
      this.headElement = null;
      this.formElement = null;
      this.openElements = new OpenElementStack(this.document, this.treeAdapter);
      this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
      this.tmplInsertionModeStack = [];
      this.tmplInsertionModeStackTop = -1;
      this.currentTmplInsertionMode = null;
      this.pendingCharacterTokens = [];
      this.hasNonWhitespacePendingCharacterToken = false;
      this.framesetOk = true;
      this.skipNextNewLine = false;
      this.fosterParentingEnabled = false;
    }
  }, {
    key: "_err",
    value: function _err() {}
  }, {
    key: "_runParsingLoop",
    value: function _runParsingLoop(scriptHandler) {
      while (!this.stopped) {
        this._setupTokenizerCDATAMode();

        var token = this.tokenizer.getNextToken();

        if (token.type === Tokenizer.HIBERNATION_TOKEN) {
          break;
        }

        if (this.skipNextNewLine) {
          this.skipNextNewLine = false;

          if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
            if (token.chars.length === 1) {
              continue;
            }

            token.chars = token.chars.substr(1);
          }
        }

        this._processInputToken(token);

        if (scriptHandler && this.pendingScript) {
          break;
        }
      }
    }
  }, {
    key: "runParsingLoopForCurrentChunk",
    value: function runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
      this._runParsingLoop(scriptHandler);

      if (scriptHandler && this.pendingScript) {
        var script = this.pendingScript;
        this.pendingScript = null;
        scriptHandler(script);
        return;
      }

      if (writeCallback) {
        writeCallback();
      }
    }
  }, {
    key: "_setupTokenizerCDATAMode",
    value: function _setupTokenizerCDATAMode() {
      var current = this._getAdjustedCurrentElement();

      this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
    }
  }, {
    key: "_switchToTextParsing",
    value: function _switchToTextParsing(currentToken, nextTokenizerState) {
      this._insertElement(currentToken, NS.HTML);

      this.tokenizer.state = nextTokenizerState;
      this.originalInsertionMode = this.insertionMode;
      this.insertionMode = TEXT_MODE;
    }
  }, {
    key: "switchToPlaintextParsing",
    value: function switchToPlaintextParsing() {
      this.insertionMode = TEXT_MODE;
      this.originalInsertionMode = IN_BODY_MODE;
      this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
    }
  }, {
    key: "_getAdjustedCurrentElement",
    value: function _getAdjustedCurrentElement() {
      return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
    }
  }, {
    key: "_findFormInFragmentContext",
    value: function _findFormInFragmentContext() {
      var node = this.fragmentContext;

      do {
        if (this.treeAdapter.getTagName(node) === $.FORM) {
          this.formElement = node;
          break;
        }

        node = this.treeAdapter.getParentNode(node);
      } while (node);
    }
  }, {
    key: "_initTokenizerForFragmentParsing",
    value: function _initTokenizerForFragmentParsing() {
      if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
        var tn = this.treeAdapter.getTagName(this.fragmentContext);

        if (tn === $.TITLE || tn === $.TEXTAREA) {
          this.tokenizer.state = Tokenizer.MODE.RCDATA;
        } else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
          this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
        } else if (tn === $.SCRIPT) {
          this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
        } else if (tn === $.PLAINTEXT) {
          this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
        }
      }
    }
  }, {
    key: "_setDocumentType",
    value: function _setDocumentType(token) {
      var name = token.name || '';
      var publicId = token.publicId || '';
      var systemId = token.systemId || '';
      this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
    }
  }, {
    key: "_attachElementToTree",
    value: function _attachElementToTree(element) {
      if (this._shouldFosterParentOnInsertion()) {
        this._fosterParentElement(element);
      } else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;
        this.treeAdapter.appendChild(parent, element);
      }
    }
  }, {
    key: "_appendElement",
    value: function _appendElement(token, namespaceURI) {
      var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

      this._attachElementToTree(element);
    }
  }, {
    key: "_insertElement",
    value: function _insertElement(token, namespaceURI) {
      var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

      this._attachElementToTree(element);

      this.openElements.push(element);
    }
  }, {
    key: "_insertFakeElement",
    value: function _insertFakeElement(tagName) {
      var element = this.treeAdapter.createElement(tagName, NS.HTML, []);

      this._attachElementToTree(element);

      this.openElements.push(element);
    }
  }, {
    key: "_insertTemplate",
    value: function _insertTemplate(token) {
      var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
      var content = this.treeAdapter.createDocumentFragment();
      this.treeAdapter.setTemplateContent(tmpl, content);

      this._attachElementToTree(tmpl);

      this.openElements.push(tmpl);
    }
  }, {
    key: "_insertFakeRootElement",
    value: function _insertFakeRootElement() {
      var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
      this.treeAdapter.appendChild(this.openElements.current, element);
      this.openElements.push(element);
    }
  }, {
    key: "_appendCommentNode",
    value: function _appendCommentNode(token, parent) {
      var commentNode = this.treeAdapter.createCommentNode(token.data);
      this.treeAdapter.appendChild(parent, commentNode);
    }
  }, {
    key: "_insertCharacters",
    value: function _insertCharacters(token) {
      if (this._shouldFosterParentOnInsertion()) {
        this._fosterParentText(token.chars);
      } else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;
        this.treeAdapter.insertText(parent, token.chars);
      }
    }
  }, {
    key: "_adoptNodes",
    value: function _adoptNodes(donor, recipient) {
      for (var child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
        this.treeAdapter.detachNode(child);
        this.treeAdapter.appendChild(recipient, child);
      }
    }
  }, {
    key: "_shouldProcessTokenInForeignContent",
    value: function _shouldProcessTokenInForeignContent(token) {
      var current = this._getAdjustedCurrentElement();

      if (!current || current === this.document) {
        return false;
      }

      var ns = this.treeAdapter.getNamespaceURI(current);

      if (ns === NS.HTML) {
        return false;
      }

      if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
        return false;
      }

      var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
      var isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;

      if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
        return false;
      }

      if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) {
        return false;
      }

      return token.type !== Tokenizer.EOF_TOKEN;
    }
  }, {
    key: "_processToken",
    value: function _processToken(token) {
      TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
    }
  }, {
    key: "_processTokenInBodyMode",
    value: function _processTokenInBodyMode(token) {
      TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
    }
  }, {
    key: "_processTokenInForeignContent",
    value: function _processTokenInForeignContent(token) {
      if (token.type === Tokenizer.CHARACTER_TOKEN) {
        characterInForeignContent(this, token);
      } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
        nullCharacterInForeignContent(this, token);
      } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
        insertCharacters(this, token);
      } else if (token.type === Tokenizer.COMMENT_TOKEN) {
        appendComment(this, token);
      } else if (token.type === Tokenizer.START_TAG_TOKEN) {
        startTagInForeignContent(this, token);
      } else if (token.type === Tokenizer.END_TAG_TOKEN) {
        endTagInForeignContent(this, token);
      }
    }
  }, {
    key: "_processInputToken",
    value: function _processInputToken(token) {
      if (this._shouldProcessTokenInForeignContent(token)) {
        this._processTokenInForeignContent(token);
      } else {
        this._processToken(token);
      }

      if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
        this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
      }
    }
  }, {
    key: "_isIntegrationPoint",
    value: function _isIntegrationPoint(element, foreignNS) {
      var tn = this.treeAdapter.getTagName(element);
      var ns = this.treeAdapter.getNamespaceURI(element);
      var attrs = this.treeAdapter.getAttrList(element);
      return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
    }
  }, {
    key: "_reconstructActiveFormattingElements",
    value: function _reconstructActiveFormattingElements() {
      var listLength = this.activeFormattingElements.length;

      if (listLength) {
        var unopenIdx = listLength;
        var entry = null;

        do {
          unopenIdx--;
          entry = this.activeFormattingElements.entries[unopenIdx];

          if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
            unopenIdx++;
            break;
          }
        } while (unopenIdx > 0);

        for (var i = unopenIdx; i < listLength; i++) {
          entry = this.activeFormattingElements.entries[i];

          this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));

          entry.element = this.openElements.current;
        }
      }
    }
  }, {
    key: "_closeTableCell",
    value: function _closeTableCell() {
      this.openElements.generateImpliedEndTags();
      this.openElements.popUntilTableCellPopped();
      this.activeFormattingElements.clearToLastMarker();
      this.insertionMode = IN_ROW_MODE;
    }
  }, {
    key: "_closePElement",
    value: function _closePElement() {
      this.openElements.generateImpliedEndTagsWithExclusion($.P);
      this.openElements.popUntilTagNamePopped($.P);
    }
  }, {
    key: "_resetInsertionMode",
    value: function _resetInsertionMode() {
      for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
        var element = this.openElements.items[i];

        if (i === 0) {
          last = true;

          if (this.fragmentContext) {
            element = this.fragmentContext;
          }
        }

        var tn = this.treeAdapter.getTagName(element);
        var newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

        if (newInsertionMode) {
          this.insertionMode = newInsertionMode;
          break;
        } else if (!last && (tn === $.TD || tn === $.TH)) {
          this.insertionMode = IN_CELL_MODE;
          break;
        } else if (!last && tn === $.HEAD) {
          this.insertionMode = IN_HEAD_MODE;
          break;
        } else if (tn === $.SELECT) {
          this._resetInsertionModeForSelect(i);

          break;
        } else if (tn === $.TEMPLATE) {
          this.insertionMode = this.currentTmplInsertionMode;
          break;
        } else if (tn === $.HTML) {
          this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
          break;
        } else if (last) {
          this.insertionMode = IN_BODY_MODE;
          break;
        }
      }
    }
  }, {
    key: "_resetInsertionModeForSelect",
    value: function _resetInsertionModeForSelect(selectIdx) {
      if (selectIdx > 0) {
        for (var i = selectIdx - 1; i > 0; i--) {
          var ancestor = this.openElements.items[i];
          var tn = this.treeAdapter.getTagName(ancestor);

          if (tn === $.TEMPLATE) {
            break;
          } else if (tn === $.TABLE) {
            this.insertionMode = IN_SELECT_IN_TABLE_MODE;
            return;
          }
        }
      }

      this.insertionMode = IN_SELECT_MODE;
    }
  }, {
    key: "_pushTmplInsertionMode",
    value: function _pushTmplInsertionMode(mode) {
      this.tmplInsertionModeStack.push(mode);
      this.tmplInsertionModeStackTop++;
      this.currentTmplInsertionMode = mode;
    }
  }, {
    key: "_popTmplInsertionMode",
    value: function _popTmplInsertionMode() {
      this.tmplInsertionModeStack.pop();
      this.tmplInsertionModeStackTop--;
      this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
    }
  }, {
    key: "_isElementCausesFosterParenting",
    value: function _isElementCausesFosterParenting(element) {
      var tn = this.treeAdapter.getTagName(element);
      return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
    }
  }, {
    key: "_shouldFosterParentOnInsertion",
    value: function _shouldFosterParentOnInsertion() {
      return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
    }
  }, {
    key: "_findFosterParentingLocation",
    value: function _findFosterParentingLocation() {
      var location = {
        parent: null,
        beforeElement: null
      };

      for (var i = this.openElements.stackTop; i >= 0; i--) {
        var openElement = this.openElements.items[i];
        var tn = this.treeAdapter.getTagName(openElement);
        var ns = this.treeAdapter.getNamespaceURI(openElement);

        if (tn === $.TEMPLATE && ns === NS.HTML) {
          location.parent = this.treeAdapter.getTemplateContent(openElement);
          break;
        } else if (tn === $.TABLE) {
          location.parent = this.treeAdapter.getParentNode(openElement);

          if (location.parent) {
            location.beforeElement = openElement;
          } else {
            location.parent = this.openElements.items[i - 1];
          }

          break;
        }
      }

      if (!location.parent) {
        location.parent = this.openElements.items[0];
      }

      return location;
    }
  }, {
    key: "_fosterParentElement",
    value: function _fosterParentElement(element) {
      var location = this._findFosterParentingLocation();

      if (location.beforeElement) {
        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
      } else {
        this.treeAdapter.appendChild(location.parent, element);
      }
    }
  }, {
    key: "_fosterParentText",
    value: function _fosterParentText(chars) {
      var location = this._findFosterParentingLocation();

      if (location.beforeElement) {
        this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
      } else {
        this.treeAdapter.insertText(location.parent, chars);
      }
    }
  }, {
    key: "_isSpecialElement",
    value: function _isSpecialElement(element) {
      var tn = this.treeAdapter.getTagName(element);
      var ns = this.treeAdapter.getNamespaceURI(element);
      return HTML.SPECIAL_ELEMENTS[ns][tn];
    }
  }]);
  return Parser;
}();

module.exports = Parser;

function aaObtainFormattingElementEntry(p, token) {
  var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

  if (formattingElementEntry) {
    if (!p.openElements.contains(formattingElementEntry.element)) {
      p.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p.openElements.hasInScope(token.tagName)) {
      formattingElementEntry = null;
    }
  } else {
    genericEndTagInBody(p, token);
  }

  return formattingElementEntry;
}

function aaObtainFurthestBlock(p, formattingElementEntry) {
  var furthestBlock = null;

  for (var i = p.openElements.stackTop; i >= 0; i--) {
    var element = p.openElements.items[i];

    if (element === formattingElementEntry.element) {
      break;
    }

    if (p._isSpecialElement(element)) {
      furthestBlock = element;
    }
  }

  if (!furthestBlock) {
    p.openElements.popUntilElementPopped(formattingElementEntry.element);
    p.activeFormattingElements.removeEntry(formattingElementEntry);
  }

  return furthestBlock;
}

function aaInnerLoop(p, furthestBlock, formattingElement) {
  var lastElement = furthestBlock;
  var nextElement = p.openElements.getCommonAncestor(furthestBlock);

  for (var i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
    nextElement = p.openElements.getCommonAncestor(element);
    var elementEntry = p.activeFormattingElements.getElementEntry(element);
    var counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
    var shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) {
        p.activeFormattingElements.removeEntry(elementEntry);
      }

      p.openElements.remove(element);
    } else {
      element = aaRecreateElementFromEntry(p, elementEntry);

      if (lastElement === furthestBlock) {
        p.activeFormattingElements.bookmark = elementEntry;
      }

      p.treeAdapter.detachNode(lastElement);
      p.treeAdapter.appendChild(element, lastElement);
      lastElement = element;
    }
  }

  return lastElement;
}

function aaRecreateElementFromEntry(p, elementEntry) {
  var ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
  var newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
  p.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
}

function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
  if (p._isElementCausesFosterParenting(commonAncestor)) {
    p._fosterParentElement(lastElement);
  } else {
    var tn = p.treeAdapter.getTagName(commonAncestor);
    var ns = p.treeAdapter.getNamespaceURI(commonAncestor);

    if (tn === $.TEMPLATE && ns === NS.HTML) {
      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
    }

    p.treeAdapter.appendChild(commonAncestor, lastElement);
  }
}

function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
  var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
  var token = formattingElementEntry.token;
  var newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

  p._adoptNodes(furthestBlock, newElement);

  p.treeAdapter.appendChild(furthestBlock, newElement);
  p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
  p.activeFormattingElements.removeEntry(formattingElementEntry);
  p.openElements.remove(formattingElementEntry.element);
  p.openElements.insertAfter(furthestBlock, newElement);
}

function callAdoptionAgency(p, token) {
  var formattingElementEntry;

  for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
    formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

    if (!formattingElementEntry) {
      break;
    }

    var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

    if (!furthestBlock) {
      break;
    }

    p.activeFormattingElements.bookmark = formattingElementEntry;
    var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
    var commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
    p.treeAdapter.detachNode(lastElement);
    aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
  }
}

function ignoreToken() {}

function misplacedDoctype(p) {
  p._err(ERR.misplacedDoctype);
}

function appendComment(p, token) {
  p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}

function appendCommentToRootHtmlElement(p, token) {
  p._appendCommentNode(token, p.openElements.items[0]);
}

function appendCommentToDocument(p, token) {
  p._appendCommentNode(token, p.document);
}

function insertCharacters(p, token) {
  p._insertCharacters(token);
}

function stopParsing(p) {
  p.stopped = true;
}

function doctypeInInitialMode(p, token) {
  p._setDocumentType(token);

  var mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);

  if (!doctype.isConforming(token)) {
    p._err(ERR.nonConformingDoctype);
  }

  p.treeAdapter.setDocumentMode(p.document, mode);
  p.insertionMode = BEFORE_HTML_MODE;
}

function tokenInInitialMode(p, token) {
  p._err(ERR.missingDoctype, {
    beforeToken: true
  });

  p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
  p.insertionMode = BEFORE_HTML_MODE;

  p._processToken(token);
}

function startTagBeforeHtml(p, token) {
  if (token.tagName === $.HTML) {
    p._insertElement(token, NS.HTML);

    p.insertionMode = BEFORE_HEAD_MODE;
  } else {
    tokenBeforeHtml(p, token);
  }
}

function endTagBeforeHtml(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
    tokenBeforeHtml(p, token);
  }
}

function tokenBeforeHtml(p, token) {
  p._insertFakeRootElement();

  p.insertionMode = BEFORE_HEAD_MODE;

  p._processToken(token);
}

function startTagBeforeHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.HEAD) {
    p._insertElement(token, NS.HTML);

    p.headElement = p.openElements.current;
    p.insertionMode = IN_HEAD_MODE;
  } else {
    tokenBeforeHead(p, token);
  }
}

function endTagBeforeHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
    tokenBeforeHead(p, token);
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenBeforeHead(p, token) {
  p._insertFakeElement($.HEAD);

  p.headElement = p.openElements.current;
  p.insertionMode = IN_HEAD_MODE;

  p._processToken(token);
}

function startTagInHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
    p._appendElement(token, NS.HTML);

    token.ackSelfClosing = true;
  } else if (tn === $.TITLE) {
    p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
  } else if (tn === $.NOSCRIPT) {
    if (p.options.scriptingEnabled) {
      p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
    } else {
      p._insertElement(token, NS.HTML);

      p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
    }
  } else if (tn === $.NOFRAMES || tn === $.STYLE) {
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
  } else if (tn === $.SCRIPT) {
    p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
  } else if (tn === $.TEMPLATE) {
    p._insertTemplate(token, NS.HTML);

    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
    p.insertionMode = IN_TEMPLATE_MODE;

    p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
  } else if (tn === $.HEAD) {
    p._err(ERR.misplacedStartTagForHeadElement);
  } else {
    tokenInHead(p, token);
  }
}

function endTagInHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HEAD) {
    p.openElements.pop();
    p.insertionMode = AFTER_HEAD_MODE;
  } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
    tokenInHead(p, token);
  } else if (tn === $.TEMPLATE) {
    if (p.openElements.tmplCount > 0) {
      p.openElements.generateImpliedEndTagsThoroughly();

      if (p.openElements.currentTagName !== $.TEMPLATE) {
        p._err(ERR.closingOfElementWithOpenChildElements);
      }

      p.openElements.popUntilTagNamePopped($.TEMPLATE);
      p.activeFormattingElements.clearToLastMarker();

      p._popTmplInsertionMode();

      p._resetInsertionMode();
    } else {
      p._err(ERR.endTagWithoutMatchingOpenElement);
    }
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenInHead(p, token) {
  p.openElements.pop();
  p.insertionMode = AFTER_HEAD_MODE;

  p._processToken(token);
}

function startTagInHeadNoScript(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.BASEFONT || tn === $.BGSOUND || tn === $.HEAD || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.STYLE) {
    startTagInHead(p, token);
  } else if (tn === $.NOSCRIPT) {
    p._err(ERR.nestedNoscriptInHead);
  } else {
    tokenInHeadNoScript(p, token);
  }
}

function endTagInHeadNoScript(p, token) {
  var tn = token.tagName;

  if (tn === $.NOSCRIPT) {
    p.openElements.pop();
    p.insertionMode = IN_HEAD_MODE;
  } else if (tn === $.BR) {
    tokenInHeadNoScript(p, token);
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenInHeadNoScript(p, token) {
  var errCode = token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;

  p._err(errCode);

  p.openElements.pop();
  p.insertionMode = IN_HEAD_MODE;

  p._processToken(token);
}

function startTagAfterHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.BODY) {
    p._insertElement(token, NS.HTML);

    p.framesetOk = false;
    p.insertionMode = IN_BODY_MODE;
  } else if (tn === $.FRAMESET) {
    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_FRAMESET_MODE;
  } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
    p._err(ERR.abandonedHeadElementChild);

    p.openElements.push(p.headElement);
    startTagInHead(p, token);
    p.openElements.remove(p.headElement);
  } else if (tn === $.HEAD) {
    p._err(ERR.misplacedStartTagForHeadElement);
  } else {
    tokenAfterHead(p, token);
  }
}

function endTagAfterHead(p, token) {
  var tn = token.tagName;

  if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
    tokenAfterHead(p, token);
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  } else {
    p._err(ERR.endTagWithoutMatchingOpenElement);
  }
}

function tokenAfterHead(p, token) {
  p._insertFakeElement($.BODY);

  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
}

function whitespaceCharacterInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertCharacters(token);
}

function characterInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertCharacters(token);

  p.framesetOk = false;
}

function htmlStartTagInBody(p, token) {
  if (p.openElements.tmplCount === 0) {
    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
  }
}

function bodyStartTagInBody(p, token) {
  var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

  if (bodyElement && p.openElements.tmplCount === 0) {
    p.framesetOk = false;
    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
  }
}

function framesetStartTagInBody(p, token) {
  var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

  if (p.framesetOk && bodyElement) {
    p.treeAdapter.detachNode(bodyElement);
    p.openElements.popAllUpToHtmlElement();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_FRAMESET_MODE;
  }
}

function addressStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);
}

function numberedHeaderStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  var tn = p.openElements.currentTagName;

  if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
    p.openElements.pop();
  }

  p._insertElement(token, NS.HTML);
}

function preStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);

  p.skipNextNewLine = true;
  p.framesetOk = false;
}

function formStartTagInBody(p, token) {
  var inTemplate = p.openElements.tmplCount > 0;

  if (!p.formElement || inTemplate) {
    if (p.openElements.hasInButtonScope($.P)) {
      p._closePElement();
    }

    p._insertElement(token, NS.HTML);

    if (!inTemplate) {
      p.formElement = p.openElements.current;
    }
  }
}

function listItemStartTagInBody(p, token) {
  p.framesetOk = false;
  var tn = token.tagName;

  for (var i = p.openElements.stackTop; i >= 0; i--) {
    var element = p.openElements.items[i];
    var elementTn = p.treeAdapter.getTagName(element);
    var closeTn = null;

    if (tn === $.LI && elementTn === $.LI) {
      closeTn = $.LI;
    } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
      closeTn = elementTn;
    }

    if (closeTn) {
      p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
      p.openElements.popUntilTagNamePopped(closeTn);
      break;
    }

    if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {
      break;
    }
  }

  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);
}

function plaintextStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);

  p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}

function buttonStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.BUTTON)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped($.BUTTON);
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
}

function aStartTagInBody(p, token) {
  var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

  if (activeElementEntry) {
    callAdoptionAgency(p, token);
    p.openElements.remove(activeElementEntry.element);
    p.activeFormattingElements.removeEntry(activeElementEntry);
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function bStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function nobrStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  if (p.openElements.hasInScope($.NOBR)) {
    callAdoptionAgency(p, token);

    p._reconstructActiveFormattingElements();
  }

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function appletStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.insertMarker();
  p.framesetOk = false;
}

function tableStartTagInBody(p, token) {
  if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
  p.insertionMode = IN_TABLE_MODE;
}

function areaStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._appendElement(token, NS.HTML);

  p.framesetOk = false;
  token.ackSelfClosing = true;
}

function inputStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._appendElement(token, NS.HTML);

  var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

  if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
    p.framesetOk = false;
  }

  token.ackSelfClosing = true;
}

function paramStartTagInBody(p, token) {
  p._appendElement(token, NS.HTML);

  token.ackSelfClosing = true;
}

function hrStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._appendElement(token, NS.HTML);

  p.framesetOk = false;
  token.ackSelfClosing = true;
}

function imageStartTagInBody(p, token) {
  token.tagName = $.IMG;
  areaStartTagInBody(p, token);
}

function textareaStartTagInBody(p, token) {
  p._insertElement(token, NS.HTML);

  p.skipNextNewLine = true;
  p.tokenizer.state = Tokenizer.MODE.RCDATA;
  p.originalInsertionMode = p.insertionMode;
  p.framesetOk = false;
  p.insertionMode = TEXT_MODE;
}

function xmpStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._reconstructActiveFormattingElements();

  p.framesetOk = false;

  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function iframeStartTagInBody(p, token) {
  p.framesetOk = false;

  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function noembedStartTagInBody(p, token) {
  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function selectStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;

  if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
    p.insertionMode = IN_SELECT_IN_TABLE_MODE;
  } else {
    p.insertionMode = IN_SELECT_MODE;
  }
}

function optgroupStartTagInBody(p, token) {
  if (p.openElements.currentTagName === $.OPTION) {
    p.openElements.pop();
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
}

function rbStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.RUBY)) {
    p.openElements.generateImpliedEndTags();
  }

  p._insertElement(token, NS.HTML);
}

function rtStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.RUBY)) {
    p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
  }

  p._insertElement(token, NS.HTML);
}

function menuStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) {
    p._closePElement();
  }

  p._insertElement(token, NS.HTML);
}

function mathStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  foreignContent.adjustTokenMathMLAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);

  if (token.selfClosing) {
    p._appendElement(token, NS.MATHML);
  } else {
    p._insertElement(token, NS.MATHML);
  }

  token.ackSelfClosing = true;
}

function svgStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  foreignContent.adjustTokenSVGAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);

  if (token.selfClosing) {
    p._appendElement(token, NS.SVG);
  } else {
    p._insertElement(token, NS.SVG);
  }

  token.ackSelfClosing = true;
}

function genericStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
}

function startTagInBody(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 1:
      if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
        bStartTagInBody(p, token);
      } else if (tn === $.P) {
        addressStartTagInBody(p, token);
      } else if (tn === $.A) {
        aStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    case 2:
      if (tn === $.DL || tn === $.OL || tn === $.UL) {
        addressStartTagInBody(p, token);
      } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
        numberedHeaderStartTagInBody(p, token);
      } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
        listItemStartTagInBody(p, token);
      } else if (tn === $.EM || tn === $.TT) {
        bStartTagInBody(p, token);
      } else if (tn === $.BR) {
        areaStartTagInBody(p, token);
      } else if (tn === $.HR) {
        hrStartTagInBody(p, token);
      } else if (tn === $.RB) {
        rbStartTagInBody(p, token);
      } else if (tn === $.RT || tn === $.RP) {
        rtStartTagInBody(p, token);
      } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
        genericStartTagInBody(p, token);
      }

      break;

    case 3:
      if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
        addressStartTagInBody(p, token);
      } else if (tn === $.PRE) {
        preStartTagInBody(p, token);
      } else if (tn === $.BIG) {
        bStartTagInBody(p, token);
      } else if (tn === $.IMG || tn === $.WBR) {
        areaStartTagInBody(p, token);
      } else if (tn === $.XMP) {
        xmpStartTagInBody(p, token);
      } else if (tn === $.SVG) {
        svgStartTagInBody(p, token);
      } else if (tn === $.RTC) {
        rbStartTagInBody(p, token);
      } else if (tn !== $.COL) {
        genericStartTagInBody(p, token);
      }

      break;

    case 4:
      if (tn === $.HTML) {
        htmlStartTagInBody(p, token);
      } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
        startTagInHead(p, token);
      } else if (tn === $.BODY) {
        bodyStartTagInBody(p, token);
      } else if (tn === $.MAIN || tn === $.MENU) {
        addressStartTagInBody(p, token);
      } else if (tn === $.FORM) {
        formStartTagInBody(p, token);
      } else if (tn === $.CODE || tn === $.FONT) {
        bStartTagInBody(p, token);
      } else if (tn === $.NOBR) {
        nobrStartTagInBody(p, token);
      } else if (tn === $.AREA) {
        areaStartTagInBody(p, token);
      } else if (tn === $.MATH) {
        mathStartTagInBody(p, token);
      } else if (tn === $.MENU) {
        menuStartTagInBody(p, token);
      } else if (tn !== $.HEAD) {
        genericStartTagInBody(p, token);
      }

      break;

    case 5:
      if (tn === $.STYLE || tn === $.TITLE) {
        startTagInHead(p, token);
      } else if (tn === $.ASIDE) {
        addressStartTagInBody(p, token);
      } else if (tn === $.SMALL) {
        bStartTagInBody(p, token);
      } else if (tn === $.TABLE) {
        tableStartTagInBody(p, token);
      } else if (tn === $.EMBED) {
        areaStartTagInBody(p, token);
      } else if (tn === $.INPUT) {
        inputStartTagInBody(p, token);
      } else if (tn === $.PARAM || tn === $.TRACK) {
        paramStartTagInBody(p, token);
      } else if (tn === $.IMAGE) {
        imageStartTagInBody(p, token);
      } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
        genericStartTagInBody(p, token);
      }

      break;

    case 6:
      if (tn === $.SCRIPT) {
        startTagInHead(p, token);
      } else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
        addressStartTagInBody(p, token);
      } else if (tn === $.BUTTON) {
        buttonStartTagInBody(p, token);
      } else if (tn === $.STRIKE || tn === $.STRONG) {
        bStartTagInBody(p, token);
      } else if (tn === $.APPLET || tn === $.OBJECT) {
        appletStartTagInBody(p, token);
      } else if (tn === $.KEYGEN) {
        areaStartTagInBody(p, token);
      } else if (tn === $.SOURCE) {
        paramStartTagInBody(p, token);
      } else if (tn === $.IFRAME) {
        iframeStartTagInBody(p, token);
      } else if (tn === $.SELECT) {
        selectStartTagInBody(p, token);
      } else if (tn === $.OPTION) {
        optgroupStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    case 7:
      if (tn === $.BGSOUND) {
        startTagInHead(p, token);
      } else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) {
        addressStartTagInBody(p, token);
      } else if (tn === $.LISTING) {
        preStartTagInBody(p, token);
      } else if (tn === $.MARQUEE) {
        appletStartTagInBody(p, token);
      } else if (tn === $.NOEMBED) {
        noembedStartTagInBody(p, token);
      } else if (tn !== $.CAPTION) {
        genericStartTagInBody(p, token);
      }

      break;

    case 8:
      if (tn === $.BASEFONT) {
        startTagInHead(p, token);
      } else if (tn === $.FRAMESET) {
        framesetStartTagInBody(p, token);
      } else if (tn === $.FIELDSET) {
        addressStartTagInBody(p, token);
      } else if (tn === $.TEXTAREA) {
        textareaStartTagInBody(p, token);
      } else if (tn === $.TEMPLATE) {
        startTagInHead(p, token);
      } else if (tn === $.NOSCRIPT) {
        if (p.options.scriptingEnabled) {
          noembedStartTagInBody(p, token);
        } else {
          genericStartTagInBody(p, token);
        }
      } else if (tn === $.OPTGROUP) {
        optgroupStartTagInBody(p, token);
      } else if (tn !== $.COLGROUP) {
        genericStartTagInBody(p, token);
      }

      break;

    case 9:
      if (tn === $.PLAINTEXT) {
        plaintextStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    case 10:
      if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
        addressStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }

      break;

    default:
      genericStartTagInBody(p, token);
  }
}

function bodyEndTagInBody(p) {
  if (p.openElements.hasInScope($.BODY)) {
    p.insertionMode = AFTER_BODY_MODE;
  }
}

function htmlEndTagInBody(p, token) {
  if (p.openElements.hasInScope($.BODY)) {
    p.insertionMode = AFTER_BODY_MODE;

    p._processToken(token);
  }
}

function addressEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
  }
}

function formEndTagInBody(p) {
  var inTemplate = p.openElements.tmplCount > 0;
  var formElement = p.formElement;

  if (!inTemplate) {
    p.formElement = null;
  }

  if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
    p.openElements.generateImpliedEndTags();

    if (inTemplate) {
      p.openElements.popUntilTagNamePopped($.FORM);
    } else {
      p.openElements.remove(formElement);
    }
  }
}

function pEndTagInBody(p) {
  if (!p.openElements.hasInButtonScope($.P)) {
    p._insertFakeElement($.P);
  }

  p._closePElement();
}

function liEndTagInBody(p) {
  if (p.openElements.hasInListItemScope($.LI)) {
    p.openElements.generateImpliedEndTagsWithExclusion($.LI);
    p.openElements.popUntilTagNamePopped($.LI);
  }
}

function ddEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTagsWithExclusion(tn);
    p.openElements.popUntilTagNamePopped(tn);
  }
}

function numberedHeaderEndTagInBody(p) {
  if (p.openElements.hasNumberedHeaderInScope()) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilNumberedHeaderPopped();
  }
}

function appletEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
    p.activeFormattingElements.clearToLastMarker();
  }
}

function brEndTagInBody(p) {
  p._reconstructActiveFormattingElements();

  p._insertFakeElement($.BR);

  p.openElements.pop();
  p.framesetOk = false;
}

function genericEndTagInBody(p, token) {
  var tn = token.tagName;

  for (var i = p.openElements.stackTop; i > 0; i--) {
    var element = p.openElements.items[i];

    if (p.treeAdapter.getTagName(element) === tn) {
      p.openElements.generateImpliedEndTagsWithExclusion(tn);
      p.openElements.popUntilElementPopped(element);
      break;
    }

    if (p._isSpecialElement(element)) {
      break;
    }
  }
}

function endTagInBody(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 1:
      if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
        callAdoptionAgency(p, token);
      } else if (tn === $.P) {
        pEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 2:
      if (tn === $.DL || tn === $.UL || tn === $.OL) {
        addressEndTagInBody(p, token);
      } else if (tn === $.LI) {
        liEndTagInBody(p, token);
      } else if (tn === $.DD || tn === $.DT) {
        ddEndTagInBody(p, token);
      } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
        numberedHeaderEndTagInBody(p, token);
      } else if (tn === $.BR) {
        brEndTagInBody(p, token);
      } else if (tn === $.EM || tn === $.TT) {
        callAdoptionAgency(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 3:
      if (tn === $.BIG) {
        callAdoptionAgency(p, token);
      } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
        addressEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 4:
      if (tn === $.BODY) {
        bodyEndTagInBody(p, token);
      } else if (tn === $.HTML) {
        htmlEndTagInBody(p, token);
      } else if (tn === $.FORM) {
        formEndTagInBody(p, token);
      } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
        callAdoptionAgency(p, token);
      } else if (tn === $.MAIN || tn === $.MENU) {
        addressEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 5:
      if (tn === $.ASIDE) {
        addressEndTagInBody(p, token);
      } else if (tn === $.SMALL) {
        callAdoptionAgency(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 6:
      if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
        addressEndTagInBody(p, token);
      } else if (tn === $.APPLET || tn === $.OBJECT) {
        appletEndTagInBody(p, token);
      } else if (tn === $.STRIKE || tn === $.STRONG) {
        callAdoptionAgency(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 7:
      if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY || tn === $.LISTING) {
        addressEndTagInBody(p, token);
      } else if (tn === $.MARQUEE) {
        appletEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 8:
      if (tn === $.FIELDSET) {
        addressEndTagInBody(p, token);
      } else if (tn === $.TEMPLATE) {
        endTagInHead(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    case 10:
      if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
        addressEndTagInBody(p, token);
      } else {
        genericEndTagInBody(p, token);
      }

      break;

    default:
      genericEndTagInBody(p, token);
  }
}

function eofInBody(p, token) {
  if (p.tmplInsertionModeStackTop > -1) {
    eofInTemplate(p, token);
  } else {
    p.stopped = true;
  }
}

function endTagInText(p, token) {
  if (token.tagName === $.SCRIPT) {
    p.pendingScript = p.openElements.current;
  }

  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
}

function eofInText(p, token) {
  p._err(ERR.eofInElementThatCanContainOnlyText);

  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;

  p._processToken(token);
}

function characterInTable(p, token) {
  var curTn = p.openElements.currentTagName;

  if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
    p.pendingCharacterTokens = [];
    p.hasNonWhitespacePendingCharacterToken = false;
    p.originalInsertionMode = p.insertionMode;
    p.insertionMode = IN_TABLE_TEXT_MODE;

    p._processToken(token);
  } else {
    tokenInTable(p, token);
  }
}

function captionStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p.activeFormattingElements.insertMarker();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_CAPTION_MODE;
}

function colgroupStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_COLUMN_GROUP_MODE;
}

function colStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertFakeElement($.COLGROUP);

  p.insertionMode = IN_COLUMN_GROUP_MODE;

  p._processToken(token);
}

function tbodyStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_TABLE_BODY_MODE;
}

function tdStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertFakeElement($.TBODY);

  p.insertionMode = IN_TABLE_BODY_MODE;

  p._processToken(token);
}

function tableStartTagInTable(p, token) {
  if (p.openElements.hasInTableScope($.TABLE)) {
    p.openElements.popUntilTagNamePopped($.TABLE);

    p._resetInsertionMode();

    p._processToken(token);
  }
}

function inputStartTagInTable(p, token) {
  var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

  if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
    p._appendElement(token, NS.HTML);
  } else {
    tokenInTable(p, token);
  }

  token.ackSelfClosing = true;
}

function formStartTagInTable(p, token) {
  if (!p.formElement && p.openElements.tmplCount === 0) {
    p._insertElement(token, NS.HTML);

    p.formElement = p.openElements.current;
    p.openElements.pop();
  }
}

function startTagInTable(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 2:
      if (tn === $.TD || tn === $.TH || tn === $.TR) {
        tdStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 3:
      if (tn === $.COL) {
        colStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 4:
      if (tn === $.FORM) {
        formStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 5:
      if (tn === $.TABLE) {
        tableStartTagInTable(p, token);
      } else if (tn === $.STYLE) {
        startTagInHead(p, token);
      } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        tbodyStartTagInTable(p, token);
      } else if (tn === $.INPUT) {
        inputStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 6:
      if (tn === $.SCRIPT) {
        startTagInHead(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 7:
      if (tn === $.CAPTION) {
        captionStartTagInTable(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    case 8:
      if (tn === $.COLGROUP) {
        colgroupStartTagInTable(p, token);
      } else if (tn === $.TEMPLATE) {
        startTagInHead(p, token);
      } else {
        tokenInTable(p, token);
      }

      break;

    default:
      tokenInTable(p, token);
  }
}

function endTagInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.TABLE)) {
      p.openElements.popUntilTagNamePopped($.TABLE);

      p._resetInsertionMode();
    }
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
    tokenInTable(p, token);
  }
}

function tokenInTable(p, token) {
  var savedFosterParentingState = p.fosterParentingEnabled;
  p.fosterParentingEnabled = true;

  p._processTokenInBodyMode(token);

  p.fosterParentingEnabled = savedFosterParentingState;
}

function whitespaceCharacterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
}

function characterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
  p.hasNonWhitespacePendingCharacterToken = true;
}

function tokenInTableText(p, token) {
  var i = 0;

  if (p.hasNonWhitespacePendingCharacterToken) {
    for (; i < p.pendingCharacterTokens.length; i++) {
      tokenInTable(p, p.pendingCharacterTokens[i]);
    }
  } else {
    for (; i < p.pendingCharacterTokens.length; i++) {
      p._insertCharacters(p.pendingCharacterTokens[i]);
    }
  }

  p.insertionMode = p.originalInsertionMode;

  p._processToken(token);
}

function startTagInCaption(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped($.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else {
    startTagInBody(p, token);
  }
}

function endTagInCaption(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped($.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_TABLE_MODE;

      if (tn === $.TABLE) {
        p._processToken(token);
      }
    }
  } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
    endTagInBody(p, token);
  }
}

function startTagInColumnGroup(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.COL) {
    p._appendElement(token, NS.HTML);

    token.ackSelfClosing = true;
  } else if (tn === $.TEMPLATE) {
    startTagInHead(p, token);
  } else {
    tokenInColumnGroup(p, token);
  }
}

function endTagInColumnGroup(p, token) {
  var tn = token.tagName;

  if (tn === $.COLGROUP) {
    if (p.openElements.currentTagName === $.COLGROUP) {
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  } else if (tn !== $.COL) {
    tokenInColumnGroup(p, token);
  }
}

function tokenInColumnGroup(p, token) {
  if (p.openElements.currentTagName === $.COLGROUP) {
    p.openElements.pop();
    p.insertionMode = IN_TABLE_MODE;

    p._processToken(token);
  }
}

function startTagInTableBody(p, token) {
  var tn = token.tagName;

  if (tn === $.TR) {
    p.openElements.clearBackToTableBodyContext();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_ROW_MODE;
  } else if (tn === $.TH || tn === $.TD) {
    p.openElements.clearBackToTableBodyContext();

    p._insertFakeElement($.TR);

    p.insertionMode = IN_ROW_MODE;

    p._processToken(token);
  } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasTableBodyContextInTableScope()) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else {
    startTagInTable(p, token);
  }
}

function endTagInTableBody(p, token) {
  var tn = token.tagName;

  if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $.TABLE) {
    if (p.openElements.hasTableBodyContextInTableScope()) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
    endTagInTable(p, token);
  }
}

function startTagInRow(p, token) {
  var tn = token.tagName;

  if (tn === $.TH || tn === $.TD) {
    p.openElements.clearBackToTableRowContext();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_CELL_MODE;
    p.activeFormattingElements.insertMarker();
  } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else {
    startTagInTable(p, token);
  }
}

function endTagInRow(p, token) {
  var tn = token.tagName;

  if (tn === $.TR) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;
    }
  } else if (tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
    endTagInTable(p, token);
  }
}

function startTagInCell(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
      p._closeTableCell();

      p._processToken(token);
    }
  } else {
    startTagInBody(p, token);
  }
}

function endTagInCell(p, token) {
  var tn = token.tagName;

  if (tn === $.TD || tn === $.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(tn);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_ROW_MODE;
    }
  } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope(tn)) {
      p._closeTableCell();

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
    endTagInBody(p, token);
  }
}

function startTagInSelect(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.OPTION) {
    if (p.openElements.currentTagName === $.OPTION) {
      p.openElements.pop();
    }

    p._insertElement(token, NS.HTML);
  } else if (tn === $.OPTGROUP) {
    if (p.openElements.currentTagName === $.OPTION) {
      p.openElements.pop();
    }

    if (p.openElements.currentTagName === $.OPTGROUP) {
      p.openElements.pop();
    }

    p._insertElement(token, NS.HTML);
  } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
    if (p.openElements.hasInSelectScope($.SELECT)) {
      p.openElements.popUntilTagNamePopped($.SELECT);

      p._resetInsertionMode();

      if (tn !== $.SELECT) {
        p._processToken(token);
      }
    }
  } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
    startTagInHead(p, token);
  }
}

function endTagInSelect(p, token) {
  var tn = token.tagName;

  if (tn === $.OPTGROUP) {
    var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
    var prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

    if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
      p.openElements.pop();
    }

    if (p.openElements.currentTagName === $.OPTGROUP) {
      p.openElements.pop();
    }
  } else if (tn === $.OPTION) {
    if (p.openElements.currentTagName === $.OPTION) {
      p.openElements.pop();
    }
  } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
    p.openElements.popUntilTagNamePopped($.SELECT);

    p._resetInsertionMode();
  } else if (tn === $.TEMPLATE) {
    endTagInHead(p, token);
  }
}

function startTagInSelectInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
    p.openElements.popUntilTagNamePopped($.SELECT);

    p._resetInsertionMode();

    p._processToken(token);
  } else {
    startTagInSelect(p, token);
  }
}

function endTagInSelectInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.popUntilTagNamePopped($.SELECT);

      p._resetInsertionMode();

      p._processToken(token);
    }
  } else {
    endTagInSelect(p, token);
  }
}

function startTagInTemplate(p, token) {
  var tn = token.tagName;

  if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
    startTagInHead(p, token);
  } else {
    var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

    p._popTmplInsertionMode();

    p._pushTmplInsertionMode(newInsertionMode);

    p.insertionMode = newInsertionMode;

    p._processToken(token);
  }
}

function endTagInTemplate(p, token) {
  if (token.tagName === $.TEMPLATE) {
    endTagInHead(p, token);
  }
}

function eofInTemplate(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.popUntilTagNamePopped($.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();

    p._popTmplInsertionMode();

    p._resetInsertionMode();

    p._processToken(token);
  } else {
    p.stopped = true;
  }
}

function startTagAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterBody(p, token);
  }
}

function endTagAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    if (!p.fragmentContext) {
      p.insertionMode = AFTER_AFTER_BODY_MODE;
    }
  } else {
    tokenAfterBody(p, token);
  }
}

function tokenAfterBody(p, token) {
  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
}

function startTagInFrameset(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.FRAMESET) {
    p._insertElement(token, NS.HTML);
  } else if (tn === $.FRAME) {
    p._appendElement(token, NS.HTML);

    token.ackSelfClosing = true;
  } else if (tn === $.NOFRAMES) {
    startTagInHead(p, token);
  }
}

function endTagInFrameset(p, token) {
  if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
    p.openElements.pop();

    if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
      p.insertionMode = AFTER_FRAMESET_MODE;
    }
  }
}

function startTagAfterFrameset(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.NOFRAMES) {
    startTagInHead(p, token);
  }
}

function endTagAfterFrameset(p, token) {
  if (token.tagName === $.HTML) {
    p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
  }
}

function startTagAfterAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterAfterBody(p, token);
  }
}

function tokenAfterAfterBody(p, token) {
  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
}

function startTagAfterAfterFrameset(p, token) {
  var tn = token.tagName;

  if (tn === $.HTML) {
    startTagInBody(p, token);
  } else if (tn === $.NOFRAMES) {
    startTagInHead(p, token);
  }
}

function nullCharacterInForeignContent(p, token) {
  token.chars = unicode.REPLACEMENT_CHARACTER;

  p._insertCharacters(token);
}

function characterInForeignContent(p, token) {
  p._insertCharacters(token);

  p.framesetOk = false;
}

function startTagInForeignContent(p, token) {
  if (foreignContent.causesExit(token) && !p.fragmentContext) {
    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
      p.openElements.pop();
    }

    p._processToken(token);
  } else {
    var current = p._getAdjustedCurrentElement();

    var currentNs = p.treeAdapter.getNamespaceURI(current);

    if (currentNs === NS.MATHML) {
      foreignContent.adjustTokenMathMLAttrs(token);
    } else if (currentNs === NS.SVG) {
      foreignContent.adjustTokenSVGTagName(token);
      foreignContent.adjustTokenSVGAttrs(token);
    }

    foreignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing) {
      p._appendElement(token, currentNs);
    } else {
      p._insertElement(token, currentNs);
    }

    token.ackSelfClosing = true;
  }
}

function endTagInForeignContent(p, token) {
  for (var i = p.openElements.stackTop; i > 0; i--) {
    var element = p.openElements.items[i];

    if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
      p._processToken(token);

      break;
    }

    if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
      p.openElements.popUntilElementPopped(element);
      break;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlRva2VuaXplciIsInJlcXVpcmUiLCJPcGVuRWxlbWVudFN0YWNrIiwiRm9ybWF0dGluZ0VsZW1lbnRMaXN0IiwiTG9jYXRpb25JbmZvUGFyc2VyTWl4aW4iLCJFcnJvclJlcG9ydGluZ1BhcnNlck1peGluIiwiTWl4aW4iLCJkZWZhdWx0VHJlZUFkYXB0ZXIiLCJtZXJnZU9wdGlvbnMiLCJkb2N0eXBlIiwiZm9yZWlnbkNvbnRlbnQiLCJFUlIiLCJ1bmljb2RlIiwiSFRNTCIsIiQiLCJUQUdfTkFNRVMiLCJOUyIsIk5BTUVTUEFDRVMiLCJBVFRSUyIsIkRFRkFVTFRfT1BUSU9OUyIsInNjcmlwdGluZ0VuYWJsZWQiLCJzb3VyY2VDb2RlTG9jYXRpb25JbmZvIiwib25QYXJzZUVycm9yIiwidHJlZUFkYXB0ZXIiLCJISURERU5fSU5QVVRfVFlQRSIsIkFBX09VVEVSX0xPT1BfSVRFUiIsIkFBX0lOTkVSX0xPT1BfSVRFUiIsIklOSVRJQUxfTU9ERSIsIkJFRk9SRV9IVE1MX01PREUiLCJCRUZPUkVfSEVBRF9NT0RFIiwiSU5fSEVBRF9NT0RFIiwiSU5fSEVBRF9OT19TQ1JJUFRfTU9ERSIsIkFGVEVSX0hFQURfTU9ERSIsIklOX0JPRFlfTU9ERSIsIlRFWFRfTU9ERSIsIklOX1RBQkxFX01PREUiLCJJTl9UQUJMRV9URVhUX01PREUiLCJJTl9DQVBUSU9OX01PREUiLCJJTl9DT0xVTU5fR1JPVVBfTU9ERSIsIklOX1RBQkxFX0JPRFlfTU9ERSIsIklOX1JPV19NT0RFIiwiSU5fQ0VMTF9NT0RFIiwiSU5fU0VMRUNUX01PREUiLCJJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERSIsIklOX1RFTVBMQVRFX01PREUiLCJBRlRFUl9CT0RZX01PREUiLCJJTl9GUkFNRVNFVF9NT0RFIiwiQUZURVJfRlJBTUVTRVRfTU9ERSIsIkFGVEVSX0FGVEVSX0JPRFlfTU9ERSIsIkFGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREUiLCJJTlNFUlRJT05fTU9ERV9SRVNFVF9NQVAiLCJUUiIsIlRCT0RZIiwiVEhFQUQiLCJURk9PVCIsIkNBUFRJT04iLCJDT0xHUk9VUCIsIlRBQkxFIiwiQk9EWSIsIkZSQU1FU0VUIiwiVEVNUExBVEVfSU5TRVJUSU9OX01PREVfU1dJVENIX01BUCIsIkNPTCIsIlREIiwiVEgiLCJUT0tFTl9IQU5ETEVSUyIsIkNIQVJBQ1RFUl9UT0tFTiIsInRva2VuSW5Jbml0aWFsTW9kZSIsIk5VTExfQ0hBUkFDVEVSX1RPS0VOIiwiV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU4iLCJpZ25vcmVUb2tlbiIsIkNPTU1FTlRfVE9LRU4iLCJhcHBlbmRDb21tZW50IiwiRE9DVFlQRV9UT0tFTiIsImRvY3R5cGVJbkluaXRpYWxNb2RlIiwiU1RBUlRfVEFHX1RPS0VOIiwiRU5EX1RBR19UT0tFTiIsIkVPRl9UT0tFTiIsInRva2VuQmVmb3JlSHRtbCIsInN0YXJ0VGFnQmVmb3JlSHRtbCIsImVuZFRhZ0JlZm9yZUh0bWwiLCJ0b2tlbkJlZm9yZUhlYWQiLCJtaXNwbGFjZWREb2N0eXBlIiwic3RhcnRUYWdCZWZvcmVIZWFkIiwiZW5kVGFnQmVmb3JlSGVhZCIsInRva2VuSW5IZWFkIiwiaW5zZXJ0Q2hhcmFjdGVycyIsInN0YXJ0VGFnSW5IZWFkIiwiZW5kVGFnSW5IZWFkIiwidG9rZW5JbkhlYWROb1NjcmlwdCIsInN0YXJ0VGFnSW5IZWFkTm9TY3JpcHQiLCJlbmRUYWdJbkhlYWROb1NjcmlwdCIsInRva2VuQWZ0ZXJIZWFkIiwic3RhcnRUYWdBZnRlckhlYWQiLCJlbmRUYWdBZnRlckhlYWQiLCJjaGFyYWN0ZXJJbkJvZHkiLCJ3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5Iiwic3RhcnRUYWdJbkJvZHkiLCJlbmRUYWdJbkJvZHkiLCJlb2ZJbkJvZHkiLCJlbmRUYWdJblRleHQiLCJlb2ZJblRleHQiLCJjaGFyYWN0ZXJJblRhYmxlIiwic3RhcnRUYWdJblRhYmxlIiwiZW5kVGFnSW5UYWJsZSIsImNoYXJhY3RlckluVGFibGVUZXh0Iiwid2hpdGVzcGFjZUNoYXJhY3RlckluVGFibGVUZXh0IiwidG9rZW5JblRhYmxlVGV4dCIsInN0YXJ0VGFnSW5DYXB0aW9uIiwiZW5kVGFnSW5DYXB0aW9uIiwidG9rZW5JbkNvbHVtbkdyb3VwIiwic3RhcnRUYWdJbkNvbHVtbkdyb3VwIiwiZW5kVGFnSW5Db2x1bW5Hcm91cCIsInN0YXJ0VGFnSW5UYWJsZUJvZHkiLCJlbmRUYWdJblRhYmxlQm9keSIsInN0YXJ0VGFnSW5Sb3ciLCJlbmRUYWdJblJvdyIsInN0YXJ0VGFnSW5DZWxsIiwiZW5kVGFnSW5DZWxsIiwic3RhcnRUYWdJblNlbGVjdCIsImVuZFRhZ0luU2VsZWN0Iiwic3RhcnRUYWdJblNlbGVjdEluVGFibGUiLCJlbmRUYWdJblNlbGVjdEluVGFibGUiLCJzdGFydFRhZ0luVGVtcGxhdGUiLCJlbmRUYWdJblRlbXBsYXRlIiwiZW9mSW5UZW1wbGF0ZSIsInRva2VuQWZ0ZXJCb2R5IiwiYXBwZW5kQ29tbWVudFRvUm9vdEh0bWxFbGVtZW50Iiwic3RhcnRUYWdBZnRlckJvZHkiLCJlbmRUYWdBZnRlckJvZHkiLCJzdG9wUGFyc2luZyIsInN0YXJ0VGFnSW5GcmFtZXNldCIsImVuZFRhZ0luRnJhbWVzZXQiLCJzdGFydFRhZ0FmdGVyRnJhbWVzZXQiLCJlbmRUYWdBZnRlckZyYW1lc2V0IiwidG9rZW5BZnRlckFmdGVyQm9keSIsImFwcGVuZENvbW1lbnRUb0RvY3VtZW50Iiwic3RhcnRUYWdBZnRlckFmdGVyQm9keSIsInN0YXJ0VGFnQWZ0ZXJBZnRlckZyYW1lc2V0IiwiUGFyc2VyIiwib3B0aW9ucyIsInBlbmRpbmdTY3JpcHQiLCJpbnN0YWxsIiwiaHRtbCIsImRvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnQiLCJfYm9vdHN0cmFwIiwidG9rZW5pemVyIiwid3JpdGUiLCJfcnVuUGFyc2luZ0xvb3AiLCJmcmFnbWVudENvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiVEVNUExBVEUiLCJkb2N1bWVudE1vY2siLCJnZXRUYWdOYW1lIiwiX3B1c2hUbXBsSW5zZXJ0aW9uTW9kZSIsIl9pbml0VG9rZW5pemVyRm9yRnJhZ21lbnRQYXJzaW5nIiwiX2luc2VydEZha2VSb290RWxlbWVudCIsIl9yZXNldEluc2VydGlvbk1vZGUiLCJfZmluZEZvcm1JbkZyYWdtZW50Q29udGV4dCIsInJvb3RFbGVtZW50IiwiZ2V0Rmlyc3RDaGlsZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIl9hZG9wdE5vZGVzIiwic3RvcHBlZCIsImluc2VydGlvbk1vZGUiLCJvcmlnaW5hbEluc2VydGlvbk1vZGUiLCJoZWFkRWxlbWVudCIsImZvcm1FbGVtZW50Iiwib3BlbkVsZW1lbnRzIiwiYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzIiwidG1wbEluc2VydGlvbk1vZGVTdGFjayIsInRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3AiLCJjdXJyZW50VG1wbEluc2VydGlvbk1vZGUiLCJwZW5kaW5nQ2hhcmFjdGVyVG9rZW5zIiwiaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbiIsImZyYW1lc2V0T2siLCJza2lwTmV4dE5ld0xpbmUiLCJmb3N0ZXJQYXJlbnRpbmdFbmFibGVkIiwic2NyaXB0SGFuZGxlciIsIl9zZXR1cFRva2VuaXplckNEQVRBTW9kZSIsInRva2VuIiwiZ2V0TmV4dFRva2VuIiwidHlwZSIsIkhJQkVSTkFUSU9OX1RPS0VOIiwiY2hhcnMiLCJsZW5ndGgiLCJzdWJzdHIiLCJfcHJvY2Vzc0lucHV0VG9rZW4iLCJ3cml0ZUNhbGxiYWNrIiwic2NyaXB0IiwiY3VycmVudCIsIl9nZXRBZGp1c3RlZEN1cnJlbnRFbGVtZW50IiwiYWxsb3dDREFUQSIsImdldE5hbWVzcGFjZVVSSSIsIl9pc0ludGVncmF0aW9uUG9pbnQiLCJjdXJyZW50VG9rZW4iLCJuZXh0VG9rZW5pemVyU3RhdGUiLCJfaW5zZXJ0RWxlbWVudCIsInN0YXRlIiwiTU9ERSIsIlBMQUlOVEVYVCIsInN0YWNrVG9wIiwibm9kZSIsIkZPUk0iLCJnZXRQYXJlbnROb2RlIiwidG4iLCJUSVRMRSIsIlRFWFRBUkVBIiwiUkNEQVRBIiwiU1RZTEUiLCJYTVAiLCJJRlJBTUUiLCJOT0VNQkVEIiwiTk9GUkFNRVMiLCJOT1NDUklQVCIsIlJBV1RFWFQiLCJTQ1JJUFQiLCJTQ1JJUFRfREFUQSIsIm5hbWUiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwic2V0RG9jdW1lbnRUeXBlIiwiZWxlbWVudCIsIl9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbiIsIl9mb3N0ZXJQYXJlbnRFbGVtZW50IiwicGFyZW50IiwiY3VycmVudFRtcGxDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJuYW1lc3BhY2VVUkkiLCJ0YWdOYW1lIiwiYXR0cnMiLCJfYXR0YWNoRWxlbWVudFRvVHJlZSIsInB1c2giLCJ0bXBsIiwiY29udGVudCIsInNldFRlbXBsYXRlQ29udGVudCIsImNvbW1lbnROb2RlIiwiY3JlYXRlQ29tbWVudE5vZGUiLCJkYXRhIiwiX2Zvc3RlclBhcmVudFRleHQiLCJpbnNlcnRUZXh0IiwiZG9ub3IiLCJyZWNpcGllbnQiLCJjaGlsZCIsImRldGFjaE5vZGUiLCJucyIsIkFOTk9UQVRJT05fWE1MIiwiTUFUSE1MIiwiU1ZHIiwiaXNDaGFyYWN0ZXJUb2tlbiIsImlzTWF0aE1MVGV4dFN0YXJ0VGFnIiwiTUdMWVBIIiwiTUFMSUdOTUFSSyIsImNoYXJhY3RlckluRm9yZWlnbkNvbnRlbnQiLCJudWxsQ2hhcmFjdGVySW5Gb3JlaWduQ29udGVudCIsInN0YXJ0VGFnSW5Gb3JlaWduQ29udGVudCIsImVuZFRhZ0luRm9yZWlnbkNvbnRlbnQiLCJfc2hvdWxkUHJvY2Vzc1Rva2VuSW5Gb3JlaWduQ29udGVudCIsIl9wcm9jZXNzVG9rZW5JbkZvcmVpZ25Db250ZW50IiwiX3Byb2Nlc3NUb2tlbiIsInNlbGZDbG9zaW5nIiwiYWNrU2VsZkNsb3NpbmciLCJfZXJyIiwibm9uVm9pZEh0bWxFbGVtZW50U3RhcnRUYWdXaXRoVHJhaWxpbmdTb2xpZHVzIiwiZm9yZWlnbk5TIiwiZ2V0QXR0ckxpc3QiLCJpc0ludGVncmF0aW9uUG9pbnQiLCJsaXN0TGVuZ3RoIiwidW5vcGVuSWR4IiwiZW50cnkiLCJlbnRyaWVzIiwiTUFSS0VSX0VOVFJZIiwiY29udGFpbnMiLCJpIiwiZ2VuZXJhdGVJbXBsaWVkRW5kVGFncyIsInBvcFVudGlsVGFibGVDZWxsUG9wcGVkIiwiY2xlYXJUb0xhc3RNYXJrZXIiLCJnZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbiIsIlAiLCJwb3BVbnRpbFRhZ05hbWVQb3BwZWQiLCJsYXN0IiwiaXRlbXMiLCJuZXdJbnNlcnRpb25Nb2RlIiwiSEVBRCIsIlNFTEVDVCIsIl9yZXNldEluc2VydGlvbk1vZGVGb3JTZWxlY3QiLCJzZWxlY3RJZHgiLCJhbmNlc3RvciIsIm1vZGUiLCJwb3AiLCJfaXNFbGVtZW50Q2F1c2VzRm9zdGVyUGFyZW50aW5nIiwibG9jYXRpb24iLCJiZWZvcmVFbGVtZW50Iiwib3BlbkVsZW1lbnQiLCJnZXRUZW1wbGF0ZUNvbnRlbnQiLCJfZmluZEZvc3RlclBhcmVudGluZ0xvY2F0aW9uIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0VGV4dEJlZm9yZSIsIlNQRUNJQUxfRUxFTUVOVFMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWFPYnRhaW5Gb3JtYXR0aW5nRWxlbWVudEVudHJ5IiwicCIsImZvcm1hdHRpbmdFbGVtZW50RW50cnkiLCJnZXRFbGVtZW50RW50cnlJblNjb3BlV2l0aFRhZ05hbWUiLCJyZW1vdmVFbnRyeSIsImhhc0luU2NvcGUiLCJnZW5lcmljRW5kVGFnSW5Cb2R5IiwiYWFPYnRhaW5GdXJ0aGVzdEJsb2NrIiwiZnVydGhlc3RCbG9jayIsIl9pc1NwZWNpYWxFbGVtZW50IiwicG9wVW50aWxFbGVtZW50UG9wcGVkIiwiYWFJbm5lckxvb3AiLCJmb3JtYXR0aW5nRWxlbWVudCIsImxhc3RFbGVtZW50IiwibmV4dEVsZW1lbnQiLCJnZXRDb21tb25BbmNlc3RvciIsImVsZW1lbnRFbnRyeSIsImdldEVsZW1lbnRFbnRyeSIsImNvdW50ZXJPdmVyZmxvdyIsInNob3VsZFJlbW92ZUZyb21PcGVuRWxlbWVudHMiLCJyZW1vdmUiLCJhYVJlY3JlYXRlRWxlbWVudEZyb21FbnRyeSIsImJvb2ttYXJrIiwibmV3RWxlbWVudCIsInJlcGxhY2UiLCJhYUluc2VydExhc3ROb2RlSW5Db21tb25BbmNlc3RvciIsImNvbW1vbkFuY2VzdG9yIiwiYWFSZXBsYWNlRm9ybWF0dGluZ0VsZW1lbnQiLCJpbnNlcnRFbGVtZW50QWZ0ZXJCb29rbWFyayIsImluc2VydEFmdGVyIiwiY2FsbEFkb3B0aW9uQWdlbmN5IiwiX2FwcGVuZENvbW1lbnROb2RlIiwiX2luc2VydENoYXJhY3RlcnMiLCJfc2V0RG9jdW1lbnRUeXBlIiwiZm9yY2VRdWlya3MiLCJET0NVTUVOVF9NT0RFIiwiUVVJUktTIiwiZ2V0RG9jdW1lbnRNb2RlIiwiaXNDb25mb3JtaW5nIiwibm9uQ29uZm9ybWluZ0RvY3R5cGUiLCJzZXREb2N1bWVudE1vZGUiLCJtaXNzaW5nRG9jdHlwZSIsImJlZm9yZVRva2VuIiwiQlIiLCJlbmRUYWdXaXRob3V0TWF0Y2hpbmdPcGVuRWxlbWVudCIsIl9pbnNlcnRGYWtlRWxlbWVudCIsIkJBU0UiLCJCQVNFRk9OVCIsIkJHU09VTkQiLCJMSU5LIiwiTUVUQSIsIl9hcHBlbmRFbGVtZW50IiwiX3N3aXRjaFRvVGV4dFBhcnNpbmciLCJfaW5zZXJ0VGVtcGxhdGUiLCJpbnNlcnRNYXJrZXIiLCJtaXNwbGFjZWRTdGFydFRhZ0ZvckhlYWRFbGVtZW50IiwidG1wbENvdW50IiwiZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1Rob3JvdWdobHkiLCJjdXJyZW50VGFnTmFtZSIsImNsb3NpbmdPZkVsZW1lbnRXaXRoT3BlbkNoaWxkRWxlbWVudHMiLCJfcG9wVG1wbEluc2VydGlvbk1vZGUiLCJuZXN0ZWROb3NjcmlwdEluSGVhZCIsImVyckNvZGUiLCJvcGVuRWxlbWVudHNMZWZ0QWZ0ZXJFb2YiLCJkaXNhbGxvd2VkQ29udGVudEluTm9zY3JpcHRJbkhlYWQiLCJhYmFuZG9uZWRIZWFkRWxlbWVudENoaWxkIiwiX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzIiwiaHRtbFN0YXJ0VGFnSW5Cb2R5IiwiYWRvcHRBdHRyaWJ1dGVzIiwiYm9keVN0YXJ0VGFnSW5Cb2R5IiwiYm9keUVsZW1lbnQiLCJ0cnlQZWVrUHJvcGVybHlOZXN0ZWRCb2R5RWxlbWVudCIsImZyYW1lc2V0U3RhcnRUYWdJbkJvZHkiLCJwb3BBbGxVcFRvSHRtbEVsZW1lbnQiLCJhZGRyZXNzU3RhcnRUYWdJbkJvZHkiLCJoYXNJbkJ1dHRvblNjb3BlIiwiX2Nsb3NlUEVsZW1lbnQiLCJudW1iZXJlZEhlYWRlclN0YXJ0VGFnSW5Cb2R5IiwiSDEiLCJIMiIsIkgzIiwiSDQiLCJINSIsIkg2IiwicHJlU3RhcnRUYWdJbkJvZHkiLCJmb3JtU3RhcnRUYWdJbkJvZHkiLCJpblRlbXBsYXRlIiwibGlzdEl0ZW1TdGFydFRhZ0luQm9keSIsImVsZW1lbnRUbiIsImNsb3NlVG4iLCJMSSIsIkREIiwiRFQiLCJBRERSRVNTIiwiRElWIiwicGxhaW50ZXh0U3RhcnRUYWdJbkJvZHkiLCJidXR0b25TdGFydFRhZ0luQm9keSIsIkJVVFRPTiIsImFTdGFydFRhZ0luQm9keSIsImFjdGl2ZUVsZW1lbnRFbnRyeSIsIkEiLCJwdXNoRWxlbWVudCIsImJTdGFydFRhZ0luQm9keSIsIm5vYnJTdGFydFRhZ0luQm9keSIsIk5PQlIiLCJhcHBsZXRTdGFydFRhZ0luQm9keSIsInRhYmxlU3RhcnRUYWdJbkJvZHkiLCJhcmVhU3RhcnRUYWdJbkJvZHkiLCJpbnB1dFN0YXJ0VGFnSW5Cb2R5IiwiaW5wdXRUeXBlIiwiZ2V0VG9rZW5BdHRyIiwiVFlQRSIsInRvTG93ZXJDYXNlIiwicGFyYW1TdGFydFRhZ0luQm9keSIsImhyU3RhcnRUYWdJbkJvZHkiLCJpbWFnZVN0YXJ0VGFnSW5Cb2R5IiwiSU1HIiwidGV4dGFyZWFTdGFydFRhZ0luQm9keSIsInhtcFN0YXJ0VGFnSW5Cb2R5IiwiaWZyYW1lU3RhcnRUYWdJbkJvZHkiLCJub2VtYmVkU3RhcnRUYWdJbkJvZHkiLCJzZWxlY3RTdGFydFRhZ0luQm9keSIsIm9wdGdyb3VwU3RhcnRUYWdJbkJvZHkiLCJPUFRJT04iLCJyYlN0YXJ0VGFnSW5Cb2R5IiwiUlVCWSIsInJ0U3RhcnRUYWdJbkJvZHkiLCJSVEMiLCJtZW51U3RhcnRUYWdJbkJvZHkiLCJtYXRoU3RhcnRUYWdJbkJvZHkiLCJhZGp1c3RUb2tlbk1hdGhNTEF0dHJzIiwiYWRqdXN0VG9rZW5YTUxBdHRycyIsInN2Z1N0YXJ0VGFnSW5Cb2R5IiwiYWRqdXN0VG9rZW5TVkdBdHRycyIsImdlbmVyaWNTdGFydFRhZ0luQm9keSIsIkkiLCJTIiwiQiIsIlUiLCJETCIsIk9MIiwiVUwiLCJFTSIsIlRUIiwiSFIiLCJSQiIsIlJUIiwiUlAiLCJESVIiLCJOQVYiLCJQUkUiLCJCSUciLCJXQlIiLCJNQUlOIiwiTUVOVSIsIkNPREUiLCJGT05UIiwiQVJFQSIsIk1BVEgiLCJBU0lERSIsIlNNQUxMIiwiRU1CRUQiLCJJTlBVVCIsIlBBUkFNIiwiVFJBQ0siLCJJTUFHRSIsIkZSQU1FIiwiQ0VOVEVSIiwiRklHVVJFIiwiRk9PVEVSIiwiSEVBREVSIiwiSEdST1VQIiwiRElBTE9HIiwiU1RSSUtFIiwiU1RST05HIiwiQVBQTEVUIiwiT0JKRUNUIiwiS0VZR0VOIiwiU09VUkNFIiwiREVUQUlMUyIsIkFSVElDTEUiLCJTRUNUSU9OIiwiU1VNTUFSWSIsIkxJU1RJTkciLCJNQVJRVUVFIiwiRklFTERTRVQiLCJPUFRHUk9VUCIsIkJMT0NLUVVPVEUiLCJGSUdDQVBUSU9OIiwiYm9keUVuZFRhZ0luQm9keSIsImh0bWxFbmRUYWdJbkJvZHkiLCJhZGRyZXNzRW5kVGFnSW5Cb2R5IiwiZm9ybUVuZFRhZ0luQm9keSIsInBFbmRUYWdJbkJvZHkiLCJsaUVuZFRhZ0luQm9keSIsImhhc0luTGlzdEl0ZW1TY29wZSIsImRkRW5kVGFnSW5Cb2R5IiwibnVtYmVyZWRIZWFkZXJFbmRUYWdJbkJvZHkiLCJoYXNOdW1iZXJlZEhlYWRlckluU2NvcGUiLCJwb3BVbnRpbE51bWJlcmVkSGVhZGVyUG9wcGVkIiwiYXBwbGV0RW5kVGFnSW5Cb2R5IiwiYnJFbmRUYWdJbkJvZHkiLCJlb2ZJbkVsZW1lbnRUaGF0Q2FuQ29udGFpbk9ubHlUZXh0IiwiY3VyVG4iLCJ0b2tlbkluVGFibGUiLCJjYXB0aW9uU3RhcnRUYWdJblRhYmxlIiwiY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQiLCJjb2xncm91cFN0YXJ0VGFnSW5UYWJsZSIsImNvbFN0YXJ0VGFnSW5UYWJsZSIsInRib2R5U3RhcnRUYWdJblRhYmxlIiwidGRTdGFydFRhZ0luVGFibGUiLCJ0YWJsZVN0YXJ0VGFnSW5UYWJsZSIsImhhc0luVGFibGVTY29wZSIsImlucHV0U3RhcnRUYWdJblRhYmxlIiwiZm9ybVN0YXJ0VGFnSW5UYWJsZSIsInNhdmVkRm9zdGVyUGFyZW50aW5nU3RhdGUiLCJfcHJvY2Vzc1Rva2VuSW5Cb2R5TW9kZSIsImNsZWFyQmFja1RvVGFibGVCb2R5Q29udGV4dCIsImhhc1RhYmxlQm9keUNvbnRleHRJblRhYmxlU2NvcGUiLCJjbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCIsIl9jbG9zZVRhYmxlQ2VsbCIsImhhc0luU2VsZWN0U2NvcGUiLCJwcmV2T3BlbkVsZW1lbnQiLCJwcmV2T3BlbkVsZW1lbnRUbiIsImlzUm9vdEh0bWxFbGVtZW50Q3VycmVudCIsIlJFUExBQ0VNRU5UX0NIQVJBQ1RFUiIsImNhdXNlc0V4aXQiLCJjdXJyZW50TnMiLCJhZGp1c3RUb2tlblNWR1RhZ05hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQXpCOztBQUNBLElBQU1DLGdCQUFnQixHQUFHRCxPQUFPLENBQUMsc0JBQUQsQ0FBaEM7O0FBQ0EsSUFBTUUscUJBQXFCLEdBQUdGLE9BQU8sQ0FBQywyQkFBRCxDQUFyQzs7QUFDQSxJQUFNRyx1QkFBdUIs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QUFDdWEsbUJBQWYsQ0FBbUM1UCxLQUFuQzs7QUFFQSxRQUFJQSxLQUFLLENBQUNnRixXQUFWLEVBQXVCO0FBQ25CMEMsTUFBQUEsQ0FBQyxDQUFDa0QsY0FBRixDQUFpQjVLLEtBQWpCLEVBQXdCNFYsU0FBeEI7QUFDSCxLQUZELE1BRU87QUFDSGxPLE1BQUFBLENBQUMsQ0FBQ3pHLGNBQUYsQ0FBaUJqQixLQUFqQixFQUF3QjRWLFNBQXhCO0FBQ0g7O0FBRUQ1VixJQUFBQSxLQUFLLENBQUNpRixjQUFOLEdBQXVCLElBQXZCO0FBQ0g7QUFDSjs7QUFFRCxTQUFTTCxzQkFBVCxDQUFnQzhDLENBQWhDLEVBQW1DMUgsS0FBbkMsRUFBMEM7QUFDdEMsT0FBSyxJQUFJNkYsQ0FBQyxHQUFHNkIsQ0FBQyxDQUFDdEksWUFBRixDQUFlaUMsUUFBNUIsRUFBc0N3RSxDQUFDLEdBQUcsQ0FBMUMsRUFBNkNBLENBQUMsRUFBOUMsRUFBa0Q7QUFDOUMsUUFBTW5ELE9BQU8sR0FBR2dGLENBQUMsQ0FBQ3RJLFlBQUYsQ0FBZWlILEtBQWYsQ0FBcUJSLENBQXJCLENBQWhCOztBQUVBLFFBQUk2QixDQUFDLENBQUN4UixXQUFGLENBQWMySyxlQUFkLENBQThCNkIsT0FBOUIsTUFBMkMvTSxFQUFFLENBQUNILElBQWxELEVBQXdEO0FBQ3BEa1MsTUFBQUEsQ0FBQyxDQUFDM0MsYUFBRixDQUFnQi9FLEtBQWhCOztBQUNBO0FBQ0g7O0FBRUQsUUFBSTBILENBQUMsQ0FBQ3hSLFdBQUYsQ0FBY2tJLFVBQWQsQ0FBeUJzRSxPQUF6QixFQUFrQytMLFdBQWxDLE9BQW9Eek8sS0FBSyxDQUFDaUQsT0FBOUQsRUFBdUU7QUFDbkV5RSxNQUFBQSxDQUFDLENBQUN0SSxZQUFGLENBQWUrSSxxQkFBZixDQUFxQ3pGLE9BQXJDO0FBQ0E7QUFDSDtBQUNKO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRva2VuaXplciA9IHJlcXVpcmUoJy4uL3Rva2VuaXplcicpO1xuY29uc3QgT3BlbkVsZW1lbnRTdGFjayA9IHJlcXVpcmUoJy4vb3Blbi1lbGVtZW50LXN0YWNrJyk7XG5jb25zdCBGb3JtYXR0aW5nRWxlbWVudExpc3QgPSByZXF1aXJlKCcuL2Zvcm1hdHRpbmctZWxlbWVudC1saXN0Jyk7XG5jb25zdCBMb2NhdGlvbkluZm9QYXJzZXJNaXhpbiA9IHJlcXVpcmUoJy4uL2V4dGVuc2lvbnMvbG9jYXRpb24taW5mby9wYXJzZXItbWl4aW4nKTtcbmNvbnN0IEVycm9yUmVwb3J0aW5nUGFyc2VyTWl4aW4gPSByZXF1aXJlKCcuLi9leHRlbnNpb25zL2Vycm9yLXJlcG9ydGluZy9wYXJzZXItbWl4aW4nKTtcbmNvbnN0IE1peGluID0gcmVxdWlyZSgnLi4vdXRpbHMvbWl4aW4nKTtcbmNvbnN0IGRlZmF1bHRUcmVlQWRhcHRlciA9IHJlcXVpcmUoJy4uL3RyZWUtYWRhcHRlcnMvZGVmYXVsdCcpO1xuY29uc3QgbWVyZ2VPcHRpb25zID0gcmVxdWlyZSgnLi4vdXRpbHMvbWVyZ2Utb3B0aW9ucycpO1xuY29uc3QgZG9jdHlwZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9kb2N0eXBlJyk7XG5jb25zdCBmb3JlaWduQ29udGVudCA9IHJlcXVpcmUoJy4uL2NvbW1vbi9mb3JlaWduLWNvbnRlbnQnKTtcbmNvbnN0IEVSUiA9IHJlcXVpcmUoJy4uL2NvbW1vbi9lcnJvci1jb2RlcycpO1xuY29uc3QgdW5pY29kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi91bmljb2RlJyk7XG5jb25zdCBIVE1MID0gcmVxdWlyZSgnLi4vY29tbW9uL2h0bWwnKTtcblxuLy9BbGlhc2VzXG5jb25zdCAkID0gSFRNTC5UQUdfTkFNRVM7XG5jb25zdCBOUyA9IEhUTUwuTkFNRVNQQUNFUztcbmNvbnN0IEFUVFJTID0gSFRNTC5BVFRSUztcblxuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIHNjcmlwdGluZ0VuYWJsZWQ6IHRydWUsXG4gICAgc291cmNlQ29kZUxvY2F0aW9uSW5mbzogZmFsc2UsXG4gICAgb25QYXJzZUVycm9yOiBudWxsLFxuICAgIHRyZWVBZGFwdGVyOiBkZWZhdWx0VHJlZUFkYXB0ZXJcbn07XG5cbi8vTWlzYyBjb25zdGFudHNcbmNvbnN0IEhJRERFTl9JTlBVVF9UWVBFID0gJ2hpZGRlbic7XG5cbi8vQWRvcHRpb24gYWdlbmN5IGxvb3BzIGl0ZXJhdGlvbiBjb3VudFxuY29uc3QgQUFfT1VURVJfTE9PUF9JVEVSID0gODtcbmNvbnN0IEFBX0lOTkVSX0xPT1BfSVRFUiA9IDM7XG5cbi8vSW5zZXJ0aW9uIG1vZGVzXG5jb25zdCBJTklUSUFMX01PREUgPSAnSU5JVElBTF9NT0RFJztcbmNvbnN0IEJFRk9SRV9IVE1MX01PREUgPSAnQkVGT1JFX0hUTUxfTU9ERSc7XG5jb25zdCBCRUZPUkVfSEVBRF9NT0RFID0gJ0JFRk9SRV9IRUFEX01PREUnO1xuY29uc3QgSU5fSEVBRF9NT0RFID0gJ0lOX0hFQURfTU9ERSc7XG5jb25zdCBJTl9IRUFEX05PX1NDUklQVF9NT0RFID0gJ0lOX0hFQURfTk9fU0NSSVBUX01PREUnO1xuY29uc3QgQUZURVJfSEVBRF9NT0RFID0gJ0FGVEVSX0hFQURfTU9ERSc7XG5jb25zdCBJTl9CT0RZX01PREUgPSAnSU5fQk9EWV9NT0RFJztcbmNvbnN0IFRFWFRfTU9ERSA9ICdURVhUX01PREUnO1xuY29uc3QgSU5fVEFCTEVfTU9ERSA9ICdJTl9UQUJMRV9NT0RFJztcbmNvbnN0IElOX1RBQkxFX1RFWFRfTU9ERSA9ICdJTl9UQUJMRV9URVhUX01PREUnO1xuY29uc3QgSU5fQ0FQVElPTl9NT0RFID0gJ0lOX0NBUFRJT05fTU9ERSc7XG5jb25zdCBJTl9DT0xVTU5fR1JPVVBfTU9ERSA9ICdJTl9DT0xVTU5fR1JPVVBfTU9ERSc7XG5jb25zdCBJTl9UQUJMRV9CT0RZX01PREUgPSAnSU5fVEFCTEVfQk9EWV9NT0RFJztcbmNvbnN0IElOX1JPV19NT0RFID0gJ0lOX1JPV19NT0RFJztcbmNvbnN0IElOX0NFTExfTU9ERSA9ICdJTl9DRUxMX01PREUnO1xuY29uc3QgSU5fU0VMRUNUX01PREUgPSAnSU5fU0VMRUNUX01PREUnO1xuY29uc3QgSU5fU0VMRUNUX0lOX1RBQkxFX01PREUgPSAnSU5fU0VMRUNUX0lOX1RBQkxFX01PREUnO1xuY29uc3QgSU5fVEVNUExBVEVfTU9ERSA9ICdJTl9URU1QTEFURV9NT0RFJztcbmNvbnN0IEFGVEVSX0JPRFlfTU9ERSA9ICdBRlRFUl9CT0RZX01PREUnO1xuY29uc3QgSU5fRlJBTUVTRVRfTU9ERSA9ICdJTl9GUkFNRVNFVF9NT0RFJztcbmNvbnN0IEFGVEVSX0ZSQU1FU0VUX01PREUgPSAnQUZURVJfRlJBTUVTRVRfTU9ERSc7XG5jb25zdCBBRlRFUl9BRlRFUl9CT0RZX01PREUgPSAnQUZURVJfQUZURVJfQk9EWV9NT0RFJztcbmNvbnN0IEFGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREUgPSAnQUZURVJfQUZURVJfRlJBTUVTRVRfTU9ERSc7XG5cbi8vSW5zZXJ0aW9uIG1vZGUgcmVzZXQgbWFwXG5jb25zdCBJTlNFUlRJT05fTU9ERV9SRVNFVF9NQVAgPSB7XG4gICAgWyQuVFJdOiBJTl9ST1dfTU9ERSxcbiAgICBbJC5UQk9EWV06IElOX1RBQkxFX0JPRFlfTU9ERSxcbiAgICBbJC5USEVBRF06IElOX1RBQkxFX0JPRFlfTU9ERSxcbiAgICBbJC5URk9PVF06IElOX1RBQkxFX0JPRFlfTU9ERSxcbiAgICBbJC5DQVBUSU9OXTogSU5fQ0FQVElPTl9NT0RFLFxuICAgIFskLkNPTEdST1VQXTogSU5fQ09MVU1OX0dST1VQX01PREUsXG4gICAgWyQuVEFCTEVdOiBJTl9UQUJMRV9NT0RFLFxuICAgIFskLkJPRFldOiBJTl9CT0RZX01PREUsXG4gICAgWyQuRlJBTUVTRVRdOiBJTl9GUkFNRVNFVF9NT0RFXG59O1xuXG4vL1RlbXBsYXRlIGluc2VydGlvbiBtb2RlIHN3aXRjaCBtYXBcbmNvbnN0IFRFTVBMQVRFX0lOU0VSVElPTl9NT0RFX1NXSVRDSF9NQVAgPSB7XG4gICAgWyQuQ0FQVElPTl06IElOX1RBQkxFX01PREUsXG4gICAgWyQuQ09MR1JPVVBdOiBJTl9UQUJMRV9NT0RFLFxuICAgIFskLlRCT0RZXTogSU5fVEFCTEVfTU9ERSxcbiAgICBbJC5URk9PVF06IElOX1RBQkxFX01PREUsXG4gICAgWyQuVEhFQURdOiBJTl9UQUJMRV9NT0RFLFxuICAgIFskLkNPTF06IElOX0NPTFVNTl9HUk9VUF9NT0RFLFxuICAgIFskLlRSXTogSU5fVEFCTEVfQk9EWV9NT0RFLFxuICAgIFskLlREXTogSU5fUk9XX01PREUsXG4gICAgWyQuVEhdOiBJTl9ST1dfTU9ERVxufTtcblxuLy9Ub2tlbiBoYW5kbGVycyBtYXAgZm9yIGluc2VydGlvbiBtb2Rlc1xuY29uc3QgVE9LRU5fSEFORExFUlMgPSB7XG4gICAgW0lOSVRJQUxfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkluSW5pdGlhbE1vZGUsXG4gICAgICAgIFtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkluSW5pdGlhbE1vZGUsXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogZG9jdHlwZUluSW5pdGlhbE1vZGUsXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogdG9rZW5JbkluaXRpYWxNb2RlLFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiB0b2tlbkluSW5pdGlhbE1vZGUsXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogdG9rZW5JbkluaXRpYWxNb2RlXG4gICAgfSxcbiAgICBbQkVGT1JFX0hUTUxfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkJlZm9yZUh0bWwsXG4gICAgICAgIFtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkJlZm9yZUh0bWwsXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdCZWZvcmVIdG1sLFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdCZWZvcmVIdG1sLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHRva2VuQmVmb3JlSHRtbFxuICAgIH0sXG4gICAgW0JFRk9SRV9IRUFEX01PREVdOiB7XG4gICAgICAgIFtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXTogdG9rZW5CZWZvcmVIZWFkLFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogdG9rZW5CZWZvcmVIZWFkLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl06IGFwcGVuZENvbW1lbnQsXG4gICAgICAgIFtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl06IG1pc3BsYWNlZERvY3R5cGUsXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdCZWZvcmVIZWFkLFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdCZWZvcmVIZWFkLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHRva2VuQmVmb3JlSGVhZFxuICAgIH0sXG4gICAgW0lOX0hFQURfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkluSGVhZCxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IHRva2VuSW5IZWFkLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogaW5zZXJ0Q2hhcmFjdGVycyxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogbWlzcGxhY2VkRG9jdHlwZSxcbiAgICAgICAgW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dOiBzdGFydFRhZ0luSGVhZCxcbiAgICAgICAgW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXTogZW5kVGFnSW5IZWFkLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHRva2VuSW5IZWFkXG4gICAgfSxcbiAgICBbSU5fSEVBRF9OT19TQ1JJUFRfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkluSGVhZE5vU2NyaXB0LFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogdG9rZW5JbkhlYWROb1NjcmlwdCxcbiAgICAgICAgW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl06IGluc2VydENoYXJhY3RlcnMsXG4gICAgICAgIFtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl06IGFwcGVuZENvbW1lbnQsXG4gICAgICAgIFtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl06IG1pc3BsYWNlZERvY3R5cGUsXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJbkhlYWROb1NjcmlwdCxcbiAgICAgICAgW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXTogZW5kVGFnSW5IZWFkTm9TY3JpcHQsXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogdG9rZW5JbkhlYWROb1NjcmlwdFxuICAgIH0sXG4gICAgW0FGVEVSX0hFQURfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkFmdGVySGVhZCxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IHRva2VuQWZ0ZXJIZWFkLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogaW5zZXJ0Q2hhcmFjdGVycyxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogbWlzcGxhY2VkRG9jdHlwZSxcbiAgICAgICAgW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dOiBzdGFydFRhZ0FmdGVySGVhZCxcbiAgICAgICAgW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXTogZW5kVGFnQWZ0ZXJIZWFkLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHRva2VuQWZ0ZXJIZWFkXG4gICAgfSxcbiAgICBbSU5fQk9EWV9NT0RFXToge1xuICAgICAgICBbVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl06IGNoYXJhY3RlckluQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJbkJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IGVuZFRhZ0luQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5FT0ZfVE9LRU5dOiBlb2ZJbkJvZHlcbiAgICB9LFxuICAgIFtURVhUX01PREVdOiB7XG4gICAgICAgIFtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXTogaW5zZXJ0Q2hhcmFjdGVycyxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IGluc2VydENoYXJhY3RlcnMsXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiBpbnNlcnRDaGFyYWN0ZXJzLFxuICAgICAgICBbVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IGVuZFRhZ0luVGV4dCxcbiAgICAgICAgW1Rva2VuaXplci5FT0ZfVE9LRU5dOiBlb2ZJblRleHRcbiAgICB9LFxuICAgIFtJTl9UQUJMRV9NT0RFXToge1xuICAgICAgICBbVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl06IGNoYXJhY3RlckluVGFibGUsXG4gICAgICAgIFtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dOiBjaGFyYWN0ZXJJblRhYmxlLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogY2hhcmFjdGVySW5UYWJsZSxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJblRhYmxlLFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdJblRhYmxlLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IGVvZkluQm9keVxuICAgIH0sXG4gICAgW0lOX1RBQkxFX1RFWFRfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBjaGFyYWN0ZXJJblRhYmxlVGV4dCxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogd2hpdGVzcGFjZUNoYXJhY3RlckluVGFibGVUZXh0LFxuICAgICAgICBbVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dOiB0b2tlbkluVGFibGVUZXh0LFxuICAgICAgICBbVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dOiB0b2tlbkluVGFibGVUZXh0LFxuICAgICAgICBbVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl06IHRva2VuSW5UYWJsZVRleHQsXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IHRva2VuSW5UYWJsZVRleHQsXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogdG9rZW5JblRhYmxlVGV4dFxuICAgIH0sXG4gICAgW0lOX0NBUFRJT05fTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBjaGFyYWN0ZXJJbkJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl06IHdoaXRlc3BhY2VDaGFyYWN0ZXJJbkJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl06IGFwcGVuZENvbW1lbnQsXG4gICAgICAgIFtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl06IHN0YXJ0VGFnSW5DYXB0aW9uLFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdJbkNhcHRpb24sXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogZW9mSW5Cb2R5XG4gICAgfSxcbiAgICBbSU5fQ09MVU1OX0dST1VQX01PREVdOiB7XG4gICAgICAgIFtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXTogdG9rZW5JbkNvbHVtbkdyb3VwLFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogdG9rZW5JbkNvbHVtbkdyb3VwLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogaW5zZXJ0Q2hhcmFjdGVycyxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJbkNvbHVtbkdyb3VwLFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdJbkNvbHVtbkdyb3VwLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IGVvZkluQm9keVxuICAgIH0sXG4gICAgW0lOX1RBQkxFX0JPRFlfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBjaGFyYWN0ZXJJblRhYmxlLFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogY2hhcmFjdGVySW5UYWJsZSxcbiAgICAgICAgW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl06IGNoYXJhY3RlckluVGFibGUsXG4gICAgICAgIFtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl06IGFwcGVuZENvbW1lbnQsXG4gICAgICAgIFtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl06IHN0YXJ0VGFnSW5UYWJsZUJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IGVuZFRhZ0luVGFibGVCb2R5LFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IGVvZkluQm9keVxuICAgIH0sXG4gICAgW0lOX1JPV19NT0RFXToge1xuICAgICAgICBbVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl06IGNoYXJhY3RlckluVGFibGUsXG4gICAgICAgIFtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dOiBjaGFyYWN0ZXJJblRhYmxlLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogY2hhcmFjdGVySW5UYWJsZSxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJblJvdyxcbiAgICAgICAgW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXTogZW5kVGFnSW5Sb3csXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogZW9mSW5Cb2R5XG4gICAgfSxcbiAgICBbSU5fQ0VMTF9NT0RFXToge1xuICAgICAgICBbVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl06IGNoYXJhY3RlckluQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJbkNlbGwsXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IGVuZFRhZ0luQ2VsbCxcbiAgICAgICAgW1Rva2VuaXplci5FT0ZfVE9LRU5dOiBlb2ZJbkJvZHlcbiAgICB9LFxuICAgIFtJTl9TRUxFQ1RfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBpbnNlcnRDaGFyYWN0ZXJzLFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiBpbnNlcnRDaGFyYWN0ZXJzLFxuICAgICAgICBbVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dOiBhcHBlbmRDb21tZW50LFxuICAgICAgICBbVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dOiBzdGFydFRhZ0luU2VsZWN0LFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdJblNlbGVjdCxcbiAgICAgICAgW1Rva2VuaXplci5FT0ZfVE9LRU5dOiBlb2ZJbkJvZHlcbiAgICB9LFxuICAgIFtJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBpbnNlcnRDaGFyYWN0ZXJzLFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiBpbnNlcnRDaGFyYWN0ZXJzLFxuICAgICAgICBbVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dOiBhcHBlbmRDb21tZW50LFxuICAgICAgICBbVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dOiBzdGFydFRhZ0luU2VsZWN0SW5UYWJsZSxcbiAgICAgICAgW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXTogZW5kVGFnSW5TZWxlY3RJblRhYmxlLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IGVvZkluQm9keVxuICAgIH0sXG4gICAgW0lOX1RFTVBMQVRFX01PREVdOiB7XG4gICAgICAgIFtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXTogY2hhcmFjdGVySW5Cb2R5LFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5LFxuICAgICAgICBbVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dOiBhcHBlbmRDb21tZW50LFxuICAgICAgICBbVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dOiBzdGFydFRhZ0luVGVtcGxhdGUsXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IGVuZFRhZ0luVGVtcGxhdGUsXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogZW9mSW5UZW1wbGF0ZVxuICAgIH0sXG4gICAgW0FGVEVSX0JPRFlfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkFmdGVyQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IHRva2VuQWZ0ZXJCb2R5LFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudFRvUm9vdEh0bWxFbGVtZW50LFxuICAgICAgICBbVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dOiBzdGFydFRhZ0FmdGVyQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXTogZW5kVGFnQWZ0ZXJCb2R5LFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHN0b3BQYXJzaW5nXG4gICAgfSxcbiAgICBbSU5fRlJBTUVTRVRfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogaW5zZXJ0Q2hhcmFjdGVycyxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdJbkZyYW1lc2V0LFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdJbkZyYW1lc2V0LFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHN0b3BQYXJzaW5nXG4gICAgfSxcbiAgICBbQUZURVJfRlJBTUVTRVRfTU9ERV06IHtcbiAgICAgICAgW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dOiBpZ25vcmVUb2tlbixcbiAgICAgICAgW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogaW5zZXJ0Q2hhcmFjdGVycyxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdBZnRlckZyYW1lc2V0LFxuICAgICAgICBbVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dOiBlbmRUYWdBZnRlckZyYW1lc2V0LFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHN0b3BQYXJzaW5nXG4gICAgfSxcbiAgICBbQUZURVJfQUZURVJfQk9EWV9NT0RFXToge1xuICAgICAgICBbVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl06IHRva2VuQWZ0ZXJBZnRlckJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dOiB0b2tlbkFmdGVyQWZ0ZXJCb2R5LFxuICAgICAgICBbVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXTogd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keSxcbiAgICAgICAgW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXTogYXBwZW5kQ29tbWVudFRvRG9jdW1lbnQsXG4gICAgICAgIFtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl06IHN0YXJ0VGFnQWZ0ZXJBZnRlckJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IHRva2VuQWZ0ZXJBZnRlckJvZHksXG4gICAgICAgIFtUb2tlbml6ZXIuRU9GX1RPS0VOXTogc3RvcFBhcnNpbmdcbiAgICB9LFxuICAgIFtBRlRFUl9BRlRFUl9GUkFNRVNFVF9NT0RFXToge1xuICAgICAgICBbVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dOiB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5LFxuICAgICAgICBbVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dOiBhcHBlbmRDb21tZW50VG9Eb2N1bWVudCxcbiAgICAgICAgW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXTogaWdub3JlVG9rZW4sXG4gICAgICAgIFtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXTogc3RhcnRUYWdBZnRlckFmdGVyRnJhbWVzZXQsXG4gICAgICAgIFtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl06IGlnbm9yZVRva2VuLFxuICAgICAgICBbVG9rZW5pemVyLkVPRl9UT0tFTl06IHN0b3BQYXJzaW5nXG4gICAgfVxufTtcblxuLy9QYXJzZXJcbmNsYXNzIFBhcnNlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoREVGQVVMVF9PUFRJT05TLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyID0gdGhpcy5vcHRpb25zLnRyZWVBZGFwdGVyO1xuICAgICAgICB0aGlzLnBlbmRpbmdTY3JpcHQgPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc291cmNlQ29kZUxvY2F0aW9uSW5mbykge1xuICAgICAgICAgICAgTWl4aW4uaW5zdGFsbCh0aGlzLCBMb2NhdGlvbkluZm9QYXJzZXJNaXhpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uUGFyc2VFcnJvcikge1xuICAgICAgICAgICAgTWl4aW4uaW5zdGFsbCh0aGlzLCBFcnJvclJlcG9ydGluZ1BhcnNlck1peGluLCB7IG9uUGFyc2VFcnJvcjogdGhpcy5vcHRpb25zLm9uUGFyc2VFcnJvciB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFQSVxuICAgIHBhcnNlKGh0bWwpIHtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZURvY3VtZW50KCk7XG5cbiAgICAgICAgdGhpcy5fYm9vdHN0cmFwKGRvY3VtZW50LCBudWxsKTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIud3JpdGUoaHRtbCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX3J1blBhcnNpbmdMb29wKG51bGwpO1xuXG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9XG5cbiAgICBwYXJzZUZyYWdtZW50KGh0bWwsIGZyYWdtZW50Q29udGV4dCkge1xuICAgICAgICAvL05PVEU6IHVzZSA8dGVtcGxhdGU+IGVsZW1lbnQgYXMgYSBmcmFnbWVudCBjb250ZXh0IGlmIGNvbnRleHQgZWxlbWVudCB3YXMgbm90IHByb3ZpZGVkLFxuICAgICAgICAvL3NvIHdlIHdpbGwgcGFyc2UgaW4gXCJmb3JnaXZpbmdcIiBtYW5uZXJcbiAgICAgICAgaWYgKCFmcmFnbWVudENvbnRleHQpIHtcbiAgICAgICAgICAgIGZyYWdtZW50Q29udGV4dCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCgkLlRFTVBMQVRFLCBOUy5IVE1MLCBbXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL05PVEU6IGNyZWF0ZSBmYWtlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSB1c2VkIGFzICdkb2N1bWVudCcgZm9yIGZyYWdtZW50IHBhcnNpbmcuXG4gICAgICAgIC8vVGhpcyBpcyBpbXBvcnRhbnQgZm9yIGpzZG9tIHRoZXJlICdkb2N1bWVudCcgY2FuJ3QgYmUgcmVjcmVhdGVkLCB0aGVyZWZvcmVcbiAgICAgICAgLy9mcmFnbWVudCBwYXJzaW5nIGNhdXNlcyBtZXNzaW5nIG9mIHRoZSBtYWluIGBkb2N1bWVudGAuXG4gICAgICAgIGNvbnN0IGRvY3VtZW50TW9jayA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCgnZG9jdW1lbnRtb2NrJywgTlMuSFRNTCwgW10pO1xuXG4gICAgICAgIHRoaXMuX2Jvb3RzdHJhcChkb2N1bWVudE1vY2ssIGZyYWdtZW50Q29udGV4dCk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShmcmFnbWVudENvbnRleHQpID09PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgICAgICB0aGlzLl9wdXNoVG1wbEluc2VydGlvbk1vZGUoSU5fVEVNUExBVEVfTU9ERSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbml0VG9rZW5pemVyRm9yRnJhZ21lbnRQYXJzaW5nKCk7XG4gICAgICAgIHRoaXMuX2luc2VydEZha2VSb290RWxlbWVudCgpO1xuICAgICAgICB0aGlzLl9yZXNldEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgdGhpcy5fZmluZEZvcm1JbkZyYWdtZW50Q29udGV4dCgpO1xuICAgICAgICB0aGlzLnRva2VuaXplci53cml0ZShodG1sLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fcnVuUGFyc2luZ0xvb3AobnVsbCk7XG5cbiAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmdldEZpcnN0Q2hpbGQoZG9jdW1lbnRNb2NrKTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgICB0aGlzLl9hZG9wdE5vZGVzKHJvb3RFbGVtZW50LCBmcmFnbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH1cblxuICAgIC8vQm9vdHN0cmFwIHBhcnNlclxuICAgIF9ib290c3RyYXAoZG9jdW1lbnQsIGZyYWdtZW50Q29udGV4dCkge1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IG5ldyBUb2tlbml6ZXIodGhpcy5vcHRpb25zKTtcblxuICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJTklUSUFMX01PREU7XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnNlcnRpb25Nb2RlID0gJyc7XG5cbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgICAgICB0aGlzLmZyYWdtZW50Q29udGV4dCA9IGZyYWdtZW50Q29udGV4dDtcblxuICAgICAgICB0aGlzLmhlYWRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5mb3JtRWxlbWVudCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5vcGVuRWxlbWVudHMgPSBuZXcgT3BlbkVsZW1lbnRTdGFjayh0aGlzLmRvY3VtZW50LCB0aGlzLnRyZWVBZGFwdGVyKTtcbiAgICAgICAgdGhpcy5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMgPSBuZXcgRm9ybWF0dGluZ0VsZW1lbnRMaXN0KHRoaXMudHJlZUFkYXB0ZXIpO1xuXG4gICAgICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFjayA9IFtdO1xuICAgICAgICB0aGlzLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3AgPSAtMTtcbiAgICAgICAgdGhpcy5jdXJyZW50VG1wbEluc2VydGlvbk1vZGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMucGVuZGluZ0NoYXJhY3RlclRva2VucyA9IFtdO1xuICAgICAgICB0aGlzLmhhc05vbldoaXRlc3BhY2VQZW5kaW5nQ2hhcmFjdGVyVG9rZW4gPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmZyYW1lc2V0T2sgPSB0cnVlO1xuICAgICAgICB0aGlzLnNraXBOZXh0TmV3TGluZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvc3RlclBhcmVudGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvL0Vycm9yc1xuICAgIF9lcnIoKSB7XG4gICAgICAgIC8vIE5PVEU6IGVyciByZXBvcnRpbmcgaXMgbm9vcCBieSBkZWZhdWx0LiBFbmFibGVkIGJ5IG1peGluLlxuICAgIH1cblxuICAgIC8vUGFyc2luZyBsb29wXG4gICAgX3J1blBhcnNpbmdMb29wKHNjcmlwdEhhbmRsZXIpIHtcbiAgICAgICAgd2hpbGUgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwVG9rZW5pemVyQ0RBVEFNb2RlKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy50b2tlbml6ZXIuZ2V0TmV4dFRva2VuKCk7XG5cbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuSElCRVJOQVRJT05fVE9LRU4pIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2tpcE5leHROZXdMaW5lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwTmV4dE5ld0xpbmUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU4gJiYgdG9rZW4uY2hhcnNbMF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi5jaGFycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uY2hhcnMgPSB0b2tlbi5jaGFycy5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzSW5wdXRUb2tlbih0b2tlbik7XG5cbiAgICAgICAgICAgIGlmIChzY3JpcHRIYW5kbGVyICYmIHRoaXMucGVuZGluZ1NjcmlwdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcnVuUGFyc2luZ0xvb3BGb3JDdXJyZW50Q2h1bmsod3JpdGVDYWxsYmFjaywgc2NyaXB0SGFuZGxlcikge1xuICAgICAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcChzY3JpcHRIYW5kbGVyKTtcblxuICAgICAgICBpZiAoc2NyaXB0SGFuZGxlciAmJiB0aGlzLnBlbmRpbmdTY3JpcHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMucGVuZGluZ1NjcmlwdDtcblxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nU2NyaXB0ID0gbnVsbDtcblxuICAgICAgICAgICAgc2NyaXB0SGFuZGxlcihzY3JpcHQpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod3JpdGVDYWxsYmFjaykge1xuICAgICAgICAgICAgd3JpdGVDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9UZXh0IHBhcnNpbmdcbiAgICBfc2V0dXBUb2tlbml6ZXJDREFUQU1vZGUoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLl9nZXRBZGp1c3RlZEN1cnJlbnRFbGVtZW50KCk7XG5cbiAgICAgICAgdGhpcy50b2tlbml6ZXIuYWxsb3dDREFUQSA9XG4gICAgICAgICAgICBjdXJyZW50ICYmXG4gICAgICAgICAgICBjdXJyZW50ICE9PSB0aGlzLmRvY3VtZW50ICYmXG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShjdXJyZW50KSAhPT0gTlMuSFRNTCAmJlxuICAgICAgICAgICAgIXRoaXMuX2lzSW50ZWdyYXRpb25Qb2ludChjdXJyZW50KTtcbiAgICB9XG5cbiAgICBfc3dpdGNoVG9UZXh0UGFyc2luZyhjdXJyZW50VG9rZW4sIG5leHRUb2tlbml6ZXJTdGF0ZSkge1xuICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50KGN1cnJlbnRUb2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gbmV4dFRva2VuaXplclN0YXRlO1xuICAgICAgICB0aGlzLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHRoaXMuaW5zZXJ0aW9uTW9kZTtcbiAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gVEVYVF9NT0RFO1xuICAgIH1cblxuICAgIHN3aXRjaFRvUGxhaW50ZXh0UGFyc2luZygpIHtcbiAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gVEVYVF9NT0RFO1xuICAgICAgICB0aGlzLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IElOX0JPRFlfTU9ERTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIuc3RhdGUgPSBUb2tlbml6ZXIuTU9ERS5QTEFJTlRFWFQ7XG4gICAgfVxuXG4gICAgLy9GcmFnbWVudCBwYXJzaW5nXG4gICAgX2dldEFkanVzdGVkQ3VycmVudEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5FbGVtZW50cy5zdGFja1RvcCA9PT0gMCAmJiB0aGlzLmZyYWdtZW50Q29udGV4dFxuICAgICAgICAgICAgPyB0aGlzLmZyYWdtZW50Q29udGV4dFxuICAgICAgICAgICAgOiB0aGlzLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgIH1cblxuICAgIF9maW5kRm9ybUluRnJhZ21lbnRDb250ZXh0KCkge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuZnJhZ21lbnRDb250ZXh0O1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUobm9kZSkgPT09ICQuRk9STSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnQgPSBub2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlID0gdGhpcy50cmVlQWRhcHRlci5nZXRQYXJlbnROb2RlKG5vZGUpO1xuICAgICAgICB9IHdoaWxlIChub2RlKTtcbiAgICB9XG5cbiAgICBfaW5pdFRva2VuaXplckZvckZyYWdtZW50UGFyc2luZygpIHtcbiAgICAgICAgaWYgKHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHRoaXMuZnJhZ21lbnRDb250ZXh0KSA9PT0gTlMuSFRNTCkge1xuICAgICAgICAgICAgY29uc3QgdG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUodGhpcy5mcmFnbWVudENvbnRleHQpO1xuXG4gICAgICAgICAgICBpZiAodG4gPT09ICQuVElUTEUgfHwgdG4gPT09ICQuVEVYVEFSRUEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplci5NT0RFLlJDREFUQTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdG4gPT09ICQuU1RZTEUgfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5YTVAgfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5JRlJBTUUgfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5OT0VNQkVEIHx8XG4gICAgICAgICAgICAgICAgdG4gPT09ICQuTk9GUkFNRVMgfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5OT1NDUklQVFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuc3RhdGUgPSBUb2tlbml6ZXIuTU9ERS5SQVdURVhUO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5TQ1JJUFQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplci5NT0RFLlNDUklQVF9EQVRBO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5QTEFJTlRFWFQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplci5NT0RFLlBMQUlOVEVYVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vVHJlZSBtdXRhdGlvblxuICAgIF9zZXREb2N1bWVudFR5cGUodG9rZW4pIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRva2VuLm5hbWUgfHwgJyc7XG4gICAgICAgIGNvbnN0IHB1YmxpY0lkID0gdG9rZW4ucHVibGljSWQgfHwgJyc7XG4gICAgICAgIGNvbnN0IHN5c3RlbUlkID0gdG9rZW4uc3lzdGVtSWQgfHwgJyc7XG5cbiAgICAgICAgdGhpcy50cmVlQWRhcHRlci5zZXREb2N1bWVudFR5cGUodGhpcy5kb2N1bWVudCwgbmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKTtcbiAgICB9XG5cbiAgICBfYXR0YWNoRWxlbWVudFRvVHJlZShlbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3N0ZXJQYXJlbnRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5vcGVuRWxlbWVudHMuY3VycmVudFRtcGxDb250ZW50IHx8IHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQocGFyZW50LCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9hcHBlbmRFbGVtZW50KHRva2VuLCBuYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0b2tlbi50YWdOYW1lLCBuYW1lc3BhY2VVUkksIHRva2VuLmF0dHJzKTtcblxuICAgICAgICB0aGlzLl9hdHRhY2hFbGVtZW50VG9UcmVlKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIF9pbnNlcnRFbGVtZW50KHRva2VuLCBuYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0b2tlbi50YWdOYW1lLCBuYW1lc3BhY2VVUkksIHRva2VuLmF0dHJzKTtcblxuICAgICAgICB0aGlzLl9hdHRhY2hFbGVtZW50VG9UcmVlKGVsZW1lbnQpO1xuICAgICAgICB0aGlzLm9wZW5FbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIF9pbnNlcnRGYWtlRWxlbWVudCh0YWdOYW1lKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgTlMuSFRNTCwgW10pO1xuXG4gICAgICAgIHRoaXMuX2F0dGFjaEVsZW1lbnRUb1RyZWUoZWxlbWVudCk7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgfVxuXG4gICAgX2luc2VydFRlbXBsYXRlKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHRtcGwgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodG9rZW4udGFnTmFtZSwgTlMuSFRNTCwgdG9rZW4uYXR0cnMpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy50cmVlQWRhcHRlci5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgICAgdGhpcy50cmVlQWRhcHRlci5zZXRUZW1wbGF0ZUNvbnRlbnQodG1wbCwgY29udGVudCk7XG4gICAgICAgIHRoaXMuX2F0dGFjaEVsZW1lbnRUb1RyZWUodG1wbCk7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnB1c2godG1wbCk7XG4gICAgfVxuXG4gICAgX2luc2VydEZha2VSb290RWxlbWVudCgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCgkLkhUTUwsIE5TLkhUTUwsIFtdKTtcblxuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICB0aGlzLm9wZW5FbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIF9hcHBlbmRDb21tZW50Tm9kZSh0b2tlbiwgcGFyZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbW1lbnROb2RlID0gdGhpcy50cmVlQWRhcHRlci5jcmVhdGVDb21tZW50Tm9kZSh0b2tlbi5kYXRhKTtcblxuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKHBhcmVudCwgY29tbWVudE5vZGUpO1xuICAgIH1cblxuICAgIF9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3N0ZXJQYXJlbnRUZXh0KHRva2VuLmNoYXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnRUbXBsQ29udGVudCB8fCB0aGlzLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuXG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmluc2VydFRleHQocGFyZW50LCB0b2tlbi5jaGFycyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYWRvcHROb2Rlcyhkb25vciwgcmVjaXBpZW50KSB7XG4gICAgICAgIGZvciAobGV0IGNoaWxkID0gdGhpcy50cmVlQWRhcHRlci5nZXRGaXJzdENoaWxkKGRvbm9yKTsgY2hpbGQ7IGNoaWxkID0gdGhpcy50cmVlQWRhcHRlci5nZXRGaXJzdENoaWxkKGRvbm9yKSkge1xuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGNoaWxkKTtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQocmVjaXBpZW50LCBjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL1Rva2VuIHByb2Nlc3NpbmdcbiAgICBfc2hvdWxkUHJvY2Vzc1Rva2VuSW5Gb3JlaWduQ29udGVudCh0b2tlbikge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5fZ2V0QWRqdXN0ZWRDdXJyZW50RWxlbWVudCgpO1xuXG4gICAgICAgIGlmICghY3VycmVudCB8fCBjdXJyZW50ID09PSB0aGlzLmRvY3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGN1cnJlbnQpO1xuXG4gICAgICAgIGlmIChucyA9PT0gTlMuSFRNTCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGN1cnJlbnQpID09PSAkLkFOTk9UQVRJT05fWE1MICYmXG4gICAgICAgICAgICBucyA9PT0gTlMuTUFUSE1MICYmXG4gICAgICAgICAgICB0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOICYmXG4gICAgICAgICAgICB0b2tlbi50YWdOYW1lID09PSAkLlNWR1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzQ2hhcmFjdGVyVG9rZW4gPVxuICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTiB8fFxuICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOIHx8XG4gICAgICAgICAgICB0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU47XG5cbiAgICAgICAgY29uc3QgaXNNYXRoTUxUZXh0U3RhcnRUYWcgPVxuICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTiAmJiB0b2tlbi50YWdOYW1lICE9PSAkLk1HTFlQSCAmJiB0b2tlbi50YWdOYW1lICE9PSAkLk1BTElHTk1BUks7XG5cbiAgICAgICAgaWYgKChpc01hdGhNTFRleHRTdGFydFRhZyB8fCBpc0NoYXJhY3RlclRva2VuKSAmJiB0aGlzLl9pc0ludGVncmF0aW9uUG9pbnQoY3VycmVudCwgTlMuTUFUSE1MKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5TVEFSVF9UQUdfVE9LRU4gfHwgaXNDaGFyYWN0ZXJUb2tlbikgJiZcbiAgICAgICAgICAgIHRoaXMuX2lzSW50ZWdyYXRpb25Qb2ludChjdXJyZW50LCBOUy5IVE1MKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b2tlbi50eXBlICE9PSBUb2tlbml6ZXIuRU9GX1RPS0VOO1xuICAgIH1cblxuICAgIF9wcm9jZXNzVG9rZW4odG9rZW4pIHtcbiAgICAgICAgVE9LRU5fSEFORExFUlNbdGhpcy5pbnNlcnRpb25Nb2RlXVt0b2tlbi50eXBlXSh0aGlzLCB0b2tlbik7XG4gICAgfVxuXG4gICAgX3Byb2Nlc3NUb2tlbkluQm9keU1vZGUodG9rZW4pIHtcbiAgICAgICAgVE9LRU5fSEFORExFUlNbSU5fQk9EWV9NT0RFXVt0b2tlbi50eXBlXSh0aGlzLCB0b2tlbik7XG4gICAgfVxuXG4gICAgX3Byb2Nlc3NUb2tlbkluRm9yZWlnbkNvbnRlbnQodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5DSEFSQUNURVJfVE9LRU4pIHtcbiAgICAgICAgICAgIGNoYXJhY3RlckluRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTikge1xuICAgICAgICAgICAgbnVsbENoYXJhY3RlckluRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTikge1xuICAgICAgICAgICAgaW5zZXJ0Q2hhcmFjdGVycyh0aGlzLCB0b2tlbik7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLkNPTU1FTlRfVE9LRU4pIHtcbiAgICAgICAgICAgIGFwcGVuZENvbW1lbnQodGhpcywgdG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5TVEFSVF9UQUdfVE9LRU4pIHtcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5Gb3JlaWduQ29udGVudCh0aGlzLCB0b2tlbik7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLkVORF9UQUdfVE9LRU4pIHtcbiAgICAgICAgICAgIGVuZFRhZ0luRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Byb2Nlc3NJbnB1dFRva2VuKHRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRQcm9jZXNzVG9rZW5JbkZvcmVpZ25Db250ZW50KHRva2VuKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1Rva2VuSW5Gb3JlaWduQ29udGVudCh0b2tlbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5TVEFSVF9UQUdfVE9LRU4gJiYgdG9rZW4uc2VsZkNsb3NpbmcgJiYgIXRva2VuLmFja1NlbGZDbG9zaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnIoRVJSLm5vblZvaWRIdG1sRWxlbWVudFN0YXJ0VGFnV2l0aFRyYWlsaW5nU29saWR1cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL0ludGVncmF0aW9uIHBvaW50c1xuICAgIF9pc0ludGVncmF0aW9uUG9pbnQoZWxlbWVudCwgZm9yZWlnbk5TKSB7XG4gICAgICAgIGNvbnN0IHRuID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBhdHRycyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0QXR0ckxpc3QoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcmVpZ25Db250ZW50LmlzSW50ZWdyYXRpb25Qb2ludCh0biwgbnMsIGF0dHJzLCBmb3JlaWduTlMpO1xuICAgIH1cblxuICAgIC8vQWN0aXZlIGZvcm1hdHRpbmcgZWxlbWVudHMgcmVjb25zdHJ1Y3Rpb25cbiAgICBfcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RMZW5ndGggPSB0aGlzLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGxpc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCB1bm9wZW5JZHggPSBsaXN0TGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGVudHJ5ID0gbnVsbDtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHVub3BlbklkeC0tO1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuZW50cmllc1t1bm9wZW5JZHhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09IEZvcm1hdHRpbmdFbGVtZW50TGlzdC5NQVJLRVJfRU5UUlkgfHwgdGhpcy5vcGVuRWxlbWVudHMuY29udGFpbnMoZW50cnkuZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5vcGVuSWR4Kys7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHVub3BlbklkeCA+IDApO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdW5vcGVuSWR4OyBpIDwgbGlzdExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZW50cnkgPSB0aGlzLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5lbnRyaWVzW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydEVsZW1lbnQoZW50cnkudG9rZW4sIHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVudHJ5LmVsZW1lbnQpKTtcbiAgICAgICAgICAgICAgICBlbnRyeS5lbGVtZW50ID0gdGhpcy5vcGVuRWxlbWVudHMuY3VycmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vQ2xvc2UgZWxlbWVudHNcbiAgICBfY2xvc2VUYWJsZUNlbGwoKSB7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgdGhpcy5vcGVuRWxlbWVudHMucG9wVW50aWxUYWJsZUNlbGxQb3BwZWQoKTtcbiAgICAgICAgdGhpcy5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSU5fUk9XX01PREU7XG4gICAgfVxuXG4gICAgX2Nsb3NlUEVsZW1lbnQoKSB7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uKCQuUCk7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlApO1xuICAgIH1cblxuICAgIC8vSW5zZXJ0aW9uIG1vZGVzXG4gICAgX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMub3BlbkVsZW1lbnRzLnN0YWNrVG9wLCBsYXN0ID0gZmFsc2U7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMub3BlbkVsZW1lbnRzLml0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxhc3QgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmZyYWdtZW50Q29udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgbmV3SW5zZXJ0aW9uTW9kZSA9IElOU0VSVElPTl9NT0RFX1JFU0VUX01BUFt0bl07XG5cbiAgICAgICAgICAgIGlmIChuZXdJbnNlcnRpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gbmV3SW5zZXJ0aW9uTW9kZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxhc3QgJiYgKHRuID09PSAkLlREIHx8IHRuID09PSAkLlRIKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IElOX0NFTExfTU9ERTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxhc3QgJiYgdG4gPT09ICQuSEVBRCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IElOX0hFQURfTU9ERTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuU0VMRUNUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRJbnNlcnRpb25Nb2RlRm9yU2VsZWN0KGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IHRoaXMuY3VycmVudFRtcGxJbnNlcnRpb25Nb2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5IVE1MKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gdGhpcy5oZWFkRWxlbWVudCA/IEFGVEVSX0hFQURfTU9ERSA6IEJFRk9SRV9IRUFEX01PREU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJTl9CT0RZX01PREU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVzZXRJbnNlcnRpb25Nb2RlRm9yU2VsZWN0KHNlbGVjdElkeCkge1xuICAgICAgICBpZiAoc2VsZWN0SWR4ID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHNlbGVjdElkeCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNlc3RvciA9IHRoaXMub3BlbkVsZW1lbnRzLml0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGFuY2VzdG9yKTtcblxuICAgICAgICAgICAgICAgIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IElOX1NFTEVDVF9JTl9UQUJMRV9NT0RFO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSU5fU0VMRUNUX01PREU7XG4gICAgfVxuXG4gICAgX3B1c2hUbXBsSW5zZXJ0aW9uTW9kZShtb2RlKSB7XG4gICAgICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFjay5wdXNoKG1vZGUpO1xuICAgICAgICB0aGlzLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3ArKztcbiAgICAgICAgdGhpcy5jdXJyZW50VG1wbEluc2VydGlvbk1vZGUgPSBtb2RlO1xuICAgIH1cblxuICAgIF9wb3BUbXBsSW5zZXJ0aW9uTW9kZSgpIHtcbiAgICAgICAgdGhpcy50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrLnBvcCgpO1xuICAgICAgICB0aGlzLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3AtLTtcbiAgICAgICAgdGhpcy5jdXJyZW50VG1wbEluc2VydGlvbk1vZGUgPSB0aGlzLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tbdGhpcy50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrVG9wXTtcbiAgICB9XG5cbiAgICAvL0Zvc3RlciBwYXJlbnRpbmdcbiAgICBfaXNFbGVtZW50Q2F1c2VzRm9zdGVyUGFyZW50aW5nKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRuID09PSAkLlRBQkxFIHx8IHRuID09PSAkLlRCT0RZIHx8IHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIRUFEIHx8IHRuID09PSAkLlRSO1xuICAgIH1cblxuICAgIF9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9zdGVyUGFyZW50aW5nRW5hYmxlZCAmJiB0aGlzLl9pc0VsZW1lbnRDYXVzZXNGb3N0ZXJQYXJlbnRpbmcodGhpcy5vcGVuRWxlbWVudHMuY3VycmVudCk7XG4gICAgfVxuXG4gICAgX2ZpbmRGb3N0ZXJQYXJlbnRpbmdMb2NhdGlvbigpIHtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSB7XG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICBiZWZvcmVFbGVtZW50OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMub3BlbkVsZW1lbnRzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlbkVsZW1lbnQgPSB0aGlzLm9wZW5FbGVtZW50cy5pdGVtc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKG9wZW5FbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IG5zID0gdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkob3BlbkVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAodG4gPT09ICQuVEVNUExBVEUgJiYgbnMgPT09IE5TLkhUTUwpIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5wYXJlbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRlbXBsYXRlQ29udGVudChvcGVuRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucGFyZW50ID0gdGhpcy50cmVlQWRhcHRlci5nZXRQYXJlbnROb2RlKG9wZW5FbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uYmVmb3JlRWxlbWVudCA9IG9wZW5FbGVtZW50O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnBhcmVudCA9IHRoaXMub3BlbkVsZW1lbnRzLml0ZW1zW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbG9jYXRpb24ucGFyZW50KSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJlbnQgPSB0aGlzLm9wZW5FbGVtZW50cy5pdGVtc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICBfZm9zdGVyUGFyZW50RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5fZmluZEZvc3RlclBhcmVudGluZ0xvY2F0aW9uKCk7XG5cbiAgICAgICAgaWYgKGxvY2F0aW9uLmJlZm9yZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0QmVmb3JlKGxvY2F0aW9uLnBhcmVudCwgZWxlbWVudCwgbG9jYXRpb24uYmVmb3JlRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKGxvY2F0aW9uLnBhcmVudCwgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZm9zdGVyUGFyZW50VGV4dChjaGFycykge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuX2ZpbmRGb3N0ZXJQYXJlbnRpbmdMb2NhdGlvbigpO1xuXG4gICAgICAgIGlmIChsb2NhdGlvbi5iZWZvcmVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmluc2VydFRleHRCZWZvcmUobG9jYXRpb24ucGFyZW50LCBjaGFycywgbG9jYXRpb24uYmVmb3JlRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmluc2VydFRleHQobG9jYXRpb24ucGFyZW50LCBjaGFycyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL1NwZWNpYWwgZWxlbWVudHNcbiAgICBfaXNTcGVjaWFsRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHRuID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiBIVE1MLlNQRUNJQUxfRUxFTUVOVFNbbnNdW3RuXTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuXG4vL0Fkb3B0aW9uIGFnZW5jeSBhbGdvcml0aG1cbi8vKHNlZTogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdHJlZS1jb25zdHJ1Y3Rpb24uaHRtbCNhZG9wdGlvbkFnZW5jeSlcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vU3RlcHMgNS04IG9mIHRoZSBhbGdvcml0aG1cbmZ1bmN0aW9uIGFhT2J0YWluRm9ybWF0dGluZ0VsZW1lbnRFbnRyeShwLCB0b2tlbikge1xuICAgIGxldCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5ID0gcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuZ2V0RWxlbWVudEVudHJ5SW5TY29wZVdpdGhUYWdOYW1lKHRva2VuLnRhZ05hbWUpO1xuXG4gICAgaWYgKGZvcm1hdHRpbmdFbGVtZW50RW50cnkpIHtcbiAgICAgICAgaWYgKCFwLm9wZW5FbGVtZW50cy5jb250YWlucyhmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpKSB7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5yZW1vdmVFbnRyeShmb3JtYXR0aW5nRWxlbWVudEVudHJ5KTtcbiAgICAgICAgICAgIGZvcm1hdHRpbmdFbGVtZW50RW50cnkgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKCFwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRva2VuLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICBmb3JtYXR0aW5nRWxlbWVudEVudHJ5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXR0aW5nRWxlbWVudEVudHJ5O1xufVxuXG4vL1N0ZXBzIDkgYW5kIDEwIG9mIHRoZSBhbGdvcml0aG1cbmZ1bmN0aW9uIGFhT2J0YWluRnVydGhlc3RCbG9jayhwLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5KSB7XG4gICAgbGV0IGZ1cnRoZXN0QmxvY2sgPSBudWxsO1xuXG4gICAgZm9yIChsZXQgaSA9IHAub3BlbkVsZW1lbnRzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuaXRlbXNbaV07XG5cbiAgICAgICAgaWYgKGVsZW1lbnQgPT09IGZvcm1hdHRpbmdFbGVtZW50RW50cnkuZWxlbWVudCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocC5faXNTcGVjaWFsRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgZnVydGhlc3RCbG9jayA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZ1cnRoZXN0QmxvY2spIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxFbGVtZW50UG9wcGVkKGZvcm1hdHRpbmdFbGVtZW50RW50cnkuZWxlbWVudCk7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGZvcm1hdHRpbmdFbGVtZW50RW50cnkpO1xuICAgIH1cblxuICAgIHJldHVybiBmdXJ0aGVzdEJsb2NrO1xufVxuXG4vL1N0ZXAgMTMgb2YgdGhlIGFsZ29yaXRobVxuZnVuY3Rpb24gYWFJbm5lckxvb3AocCwgZnVydGhlc3RCbG9jaywgZm9ybWF0dGluZ0VsZW1lbnQpIHtcbiAgICBsZXQgbGFzdEVsZW1lbnQgPSBmdXJ0aGVzdEJsb2NrO1xuICAgIGxldCBuZXh0RWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmdldENvbW1vbkFuY2VzdG9yKGZ1cnRoZXN0QmxvY2spO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGVsZW1lbnQgPSBuZXh0RWxlbWVudDsgZWxlbWVudCAhPT0gZm9ybWF0dGluZ0VsZW1lbnQ7IGkrKywgZWxlbWVudCA9IG5leHRFbGVtZW50KSB7XG4gICAgICAgIC8vTk9URTogc3RvcmUgbmV4dCBlbGVtZW50IGZvciB0aGUgbmV4dCBsb29wIGl0ZXJhdGlvbiAoaXQgbWF5IGJlIGRlbGV0ZWQgZnJvbSB0aGUgc3RhY2sgYnkgc3RlcCA5LjUpXG4gICAgICAgIG5leHRFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuZ2V0Q29tbW9uQW5jZXN0b3IoZWxlbWVudCk7XG5cbiAgICAgICAgY29uc3QgZWxlbWVudEVudHJ5ID0gcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuZ2V0RWxlbWVudEVudHJ5KGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBjb3VudGVyT3ZlcmZsb3cgPSBlbGVtZW50RW50cnkgJiYgaSA+PSBBQV9JTk5FUl9MT09QX0lURVI7XG4gICAgICAgIGNvbnN0IHNob3VsZFJlbW92ZUZyb21PcGVuRWxlbWVudHMgPSAhZWxlbWVudEVudHJ5IHx8IGNvdW50ZXJPdmVyZmxvdztcblxuICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlRnJvbU9wZW5FbGVtZW50cykge1xuICAgICAgICAgICAgaWYgKGNvdW50ZXJPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGVsZW1lbnRFbnRyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBhYVJlY3JlYXRlRWxlbWVudEZyb21FbnRyeShwLCBlbGVtZW50RW50cnkpO1xuXG4gICAgICAgICAgICBpZiAobGFzdEVsZW1lbnQgPT09IGZ1cnRoZXN0QmxvY2spIHtcbiAgICAgICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5ib29rbWFyayA9IGVsZW1lbnRFbnRyeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcC50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGxhc3RFbGVtZW50KTtcbiAgICAgICAgICAgIHAudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCwgbGFzdEVsZW1lbnQpO1xuICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RFbGVtZW50O1xufVxuXG4vL1N0ZXAgMTMuNyBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYVJlY3JlYXRlRWxlbWVudEZyb21FbnRyeShwLCBlbGVtZW50RW50cnkpIHtcbiAgICBjb25zdCBucyA9IHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnRFbnRyeS5lbGVtZW50KTtcbiAgICBjb25zdCBuZXdFbGVtZW50ID0gcC50cmVlQWRhcHRlci5jcmVhdGVFbGVtZW50KGVsZW1lbnRFbnRyeS50b2tlbi50YWdOYW1lLCBucywgZWxlbWVudEVudHJ5LnRva2VuLmF0dHJzKTtcblxuICAgIHAub3BlbkVsZW1lbnRzLnJlcGxhY2UoZWxlbWVudEVudHJ5LmVsZW1lbnQsIG5ld0VsZW1lbnQpO1xuICAgIGVsZW1lbnRFbnRyeS5lbGVtZW50ID0gbmV3RWxlbWVudDtcblxuICAgIHJldHVybiBuZXdFbGVtZW50O1xufVxuXG4vL1N0ZXAgMTQgb2YgdGhlIGFsZ29yaXRobVxuZnVuY3Rpb24gYWFJbnNlcnRMYXN0Tm9kZUluQ29tbW9uQW5jZXN0b3IocCwgY29tbW9uQW5jZXN0b3IsIGxhc3RFbGVtZW50KSB7XG4gICAgaWYgKHAuX2lzRWxlbWVudENhdXNlc0Zvc3RlclBhcmVudGluZyhjb21tb25BbmNlc3RvcikpIHtcbiAgICAgICAgcC5fZm9zdGVyUGFyZW50RWxlbWVudChsYXN0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdG4gPSBwLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoY29tbW9uQW5jZXN0b3IpO1xuICAgICAgICBjb25zdCBucyA9IHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGNvbW1vbkFuY2VzdG9yKTtcblxuICAgICAgICBpZiAodG4gPT09ICQuVEVNUExBVEUgJiYgbnMgPT09IE5TLkhUTUwpIHtcbiAgICAgICAgICAgIGNvbW1vbkFuY2VzdG9yID0gcC50cmVlQWRhcHRlci5nZXRUZW1wbGF0ZUNvbnRlbnQoY29tbW9uQW5jZXN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcC50cmVlQWRhcHRlci5hcHBlbmRDaGlsZChjb21tb25BbmNlc3RvciwgbGFzdEVsZW1lbnQpO1xuICAgIH1cbn1cblxuLy9TdGVwcyAxNS0xOSBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYVJlcGxhY2VGb3JtYXR0aW5nRWxlbWVudChwLCBmdXJ0aGVzdEJsb2NrLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5KSB7XG4gICAgY29uc3QgbnMgPSBwLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpO1xuICAgIGNvbnN0IHRva2VuID0gZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS50b2tlbjtcbiAgICBjb25zdCBuZXdFbGVtZW50ID0gcC50cmVlQWRhcHRlci5jcmVhdGVFbGVtZW50KHRva2VuLnRhZ05hbWUsIG5zLCB0b2tlbi5hdHRycyk7XG5cbiAgICBwLl9hZG9wdE5vZGVzKGZ1cnRoZXN0QmxvY2ssIG5ld0VsZW1lbnQpO1xuICAgIHAudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQoZnVydGhlc3RCbG9jaywgbmV3RWxlbWVudCk7XG5cbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRFbGVtZW50QWZ0ZXJCb29rbWFyayhuZXdFbGVtZW50LCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5LnRva2VuKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5yZW1vdmVFbnRyeShmb3JtYXR0aW5nRWxlbWVudEVudHJ5KTtcblxuICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpO1xuICAgIHAub3BlbkVsZW1lbnRzLmluc2VydEFmdGVyKGZ1cnRoZXN0QmxvY2ssIG5ld0VsZW1lbnQpO1xufVxuXG4vL0FsZ29yaXRobSBlbnRyeSBwb2ludFxuZnVuY3Rpb24gY2FsbEFkb3B0aW9uQWdlbmN5KHAsIHRva2VuKSB7XG4gICAgbGV0IGZvcm1hdHRpbmdFbGVtZW50RW50cnk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEFBX09VVEVSX0xPT1BfSVRFUjsgaSsrKSB7XG4gICAgICAgIGZvcm1hdHRpbmdFbGVtZW50RW50cnkgPSBhYU9idGFpbkZvcm1hdHRpbmdFbGVtZW50RW50cnkocCwgdG9rZW4sIGZvcm1hdHRpbmdFbGVtZW50RW50cnkpO1xuXG4gICAgICAgIGlmICghZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmdXJ0aGVzdEJsb2NrID0gYWFPYnRhaW5GdXJ0aGVzdEJsb2NrKHAsIGZvcm1hdHRpbmdFbGVtZW50RW50cnkpO1xuXG4gICAgICAgIGlmICghZnVydGhlc3RCbG9jaykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5ib29rbWFyayA9IGZvcm1hdHRpbmdFbGVtZW50RW50cnk7XG5cbiAgICAgICAgY29uc3QgbGFzdEVsZW1lbnQgPSBhYUlubmVyTG9vcChwLCBmdXJ0aGVzdEJsb2NrLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpO1xuICAgICAgICBjb25zdCBjb21tb25BbmNlc3RvciA9IHAub3BlbkVsZW1lbnRzLmdldENvbW1vbkFuY2VzdG9yKGZvcm1hdHRpbmdFbGVtZW50RW50cnkuZWxlbWVudCk7XG5cbiAgICAgICAgcC50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGxhc3RFbGVtZW50KTtcbiAgICAgICAgYWFJbnNlcnRMYXN0Tm9kZUluQ29tbW9uQW5jZXN0b3IocCwgY29tbW9uQW5jZXN0b3IsIGxhc3RFbGVtZW50KTtcbiAgICAgICAgYWFSZXBsYWNlRm9ybWF0dGluZ0VsZW1lbnQocCwgZnVydGhlc3RCbG9jaywgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSk7XG4gICAgfVxufVxuXG4vL0dlbmVyaWMgdG9rZW4gaGFuZGxlcnNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBpZ25vcmVUb2tlbigpIHtcbiAgICAvL05PVEU6IGRvIG5vdGhpbmcgPSlcbn1cblxuZnVuY3Rpb24gbWlzcGxhY2VkRG9jdHlwZShwKSB7XG4gICAgcC5fZXJyKEVSUi5taXNwbGFjZWREb2N0eXBlKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ29tbWVudChwLCB0b2tlbikge1xuICAgIHAuX2FwcGVuZENvbW1lbnROb2RlKHRva2VuLCBwLm9wZW5FbGVtZW50cy5jdXJyZW50VG1wbENvbnRlbnQgfHwgcC5vcGVuRWxlbWVudHMuY3VycmVudCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENvbW1lbnRUb1Jvb3RIdG1sRWxlbWVudChwLCB0b2tlbikge1xuICAgIHAuX2FwcGVuZENvbW1lbnROb2RlKHRva2VuLCBwLm9wZW5FbGVtZW50cy5pdGVtc1swXSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENvbW1lbnRUb0RvY3VtZW50KHAsIHRva2VuKSB7XG4gICAgcC5fYXBwZW5kQ29tbWVudE5vZGUodG9rZW4sIHAuZG9jdW1lbnQpO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRDaGFyYWN0ZXJzKHAsIHRva2VuKSB7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHN0b3BQYXJzaW5nKHApIHtcbiAgICBwLnN0b3BwZWQgPSB0cnVlO1xufVxuXG4vLyBUaGUgXCJpbml0aWFsXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBkb2N0eXBlSW5Jbml0aWFsTW9kZShwLCB0b2tlbikge1xuICAgIHAuX3NldERvY3VtZW50VHlwZSh0b2tlbik7XG5cbiAgICBjb25zdCBtb2RlID0gdG9rZW4uZm9yY2VRdWlya3MgPyBIVE1MLkRPQ1VNRU5UX01PREUuUVVJUktTIDogZG9jdHlwZS5nZXREb2N1bWVudE1vZGUodG9rZW4pO1xuXG4gICAgaWYgKCFkb2N0eXBlLmlzQ29uZm9ybWluZyh0b2tlbikpIHtcbiAgICAgICAgcC5fZXJyKEVSUi5ub25Db25mb3JtaW5nRG9jdHlwZSk7XG4gICAgfVxuXG4gICAgcC50cmVlQWRhcHRlci5zZXREb2N1bWVudE1vZGUocC5kb2N1bWVudCwgbW9kZSk7XG5cbiAgICBwLmluc2VydGlvbk1vZGUgPSBCRUZPUkVfSFRNTF9NT0RFO1xufVxuXG5mdW5jdGlvbiB0b2tlbkluSW5pdGlhbE1vZGUocCwgdG9rZW4pIHtcbiAgICBwLl9lcnIoRVJSLm1pc3NpbmdEb2N0eXBlLCB7IGJlZm9yZVRva2VuOiB0cnVlIH0pO1xuICAgIHAudHJlZUFkYXB0ZXIuc2V0RG9jdW1lbnRNb2RlKHAuZG9jdW1lbnQsIEhUTUwuRE9DVU1FTlRfTU9ERS5RVUlSS1MpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEJFRk9SRV9IVE1MX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuLy8gVGhlIFwiYmVmb3JlIGh0bWxcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQmVmb3JlSHRtbChwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdOYW1lID09PSAkLkhUTUwpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEJFRk9SRV9IRUFEX01PREU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5CZWZvcmVIdG1sKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0JlZm9yZUh0bWwocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuSFRNTCB8fCB0biA9PT0gJC5IRUFEIHx8IHRuID09PSAkLkJPRFkgfHwgdG4gPT09ICQuQlIpIHtcbiAgICAgICAgdG9rZW5CZWZvcmVIdG1sKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuQmVmb3JlSHRtbChwLCB0b2tlbikge1xuICAgIHAuX2luc2VydEZha2VSb290RWxlbWVudCgpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEJFRk9SRV9IRUFEX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuLy8gVGhlIFwiYmVmb3JlIGhlYWRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQmVmb3JlSGVhZChwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IVE1MKSB7XG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLkhFQUQpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuaGVhZEVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9IRUFEX01PREU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5CZWZvcmVIZWFkKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0JlZm9yZUhlYWQocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuSEVBRCB8fCB0biA9PT0gJC5CT0RZIHx8IHRuID09PSAkLkhUTUwgfHwgdG4gPT09ICQuQlIpIHtcbiAgICAgICAgdG9rZW5CZWZvcmVIZWFkKHAsIHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwLl9lcnIoRVJSLmVuZFRhZ1dpdGhvdXRNYXRjaGluZ09wZW5FbGVtZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuQmVmb3JlSGVhZChwLCB0b2tlbikge1xuICAgIHAuX2luc2VydEZha2VFbGVtZW50KCQuSEVBRCk7XG4gICAgcC5oZWFkRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fSEVBRF9NT0RFO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG5cbi8vIFRoZSBcImluIGhlYWRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuQkFTRSB8fCB0biA9PT0gJC5CQVNFRk9OVCB8fCB0biA9PT0gJC5CR1NPVU5EIHx8IHRuID09PSAkLkxJTksgfHwgdG4gPT09ICQuTUVUQSkge1xuICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgdG9rZW4uYWNrU2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVElUTEUpIHtcbiAgICAgICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgVG9rZW5pemVyLk1PREUuUkNEQVRBKTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLk5PU0NSSVBUKSB7XG4gICAgICAgIGlmIChwLm9wdGlvbnMuc2NyaXB0aW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgVG9rZW5pemVyLk1PREUuUkFXVEVYVCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0hFQURfTk9fU0NSSVBUX01PREU7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLk5PRlJBTUVTIHx8IHRuID09PSAkLlNUWUxFKSB7XG4gICAgICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIFRva2VuaXplci5NT0RFLlJBV1RFWFQpO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuU0NSSVBUKSB7XG4gICAgICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIFRva2VuaXplci5NT0RFLlNDUklQVF9EQVRBKTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgIHAuX2luc2VydFRlbXBsYXRlKHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuaW5zZXJ0TWFya2VyKCk7XG4gICAgICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9URU1QTEFURV9NT0RFO1xuICAgICAgICBwLl9wdXNoVG1wbEluc2VydGlvbk1vZGUoSU5fVEVNUExBVEVfTU9ERSk7XG4gICAgfSBlbHNlIGlmICh0biA9PT0gJC5IRUFEKSB7XG4gICAgICAgIHAuX2VycihFUlIubWlzcGxhY2VkU3RhcnRUYWdGb3JIZWFkRWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5JbkhlYWQocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5IZWFkKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhFQUQpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEFGVEVSX0hFQURfTU9ERTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLkJPRFkgfHwgdG4gPT09ICQuQlIgfHwgdG4gPT09ICQuSFRNTCkge1xuICAgICAgICB0b2tlbkluSGVhZChwLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMCkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1Rob3JvdWdobHkoKTtcblxuICAgICAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lICE9PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgICAgICAgICAgcC5fZXJyKEVSUi5jbG9zaW5nT2ZFbGVtZW50V2l0aE9wZW5DaGlsZEVsZW1lbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuVEVNUExBVEUpO1xuICAgICAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgICAgIHAuX3BvcFRtcGxJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgICAgICBwLl9yZXNldEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAuX2VycihFUlIuZW5kVGFnV2l0aG91dE1hdGNoaW5nT3BlbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5fZXJyKEVSUi5lbmRUYWdXaXRob3V0TWF0Y2hpbmdPcGVuRWxlbWVudCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbkluSGVhZChwLCB0b2tlbikge1xuICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEFGVEVSX0hFQURfTU9ERTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG4vLyBUaGUgXCJpbiBoZWFkIG5vIHNjcmlwdFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkhlYWROb1NjcmlwdChwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IVE1MKSB7XG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0biA9PT0gJC5CQVNFRk9OVCB8fFxuICAgICAgICB0biA9PT0gJC5CR1NPVU5EIHx8XG4gICAgICAgIHRuID09PSAkLkhFQUQgfHxcbiAgICAgICAgdG4gPT09ICQuTElOSyB8fFxuICAgICAgICB0biA9PT0gJC5NRVRBIHx8XG4gICAgICAgIHRuID09PSAkLk5PRlJBTUVTIHx8XG4gICAgICAgIHRuID09PSAkLlNUWUxFXG4gICAgKSB7XG4gICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLk5PU0NSSVBUKSB7XG4gICAgICAgIHAuX2VycihFUlIubmVzdGVkTm9zY3JpcHRJbkhlYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuSW5IZWFkTm9TY3JpcHQocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5IZWFkTm9TY3JpcHQocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuTk9TQ1JJUFQpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0hFQURfTU9ERTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLkJSKSB7XG4gICAgICAgIHRva2VuSW5IZWFkTm9TY3JpcHQocCwgdG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHAuX2VycihFUlIuZW5kVGFnV2l0aG91dE1hdGNoaW5nT3BlbkVsZW1lbnQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5JbkhlYWROb1NjcmlwdChwLCB0b2tlbikge1xuICAgIGNvbnN0IGVyckNvZGUgPVxuICAgICAgICB0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuRU9GX1RPS0VOID8gRVJSLm9wZW5FbGVtZW50c0xlZnRBZnRlckVvZiA6IEVSUi5kaXNhbGxvd2VkQ29udGVudEluTm9zY3JpcHRJbkhlYWQ7XG5cbiAgICBwLl9lcnIoZXJyQ29kZSk7XG4gICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fSEVBRF9NT0RFO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG5cbi8vIFRoZSBcImFmdGVyIGhlYWRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJIZWFkKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuQk9EWSkge1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0JPRFlfTU9ERTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLkZSQU1FU0VUKSB7XG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9GUkFNRVNFVF9NT0RFO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRuID09PSAkLkJBU0UgfHxcbiAgICAgICAgdG4gPT09ICQuQkFTRUZPTlQgfHxcbiAgICAgICAgdG4gPT09ICQuQkdTT1VORCB8fFxuICAgICAgICB0biA9PT0gJC5MSU5LIHx8XG4gICAgICAgIHRuID09PSAkLk1FVEEgfHxcbiAgICAgICAgdG4gPT09ICQuTk9GUkFNRVMgfHxcbiAgICAgICAgdG4gPT09ICQuU0NSSVBUIHx8XG4gICAgICAgIHRuID09PSAkLlNUWUxFIHx8XG4gICAgICAgIHRuID09PSAkLlRFTVBMQVRFIHx8XG4gICAgICAgIHRuID09PSAkLlRJVExFXG4gICAgKSB7XG4gICAgICAgIHAuX2VycihFUlIuYWJhbmRvbmVkSGVhZEVsZW1lbnRDaGlsZCk7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnB1c2gocC5oZWFkRWxlbWVudCk7XG4gICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucmVtb3ZlKHAuaGVhZEVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuSEVBRCkge1xuICAgICAgICBwLl9lcnIoRVJSLm1pc3BsYWNlZFN0YXJ0VGFnRm9ySGVhZEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuQWZ0ZXJIZWFkKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0FmdGVySGVhZChwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5CT0RZIHx8IHRuID09PSAkLkhUTUwgfHwgdG4gPT09ICQuQlIpIHtcbiAgICAgICAgdG9rZW5BZnRlckhlYWQocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEVNUExBVEUpIHtcbiAgICAgICAgZW5kVGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwLl9lcnIoRVJSLmVuZFRhZ1dpdGhvdXRNYXRjaGluZ09wZW5FbGVtZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuQWZ0ZXJIZWFkKHAsIHRva2VuKSB7XG4gICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoJC5CT0RZKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9CT0RZX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuLy8gVGhlIFwiaW4gYm9keVwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGNoYXJhY3RlckluQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGh0bWxTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPT09IDApIHtcbiAgICAgICAgcC50cmVlQWRhcHRlci5hZG9wdEF0dHJpYnV0ZXMocC5vcGVuRWxlbWVudHMuaXRlbXNbMF0sIHRva2VuLmF0dHJzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJvZHlTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMudHJ5UGVla1Byb3Blcmx5TmVzdGVkQm9keUVsZW1lbnQoKTtcblxuICAgIGlmIChib2R5RWxlbWVudCAmJiBwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPT09IDApIHtcbiAgICAgICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgICAgIHAudHJlZUFkYXB0ZXIuYWRvcHRBdHRyaWJ1dGVzKGJvZHlFbGVtZW50LCB0b2tlbi5hdHRycyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmcmFtZXNldFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgYm9keUVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy50cnlQZWVrUHJvcGVybHlOZXN0ZWRCb2R5RWxlbWVudCgpO1xuXG4gICAgaWYgKHAuZnJhbWVzZXRPayAmJiBib2R5RWxlbWVudCkge1xuICAgICAgICBwLnRyZWVBZGFwdGVyLmRldGFjaE5vZGUoYm9keUVsZW1lbnQpO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BBbGxVcFRvSHRtbEVsZW1lbnQoKTtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0ZSQU1FU0VUX01PREU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyZWRIZWFkZXJTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKCQuUCkpIHtcbiAgICAgICAgcC5fY2xvc2VQRWxlbWVudCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHRuID0gcC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuSDEgfHwgdG4gPT09ICQuSDIgfHwgdG4gPT09ICQuSDMgfHwgdG4gPT09ICQuSDQgfHwgdG4gPT09ICQuSDUgfHwgdG4gPT09ICQuSDYpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgfVxuXG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG59XG5cbmZ1bmN0aW9uIHByZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luQnV0dG9uU2NvcGUoJC5QKSkge1xuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgLy9OT1RFOiBJZiB0aGUgbmV4dCB0b2tlbiBpcyBhIFUrMDAwQSBMSU5FIEZFRUQgKExGKSBjaGFyYWN0ZXIgdG9rZW4sIHRoZW4gaWdub3JlIHRoYXQgdG9rZW4gYW5kIG1vdmVcbiAgICAvL29uIHRvIHRoZSBuZXh0IG9uZS4gKE5ld2xpbmVzIGF0IHRoZSBzdGFydCBvZiBwcmUgYmxvY2tzIGFyZSBpZ25vcmVkIGFzIGFuIGF1dGhvcmluZyBjb252ZW5pZW5jZS4pXG4gICAgcC5za2lwTmV4dE5ld0xpbmUgPSB0cnVlO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBmb3JtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCBpblRlbXBsYXRlID0gcC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMDtcblxuICAgIGlmICghcC5mb3JtRWxlbWVudCB8fCBpblRlbXBsYXRlKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKCQuUCkpIHtcbiAgICAgICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuXG4gICAgICAgIGlmICghaW5UZW1wbGF0ZSkge1xuICAgICAgICAgICAgcC5mb3JtRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxpc3RJdGVtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcblxuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGZvciAobGV0IGkgPSBwLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zW2ldO1xuICAgICAgICBjb25zdCBlbGVtZW50VG4gPSBwLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoZWxlbWVudCk7XG4gICAgICAgIGxldCBjbG9zZVRuID0gbnVsbDtcblxuICAgICAgICBpZiAodG4gPT09ICQuTEkgJiYgZWxlbWVudFRuID09PSAkLkxJKSB7XG4gICAgICAgICAgICBjbG9zZVRuID0gJC5MSTtcbiAgICAgICAgfSBlbHNlIGlmICgodG4gPT09ICQuREQgfHwgdG4gPT09ICQuRFQpICYmIChlbGVtZW50VG4gPT09ICQuREQgfHwgZWxlbWVudFRuID09PSAkLkRUKSkge1xuICAgICAgICAgICAgY2xvc2VUbiA9IGVsZW1lbnRUbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbG9zZVRuKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbihjbG9zZVRuKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZChjbG9zZVRuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnRUbiAhPT0gJC5BRERSRVNTICYmIGVsZW1lbnRUbiAhPT0gJC5ESVYgJiYgZWxlbWVudFRuICE9PSAkLlAgJiYgcC5faXNTcGVjaWFsRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gcGxhaW50ZXh0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplci5NT0RFLlBMQUlOVEVYVDtcbn1cblxuZnVuY3Rpb24gYnV0dG9uU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLkJVVFRPTikpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5CVVRUT04pO1xuICAgIH1cblxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRFbnRyeSA9IHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmdldEVsZW1lbnRFbnRyeUluU2NvcGVXaXRoVGFnTmFtZSgkLkEpO1xuXG4gICAgaWYgKGFjdGl2ZUVsZW1lbnRFbnRyeSkge1xuICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5yZW1vdmUoYWN0aXZlRWxlbWVudEVudHJ5LmVsZW1lbnQpO1xuICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5yZW1vdmVFbnRyeShhY3RpdmVFbGVtZW50RW50cnkpO1xuICAgIH1cblxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHVzaEVsZW1lbnQocC5vcGVuRWxlbWVudHMuY3VycmVudCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnB1c2hFbGVtZW50KHAub3BlbkVsZW1lbnRzLmN1cnJlbnQsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gbm9iclN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcblxuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKCQuTk9CUikpIHtcbiAgICAgICAgY2FsbEFkb3B0aW9uQWdlbmN5KHAsIHRva2VuKTtcbiAgICAgICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5wdXNoRWxlbWVudChwLm9wZW5FbGVtZW50cy5jdXJyZW50LCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGFwcGxldFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdGFibGVTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChcbiAgICAgICAgcC50cmVlQWRhcHRlci5nZXREb2N1bWVudE1vZGUocC5kb2N1bWVudCkgIT09IEhUTUwuRE9DVU1FTlRfTU9ERS5RVUlSS1MgJiZcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApXG4gICAgKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9NT0RFO1xufVxuXG5mdW5jdGlvbiBhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHRva2VuLmFja1NlbGZDbG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaW5wdXRTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG5cbiAgICBjb25zdCBpbnB1dFR5cGUgPSBUb2tlbml6ZXIuZ2V0VG9rZW5BdHRyKHRva2VuLCBBVFRSUy5UWVBFKTtcblxuICAgIGlmICghaW5wdXRUeXBlIHx8IGlucHV0VHlwZS50b0xvd2VyQ2FzZSgpICE9PSBISURERU5fSU5QVVRfVFlQRSkge1xuICAgICAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHBhcmFtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGhyU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGltYWdlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICB0b2tlbi50YWdOYW1lID0gJC5JTUc7XG4gICAgYXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gdGV4dGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIC8vTk9URTogSWYgdGhlIG5leHQgdG9rZW4gaXMgYSBVKzAwMEEgTElORSBGRUVEIChMRikgY2hhcmFjdGVyIHRva2VuLCB0aGVuIGlnbm9yZSB0aGF0IHRva2VuIGFuZCBtb3ZlXG4gICAgLy9vbiB0byB0aGUgbmV4dCBvbmUuIChOZXdsaW5lcyBhdCB0aGUgc3RhcnQgb2YgdGV4dGFyZWEgZWxlbWVudHMgYXJlIGlnbm9yZWQgYXMgYW4gYXV0aG9yaW5nIGNvbnZlbmllbmNlLilcbiAgICBwLnNraXBOZXh0TmV3TGluZSA9IHRydWU7XG4gICAgcC50b2tlbml6ZXIuc3RhdGUgPSBUb2tlbml6ZXIuTU9ERS5SQ0RBVEE7XG4gICAgcC5vcmlnaW5hbEluc2VydGlvbk1vZGUgPSBwLmluc2VydGlvbk1vZGU7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gVEVYVF9NT0RFO1xufVxuXG5mdW5jdGlvbiB4bXBTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKCQuUCkpIHtcbiAgICAgICAgcC5fY2xvc2VQRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgVG9rZW5pemVyLk1PREUuUkFXVEVYVCk7XG59XG5cbmZ1bmN0aW9uIGlmcmFtZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgVG9rZW5pemVyLk1PREUuUkFXVEVYVCk7XG59XG5cbi8vTk9URTogaGVyZSB3ZSBhc3N1bWUgdGhhdCB3ZSBhbHdheXMgYWN0IGFzIGFuIHVzZXIgYWdlbnQgd2l0aCBlbmFibGVkIHBsdWdpbnMsIHNvIHdlIHBhcnNlXG4vLzxub2VtYmVkPiBhcyBhIHJhd3RleHQuXG5mdW5jdGlvbiBub2VtYmVkU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9zd2l0Y2hUb1RleHRQYXJzaW5nKHRva2VuLCBUb2tlbml6ZXIuTU9ERS5SQVdURVhUKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuXG4gICAgaWYgKFxuICAgICAgICBwLmluc2VydGlvbk1vZGUgPT09IElOX1RBQkxFX01PREUgfHxcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJTl9DQVBUSU9OX01PREUgfHxcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJTl9UQUJMRV9CT0RZX01PREUgfHxcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJTl9ST1dfTU9ERSB8fFxuICAgICAgICBwLmluc2VydGlvbk1vZGUgPT09IElOX0NFTExfTU9ERVxuICAgICkge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9TRUxFQ1RfTU9ERTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG9wdGdyb3VwU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgPT09ICQuT1BUSU9OKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIH1cblxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG59XG5cbmZ1bmN0aW9uIHJiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLlJVQlkpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gcnRTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKCQuUlVCWSkpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24oJC5SVEMpO1xuICAgIH1cblxuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xufVxuXG5mdW5jdGlvbiBtZW51U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gbWF0aFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcblxuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuTWF0aE1MQXR0cnModG9rZW4pO1xuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuWE1MQXR0cnModG9rZW4pO1xuXG4gICAgaWYgKHRva2VuLnNlbGZDbG9zaW5nKSB7XG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLk1BVEhNTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuTUFUSE1MKTtcbiAgICB9XG5cbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHN2Z1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcblxuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuU1ZHQXR0cnModG9rZW4pO1xuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuWE1MQXR0cnModG9rZW4pO1xuXG4gICAgaWYgKHRva2VuLnNlbGZDbG9zaW5nKSB7XG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLlNWRyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuU1ZHKTtcbiAgICB9XG5cbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG59XG5cbi8vT1BUSU1JWkFUSU9OOiBJbnRlZ2VyIGNvbXBhcmlzb25zIGFyZSBsb3ctY29zdCwgc28gd2UgY2FuIHVzZSB2ZXJ5IGZhc3QgdGFnIG5hbWUgbGVuZ3RoIGZpbHRlcnMgaGVyZS5cbi8vSXQncyBmYXN0ZXIgdGhhbiB1c2luZyBkaWN0aW9uYXJ5LlxuZnVuY3Rpb24gc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBzd2l0Y2ggKHRuLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuSSB8fCB0biA9PT0gJC5TIHx8IHRuID09PSAkLkIgfHwgdG4gPT09ICQuVSkge1xuICAgICAgICAgICAgICAgIGJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlApIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5BKSB7XG4gICAgICAgICAgICAgICAgYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkRMIHx8IHRuID09PSAkLk9MIHx8IHRuID09PSAkLlVMKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuSDEgfHwgdG4gPT09ICQuSDIgfHwgdG4gPT09ICQuSDMgfHwgdG4gPT09ICQuSDQgfHwgdG4gPT09ICQuSDUgfHwgdG4gPT09ICQuSDYpIHtcbiAgICAgICAgICAgICAgICBudW1iZXJlZEhlYWRlclN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTEkgfHwgdG4gPT09ICQuREQgfHwgdG4gPT09ICQuRFQpIHtcbiAgICAgICAgICAgICAgICBsaXN0SXRlbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRU0gfHwgdG4gPT09ICQuVFQpIHtcbiAgICAgICAgICAgICAgICBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5CUikge1xuICAgICAgICAgICAgICAgIGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkhSKSB7XG4gICAgICAgICAgICAgICAgaHJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlJCKSB7XG4gICAgICAgICAgICAgICAgcmJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlJUIHx8IHRuID09PSAkLlJQKSB7XG4gICAgICAgICAgICAgICAgcnRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuICE9PSAkLlRIICYmIHRuICE9PSAkLlREICYmIHRuICE9PSAkLlRSKSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkRJViB8fCB0biA9PT0gJC5ESVIgfHwgdG4gPT09ICQuTkFWKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuUFJFKSB7XG4gICAgICAgICAgICAgICAgcHJlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5CSUcpIHtcbiAgICAgICAgICAgICAgICBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5JTUcgfHwgdG4gPT09ICQuV0JSKSB7XG4gICAgICAgICAgICAgICAgYXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuWE1QKSB7XG4gICAgICAgICAgICAgICAgeG1wU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5TVkcpIHtcbiAgICAgICAgICAgICAgICBzdmdTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlJUQykge1xuICAgICAgICAgICAgICAgIHJiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biAhPT0gJC5DT0wpIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuSFRNTCkge1xuICAgICAgICAgICAgICAgIGh0bWxTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkJBU0UgfHwgdG4gPT09ICQuTElOSyB8fCB0biA9PT0gJC5NRVRBKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5CT0RZKSB7XG4gICAgICAgICAgICAgICAgYm9keVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTUFJTiB8fCB0biA9PT0gJC5NRU5VKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRk9STSkge1xuICAgICAgICAgICAgICAgIGZvcm1TdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkNPREUgfHwgdG4gPT09ICQuRk9OVCkge1xuICAgICAgICAgICAgICAgIGJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLk5PQlIpIHtcbiAgICAgICAgICAgICAgICBub2JyU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5BUkVBKSB7XG4gICAgICAgICAgICAgICAgYXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTUFUSCkge1xuICAgICAgICAgICAgICAgIG1hdGhTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLk1FTlUpIHtcbiAgICAgICAgICAgICAgICBtZW51U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biAhPT0gJC5IRUFEKSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlNUWUxFIHx8IHRuID09PSAkLlRJVExFKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5BU0lERSkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlNNQUxMKSB7XG4gICAgICAgICAgICAgICAgYlN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEFCTEUpIHtcbiAgICAgICAgICAgICAgICB0YWJsZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRU1CRUQpIHtcbiAgICAgICAgICAgICAgICBhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5JTlBVVCkge1xuICAgICAgICAgICAgICAgIGlucHV0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5QQVJBTSB8fCB0biA9PT0gJC5UUkFDSykge1xuICAgICAgICAgICAgICAgIHBhcmFtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5JTUFHRSkge1xuICAgICAgICAgICAgICAgIGltYWdlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biAhPT0gJC5GUkFNRSAmJiB0biAhPT0gJC5UQk9EWSAmJiB0biAhPT0gJC5URk9PVCAmJiB0biAhPT0gJC5USEVBRCkge1xuICAgICAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5TQ1JJUFQpIHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkNFTlRFUiB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkZJR1VSRSB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkZPT1RFUiB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkhFQURFUiB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkhHUk9VUCB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkRJQUxPR1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuQlVUVE9OKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5TVFJJS0UgfHwgdG4gPT09ICQuU1RST05HKSB7XG4gICAgICAgICAgICAgICAgYlN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuQVBQTEVUIHx8IHRuID09PSAkLk9CSkVDVCkge1xuICAgICAgICAgICAgICAgIGFwcGxldFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuS0VZR0VOKSB7XG4gICAgICAgICAgICAgICAgYXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuU09VUkNFKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1TdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLklGUkFNRSkge1xuICAgICAgICAgICAgICAgIGlmcmFtZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuU0VMRUNUKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5PUFRJT04pIHtcbiAgICAgICAgICAgICAgICBvcHRncm91cFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJHU09VTkQpIHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkRFVEFJTFMgfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5BRERSRVNTIHx8XG4gICAgICAgICAgICAgICAgdG4gPT09ICQuQVJUSUNMRSB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLlNFQ1RJT04gfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5TVU1NQVJZXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5MSVNUSU5HKSB7XG4gICAgICAgICAgICAgICAgcHJlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5NQVJRVUVFKSB7XG4gICAgICAgICAgICAgICAgYXBwbGV0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5OT0VNQkVEKSB7XG4gICAgICAgICAgICAgICAgbm9lbWJlZFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gIT09ICQuQ0FQVElPTikge1xuICAgICAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5CQVNFRk9OVCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRlJBTUVTRVQpIHtcbiAgICAgICAgICAgICAgICBmcmFtZXNldFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRklFTERTRVQpIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5URVhUQVJFQSkge1xuICAgICAgICAgICAgICAgIHRleHRhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTk9TQ1JJUFQpIHtcbiAgICAgICAgICAgICAgICBpZiAocC5vcHRpb25zLnNjcmlwdGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9lbWJlZFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuT1BUR1JPVVApIHtcbiAgICAgICAgICAgICAgICBvcHRncm91cFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gIT09ICQuQ09MR1JPVVApIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuUExBSU5URVhUKSB7XG4gICAgICAgICAgICAgICAgcGxhaW50ZXh0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJMT0NLUVVPVEUgfHwgdG4gPT09ICQuRklHQ0FQVElPTikge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYm9keUVuZFRhZ0luQm9keShwKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoJC5CT0RZKSkge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9CT0RZX01PREU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBodG1sRW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoJC5CT0RZKSkge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9CT0RZX01PREU7XG4gICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRyZXNzRW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUodG4pKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKHRuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1FbmRUYWdJbkJvZHkocCkge1xuICAgIGNvbnN0IGluVGVtcGxhdGUgPSBwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPiAwO1xuICAgIGNvbnN0IGZvcm1FbGVtZW50ID0gcC5mb3JtRWxlbWVudDtcblxuICAgIGlmICghaW5UZW1wbGF0ZSkge1xuICAgICAgICBwLmZvcm1FbGVtZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoKGZvcm1FbGVtZW50IHx8IGluVGVtcGxhdGUpICYmIHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoJC5GT1JNKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG5cbiAgICAgICAgaWYgKGluVGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLkZPUk0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucmVtb3ZlKGZvcm1FbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcEVuZFRhZ0luQm9keShwKSB7XG4gICAgaWYgKCFwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKCQuUCkpIHtcbiAgICAgICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoJC5QKTtcbiAgICB9XG5cbiAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG59XG5cbmZ1bmN0aW9uIGxpRW5kVGFnSW5Cb2R5KHApIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5MaXN0SXRlbVNjb3BlKCQuTEkpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uKCQuTEkpO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5MSSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZEVuZFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRuKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbih0bik7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJlZEhlYWRlckVuZFRhZ0luQm9keShwKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc051bWJlcmVkSGVhZGVySW5TY29wZSgpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxOdW1iZXJlZEhlYWRlclBvcHBlZCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXBwbGV0RW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUodG4pKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKHRuKTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJyRW5kVGFnSW5Cb2R5KHApIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEZha2VFbGVtZW50KCQuQlIpO1xuICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgZm9yIChsZXQgaSA9IHAub3BlbkVsZW1lbnRzLnN0YWNrVG9wOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5pdGVtc1tpXTtcblxuICAgICAgICBpZiAocC50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpID09PSB0bikge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24odG4pO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxFbGVtZW50UG9wcGVkKGVsZW1lbnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocC5faXNTcGVjaWFsRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vT1BUSU1JWkFUSU9OOiBJbnRlZ2VyIGNvbXBhcmlzb25zIGFyZSBsb3ctY29zdCwgc28gd2UgY2FuIHVzZSB2ZXJ5IGZhc3QgdGFnIG5hbWUgbGVuZ3RoIGZpbHRlcnMgaGVyZS5cbi8vSXQncyBmYXN0ZXIgdGhhbiB1c2luZyBkaWN0aW9uYXJ5LlxuZnVuY3Rpb24gZW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgc3dpdGNoICh0bi5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkEgfHwgdG4gPT09ICQuQiB8fCB0biA9PT0gJC5JIHx8IHRuID09PSAkLlMgfHwgdG4gPT09ICQuVSkge1xuICAgICAgICAgICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlApIHtcbiAgICAgICAgICAgICAgICBwRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5ETCB8fCB0biA9PT0gJC5VTCB8fCB0biA9PT0gJC5PTCkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5MSSkge1xuICAgICAgICAgICAgICAgIGxpRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuREQgfHwgdG4gPT09ICQuRFQpIHtcbiAgICAgICAgICAgICAgICBkZEVuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkgxIHx8IHRuID09PSAkLkgyIHx8IHRuID09PSAkLkgzIHx8IHRuID09PSAkLkg0IHx8IHRuID09PSAkLkg1IHx8IHRuID09PSAkLkg2KSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyZWRIZWFkZXJFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5CUikge1xuICAgICAgICAgICAgICAgIGJyRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRU0gfHwgdG4gPT09ICQuVFQpIHtcbiAgICAgICAgICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJJRykge1xuICAgICAgICAgICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkRJUiB8fCB0biA9PT0gJC5ESVYgfHwgdG4gPT09ICQuTkFWIHx8IHRuID09PSAkLlBSRSkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJPRFkpIHtcbiAgICAgICAgICAgICAgICBib2R5RW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuSFRNTCkge1xuICAgICAgICAgICAgICAgIGh0bWxFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5GT1JNKSB7XG4gICAgICAgICAgICAgICAgZm9ybUVuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkNPREUgfHwgdG4gPT09ICQuRk9OVCB8fCB0biA9PT0gJC5OT0JSKSB7XG4gICAgICAgICAgICAgICAgY2FsbEFkb3B0aW9uQWdlbmN5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTUFJTiB8fCB0biA9PT0gJC5NRU5VKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuQVNJREUpIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuU01BTEwpIHtcbiAgICAgICAgICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkNFTlRFUiB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkZJR1VSRSB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkZPT1RFUiB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkhFQURFUiB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkhHUk9VUCB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkRJQUxPR1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLkFQUExFVCB8fCB0biA9PT0gJC5PQkpFQ1QpIHtcbiAgICAgICAgICAgICAgICBhcHBsZXRFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5TVFJJS0UgfHwgdG4gPT09ICQuU1RST05HKSB7XG4gICAgICAgICAgICAgICAgY2FsbEFkb3B0aW9uQWdlbmN5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5BRERSRVNTIHx8XG4gICAgICAgICAgICAgICAgdG4gPT09ICQuQVJUSUNMRSB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkRFVEFJTFMgfHxcbiAgICAgICAgICAgICAgICB0biA9PT0gJC5TRUNUSU9OIHx8XG4gICAgICAgICAgICAgICAgdG4gPT09ICQuU1VNTUFSWSB8fFxuICAgICAgICAgICAgICAgIHRuID09PSAkLkxJU1RJTkdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5NQVJRVUVFKSB7XG4gICAgICAgICAgICAgICAgYXBwbGV0RW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5GSUVMRFNFVCkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICAgICAgICAgIGVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJMT0NLUVVPVEUgfHwgdG4gPT09ICQuRklHQ0FQVElPTikge1xuICAgICAgICAgICAgICAgIGFkZHJlc3NFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW9mSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAudG1wbEluc2VydGlvbk1vZGVTdGFja1RvcCA+IC0xKSB7XG4gICAgICAgIGVvZkluVGVtcGxhdGUocCwgdG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHAuc3RvcHBlZCA9IHRydWU7XG4gICAgfVxufVxuXG4vLyBUaGUgXCJ0ZXh0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBlbmRUYWdJblRleHQocCwgdG9rZW4pIHtcbiAgICBpZiAodG9rZW4udGFnTmFtZSA9PT0gJC5TQ1JJUFQpIHtcbiAgICAgICAgcC5wZW5kaW5nU2NyaXB0ID0gcC5vcGVuRWxlbWVudHMuY3VycmVudDtcbiAgICB9XG5cbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbn1cblxuZnVuY3Rpb24gZW9mSW5UZXh0KHAsIHRva2VuKSB7XG4gICAgcC5fZXJyKEVSUi5lb2ZJbkVsZW1lbnRUaGF0Q2FuQ29udGFpbk9ubHlUZXh0KTtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG4vLyBUaGUgXCJpbiB0YWJsZVwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gY2hhcmFjdGVySW5UYWJsZShwLCB0b2tlbikge1xuICAgIGNvbnN0IGN1clRuID0gcC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWU7XG5cbiAgICBpZiAoY3VyVG4gPT09ICQuVEFCTEUgfHwgY3VyVG4gPT09ICQuVEJPRFkgfHwgY3VyVG4gPT09ICQuVEZPT1QgfHwgY3VyVG4gPT09ICQuVEhFQUQgfHwgY3VyVG4gPT09ICQuVFIpIHtcbiAgICAgICAgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zID0gW107XG4gICAgICAgIHAuaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbiA9IGZhbHNlO1xuICAgICAgICBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHAuaW5zZXJ0aW9uTW9kZTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfVEVYVF9NT0RFO1xuICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjYXB0aW9uU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9DQVBUSU9OX01PREU7XG59XG5cbmZ1bmN0aW9uIGNvbGdyb3VwU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9DT0xVTU5fR1JPVVBfTU9ERTtcbn1cblxuZnVuY3Rpb24gY29sU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLl9pbnNlcnRGYWtlRWxlbWVudCgkLkNPTEdST1VQKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9DT0xVTU5fR1JPVVBfTU9ERTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG5mdW5jdGlvbiB0Ym9keVN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVDb250ZXh0KCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfQk9EWV9NT0RFO1xufVxuXG5mdW5jdGlvbiB0ZFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVDb250ZXh0KCk7XG4gICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoJC5UQk9EWSk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfQk9EWV9NT0RFO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHRhYmxlU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSgkLlRBQkxFKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5UQUJMRSk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5wdXRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBjb25zdCBpbnB1dFR5cGUgPSBUb2tlbml6ZXIuZ2V0VG9rZW5BdHRyKHRva2VuLCBBVFRSUy5UWVBFKTtcblxuICAgIGlmIChpbnB1dFR5cGUgJiYgaW5wdXRUeXBlLnRvTG93ZXJDYXNlKCkgPT09IEhJRERFTl9JTlBVVF9UWVBFKSB7XG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG4gICAgfVxuXG4gICAgdG9rZW4uYWNrU2VsZkNsb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBmb3JtU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgaWYgKCFwLmZvcm1FbGVtZW50ICYmIHAub3BlbkVsZW1lbnRzLnRtcGxDb3VudCA9PT0gMCkge1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5mb3JtRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgc3dpdGNoICh0bi5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlREIHx8IHRuID09PSAkLlRIIHx8IHRuID09PSAkLlRSKSB7XG4gICAgICAgICAgICAgICAgdGRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuQ09MKSB7XG4gICAgICAgICAgICAgICAgY29sU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkZPUk0pIHtcbiAgICAgICAgICAgICAgICBmb3JtU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgICAgICAgICAgdGFibGVTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0biA9PT0gJC5TVFlMRSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEJPRFkgfHwgdG4gPT09ICQuVEZPT1QgfHwgdG4gPT09ICQuVEhFQUQpIHtcbiAgICAgICAgICAgICAgICB0Ym9keVN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLklOUFVUKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuU0NSSVBUKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuQ0FQVElPTikge1xuICAgICAgICAgICAgICAgIGNhcHRpb25TdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuQ09MR1JPVVApIHtcbiAgICAgICAgICAgICAgICBjb2xncm91cFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuVEFCTEUpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSgkLlRBQkxFKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuVEFCTEUpO1xuICAgICAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgIGVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdG4gIT09ICQuQk9EWSAmJlxuICAgICAgICB0biAhPT0gJC5DQVBUSU9OICYmXG4gICAgICAgIHRuICE9PSAkLkNPTCAmJlxuICAgICAgICB0biAhPT0gJC5DT0xHUk9VUCAmJlxuICAgICAgICB0biAhPT0gJC5IVE1MICYmXG4gICAgICAgIHRuICE9PSAkLlRCT0RZICYmXG4gICAgICAgIHRuICE9PSAkLlREICYmXG4gICAgICAgIHRuICE9PSAkLlRGT09UICYmXG4gICAgICAgIHRuICE9PSAkLlRIICYmXG4gICAgICAgIHRuICE9PSAkLlRIRUFEICYmXG4gICAgICAgIHRuICE9PSAkLlRSXG4gICAgKSB7XG4gICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbkluVGFibGUocCwgdG9rZW4pIHtcbiAgICBjb25zdCBzYXZlZEZvc3RlclBhcmVudGluZ1N0YXRlID0gcC5mb3N0ZXJQYXJlbnRpbmdFbmFibGVkO1xuXG4gICAgcC5mb3N0ZXJQYXJlbnRpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICBwLl9wcm9jZXNzVG9rZW5JbkJvZHlNb2RlKHRva2VuKTtcbiAgICBwLmZvc3RlclBhcmVudGluZ0VuYWJsZWQgPSBzYXZlZEZvc3RlclBhcmVudGluZ1N0YXRlO1xufVxuXG4vLyBUaGUgXCJpbiB0YWJsZSB0ZXh0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5UYWJsZVRleHQocCwgdG9rZW4pIHtcbiAgICBwLnBlbmRpbmdDaGFyYWN0ZXJUb2tlbnMucHVzaCh0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGNoYXJhY3RlckluVGFibGVUZXh0KHAsIHRva2VuKSB7XG4gICAgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zLnB1c2godG9rZW4pO1xuICAgIHAuaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbiA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHRva2VuSW5UYWJsZVRleHQocCwgdG9rZW4pIHtcbiAgICBsZXQgaSA9IDA7XG5cbiAgICBpZiAocC5oYXNOb25XaGl0ZXNwYWNlUGVuZGluZ0NoYXJhY3RlclRva2VuKSB7XG4gICAgICAgIGZvciAoOyBpIDwgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbkluVGFibGUocCwgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zW2ldKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwLl9pbnNlcnRDaGFyYWN0ZXJzKHAucGVuZGluZ0NoYXJhY3RlclRva2Vuc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG4vLyBUaGUgXCJpbiBjYXB0aW9uXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luQ2FwdGlvbihwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmIChcbiAgICAgICAgdG4gPT09ICQuQ0FQVElPTiB8fFxuICAgICAgICB0biA9PT0gJC5DT0wgfHxcbiAgICAgICAgdG4gPT09ICQuQ09MR1JPVVAgfHxcbiAgICAgICAgdG4gPT09ICQuVEJPRFkgfHxcbiAgICAgICAgdG4gPT09ICQuVEQgfHxcbiAgICAgICAgdG4gPT09ICQuVEZPT1QgfHxcbiAgICAgICAgdG4gPT09ICQuVEggfHxcbiAgICAgICAgdG4gPT09ICQuVEhFQUQgfHxcbiAgICAgICAgdG4gPT09ICQuVFJcbiAgICApIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSgkLkNBUFRJT04pKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5DQVBUSU9OKTtcbiAgICAgICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmNsZWFyVG9MYXN0TWFya2VyKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9NT0RFO1xuICAgICAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luQ2FwdGlvbihwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5DQVBUSU9OIHx8IHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoJC5DQVBUSU9OKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuQ0FQVElPTik7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcblxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgICAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRuICE9PSAkLkJPRFkgJiZcbiAgICAgICAgdG4gIT09ICQuQ09MICYmXG4gICAgICAgIHRuICE9PSAkLkNPTEdST1VQICYmXG4gICAgICAgIHRuICE9PSAkLkhUTUwgJiZcbiAgICAgICAgdG4gIT09ICQuVEJPRFkgJiZcbiAgICAgICAgdG4gIT09ICQuVEQgJiZcbiAgICAgICAgdG4gIT09ICQuVEZPT1QgJiZcbiAgICAgICAgdG4gIT09ICQuVEggJiZcbiAgICAgICAgdG4gIT09ICQuVEhFQUQgJiZcbiAgICAgICAgdG4gIT09ICQuVFJcbiAgICApIHtcbiAgICAgICAgZW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImluIGNvbHVtbiBncm91cFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkNvbHVtbkdyb3VwKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuQ09MKSB7XG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgICAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5JbkNvbHVtbkdyb3VwKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luQ29sdW1uR3JvdXAocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuQ09MR1JPVVApIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLkNPTEdST1VQKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX01PREU7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgIGVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmICh0biAhPT0gJC5DT0wpIHtcbiAgICAgICAgdG9rZW5JbkNvbHVtbkdyb3VwKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuSW5Db2x1bW5Hcm91cChwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5DT0xHUk9VUCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImluIHRhYmxlIGJvZHlcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5UYWJsZUJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuVFIpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9ST1dfTU9ERTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRIIHx8IHRuID09PSAkLlREKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVCb2R5Q29udGV4dCgpO1xuICAgICAgICBwLl9pbnNlcnRGYWtlRWxlbWVudCgkLlRSKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fUk9XX01PREU7XG4gICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdG4gPT09ICQuQ0FQVElPTiB8fFxuICAgICAgICB0biA9PT0gJC5DT0wgfHxcbiAgICAgICAgdG4gPT09ICQuQ09MR1JPVVAgfHxcbiAgICAgICAgdG4gPT09ICQuVEJPRFkgfHxcbiAgICAgICAgdG4gPT09ICQuVEZPT1QgfHxcbiAgICAgICAgdG4gPT09ICQuVEhFQURcbiAgICApIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc1RhYmxlQm9keUNvbnRleHRJblRhYmxlU2NvcGUoKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX01PREU7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luVGFibGVCb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLlRCT0RZIHx8IHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIRUFEKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUodG4pKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEFCTEUpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc1RhYmxlQm9keUNvbnRleHRJblRhYmxlU2NvcGUoKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX01PREU7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHRuICE9PSAkLkJPRFkgJiYgdG4gIT09ICQuQ0FQVElPTiAmJiB0biAhPT0gJC5DT0wgJiYgdG4gIT09ICQuQ09MR1JPVVApIHx8XG4gICAgICAgICh0biAhPT0gJC5IVE1MICYmIHRuICE9PSAkLlREICYmIHRuICE9PSAkLlRIICYmIHRuICE9PSAkLlRSKVxuICAgICkge1xuICAgICAgICBlbmRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImluIHJvd1wiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJblJvdyhwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5USCB8fCB0biA9PT0gJC5URCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fQ0VMTF9NT0RFO1xuICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0biA9PT0gJC5DQVBUSU9OIHx8XG4gICAgICAgIHRuID09PSAkLkNPTCB8fFxuICAgICAgICB0biA9PT0gJC5DT0xHUk9VUCB8fFxuICAgICAgICB0biA9PT0gJC5UQk9EWSB8fFxuICAgICAgICB0biA9PT0gJC5URk9PVCB8fFxuICAgICAgICB0biA9PT0gJC5USEVBRCB8fFxuICAgICAgICB0biA9PT0gJC5UUlxuICAgICkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVFIpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luUm93KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLlRSKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoJC5UUikpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0KCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX0JPRFlfTU9ERTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEFCTEUpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSgkLlRSKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZVJvd0NvbnRleHQoKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfQk9EWV9NT0RFO1xuICAgICAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEJPRFkgfHwgdG4gPT09ICQuVEZPT1QgfHwgdG4gPT09ICQuVEhFQUQpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSh0bikgfHwgcC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVFIpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHRuICE9PSAkLkJPRFkgJiYgdG4gIT09ICQuQ0FQVElPTiAmJiB0biAhPT0gJC5DT0wgJiYgdG4gIT09ICQuQ09MR1JPVVApIHx8XG4gICAgICAgICh0biAhPT0gJC5IVE1MICYmIHRuICE9PSAkLlREICYmIHRuICE9PSAkLlRIKVxuICAgICkge1xuICAgICAgICBlbmRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImluIGNlbGxcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5DZWxsKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKFxuICAgICAgICB0biA9PT0gJC5DQVBUSU9OIHx8XG4gICAgICAgIHRuID09PSAkLkNPTCB8fFxuICAgICAgICB0biA9PT0gJC5DT0xHUk9VUCB8fFxuICAgICAgICB0biA9PT0gJC5UQk9EWSB8fFxuICAgICAgICB0biA9PT0gJC5URCB8fFxuICAgICAgICB0biA9PT0gJC5URk9PVCB8fFxuICAgICAgICB0biA9PT0gJC5USCB8fFxuICAgICAgICB0biA9PT0gJC5USEVBRCB8fFxuICAgICAgICB0biA9PT0gJC5UUlxuICAgICkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVEQpIHx8IHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSgkLlRIKSkge1xuICAgICAgICAgICAgcC5fY2xvc2VUYWJsZUNlbGwoKTtcbiAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlbmRUYWdJbkNlbGwocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuVEQgfHwgdG4gPT09ICQuVEgpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSh0bikpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fUk9XX01PREU7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLlRBQkxFIHx8IHRuID09PSAkLlRCT0RZIHx8IHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIRUFEIHx8IHRuID09PSAkLlRSKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUodG4pKSB7XG4gICAgICAgICAgICBwLl9jbG9zZVRhYmxlQ2VsbCgpO1xuICAgICAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG4gIT09ICQuQk9EWSAmJiB0biAhPT0gJC5DQVBUSU9OICYmIHRuICE9PSAkLkNPTCAmJiB0biAhPT0gJC5DT0xHUk9VUCAmJiB0biAhPT0gJC5IVE1MKSB7XG4gICAgICAgIGVuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgfVxufVxuXG4vLyBUaGUgXCJpbiBzZWxlY3RcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5TZWxlY3QocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuSFRNTCkge1xuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmICh0biA9PT0gJC5PUFRJT04pIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLk9QVElPTikge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLk9QVEdST1VQKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5PUFRJT04pIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLk9QVEdST1VQKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuSU5QVVQgfHwgdG4gPT09ICQuS0VZR0VOIHx8IHRuID09PSAkLlRFWFRBUkVBIHx8IHRuID09PSAkLlNFTEVDVCkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TZWxlY3RTY29wZSgkLlNFTEVDVCkpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlNFTEVDVCk7XG4gICAgICAgICAgICBwLl9yZXNldEluc2VydGlvbk1vZGUoKTtcblxuICAgICAgICAgICAgaWYgKHRuICE9PSAkLlNFTEVDVCkge1xuICAgICAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLlNDUklQVCB8fCB0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlbmRUYWdJblNlbGVjdChwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5PUFRHUk9VUCkge1xuICAgICAgICBjb25zdCBwcmV2T3BlbkVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5pdGVtc1twLm9wZW5FbGVtZW50cy5zdGFja1RvcCAtIDFdO1xuICAgICAgICBjb25zdCBwcmV2T3BlbkVsZW1lbnRUbiA9IHByZXZPcGVuRWxlbWVudCAmJiBwLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUocHJldk9wZW5FbGVtZW50KTtcblxuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgPT09ICQuT1BUSU9OICYmIHByZXZPcGVuRWxlbWVudFRuID09PSAkLk9QVEdST1VQKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5PUFRHUk9VUCkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRuID09PSAkLk9QVElPTikge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgPT09ICQuT1BUSU9OKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuU0VMRUNUICYmIHAub3BlbkVsZW1lbnRzLmhhc0luU2VsZWN0U2NvcGUoJC5TRUxFQ1QpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlNFTEVDVCk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuVEVNUExBVEUpIHtcbiAgICAgICAgZW5kVGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICB9XG59XG5cbi8vMTIuMi41LjQuMTcgVGhlIFwiaW4gc2VsZWN0IGluIHRhYmxlXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luU2VsZWN0SW5UYWJsZShwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmIChcbiAgICAgICAgdG4gPT09ICQuQ0FQVElPTiB8fFxuICAgICAgICB0biA9PT0gJC5UQUJMRSB8fFxuICAgICAgICB0biA9PT0gJC5UQk9EWSB8fFxuICAgICAgICB0biA9PT0gJC5URk9PVCB8fFxuICAgICAgICB0biA9PT0gJC5USEVBRCB8fFxuICAgICAgICB0biA9PT0gJC5UUiB8fFxuICAgICAgICB0biA9PT0gJC5URCB8fFxuICAgICAgICB0biA9PT0gJC5USFxuICAgICkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5TRUxFQ1QpO1xuICAgICAgICBwLl9yZXNldEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydFRhZ0luU2VsZWN0KHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luU2VsZWN0SW5UYWJsZShwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmIChcbiAgICAgICAgdG4gPT09ICQuQ0FQVElPTiB8fFxuICAgICAgICB0biA9PT0gJC5UQUJMRSB8fFxuICAgICAgICB0biA9PT0gJC5UQk9EWSB8fFxuICAgICAgICB0biA9PT0gJC5URk9PVCB8fFxuICAgICAgICB0biA9PT0gJC5USEVBRCB8fFxuICAgICAgICB0biA9PT0gJC5UUiB8fFxuICAgICAgICB0biA9PT0gJC5URCB8fFxuICAgICAgICB0biA9PT0gJC5USFxuICAgICkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKHRuKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuU0VMRUNUKTtcbiAgICAgICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZFRhZ0luU2VsZWN0KHAsIHRva2VuKTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImluIHRlbXBsYXRlXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luVGVtcGxhdGUocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAoXG4gICAgICAgIHRuID09PSAkLkJBU0UgfHxcbiAgICAgICAgdG4gPT09ICQuQkFTRUZPTlQgfHxcbiAgICAgICAgdG4gPT09ICQuQkdTT1VORCB8fFxuICAgICAgICB0biA9PT0gJC5MSU5LIHx8XG4gICAgICAgIHRuID09PSAkLk1FVEEgfHxcbiAgICAgICAgdG4gPT09ICQuTk9GUkFNRVMgfHxcbiAgICAgICAgdG4gPT09ICQuU0NSSVBUIHx8XG4gICAgICAgIHRuID09PSAkLlNUWUxFIHx8XG4gICAgICAgIHRuID09PSAkLlRFTVBMQVRFIHx8XG4gICAgICAgIHRuID09PSAkLlRJVExFXG4gICAgKSB7XG4gICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdJbnNlcnRpb25Nb2RlID0gVEVNUExBVEVfSU5TRVJUSU9OX01PREVfU1dJVENIX01BUFt0bl0gfHwgSU5fQk9EWV9NT0RFO1xuXG4gICAgICAgIHAuX3BvcFRtcGxJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3B1c2hUbXBsSW5zZXJ0aW9uTW9kZShuZXdJbnNlcnRpb25Nb2RlKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gbmV3SW5zZXJ0aW9uTW9kZTtcbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luVGVtcGxhdGUocCwgdG9rZW4pIHtcbiAgICBpZiAodG9rZW4udGFnTmFtZSA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICBlbmRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW9mSW5UZW1wbGF0ZShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPiAwKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlRFTVBMQVRFKTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgcC5fcG9wVG1wbEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5zdG9wcGVkID0gdHJ1ZTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImFmdGVyIGJvZHlcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJCb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuSFRNTCkge1xuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5BZnRlckJvZHkocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnQWZ0ZXJCb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuSFRNTCkge1xuICAgICAgICBpZiAoIXAuZnJhZ21lbnRDb250ZXh0KSB7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9BRlRFUl9CT0RZX01PREU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbkFmdGVyQm9keShwLCB0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbkFmdGVyQm9keShwLCB0b2tlbikge1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0JPRFlfTU9ERTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG4vLyBUaGUgXCJpbiBmcmFtZXNldFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuRlJBTUVTRVQpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgfSBlbHNlIGlmICh0biA9PT0gJC5GUkFNRSkge1xuICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgdG9rZW4uYWNrU2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTk9GUkFNRVMpIHtcbiAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5GcmFtZXNldChwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdOYW1lID09PSAkLkZSQU1FU0VUICYmICFwLm9wZW5FbGVtZW50cy5pc1Jvb3RIdG1sRWxlbWVudEN1cnJlbnQoKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgICAgICBpZiAoIXAuZnJhZ21lbnRDb250ZXh0ICYmIHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lICE9PSAkLkZSQU1FU0VUKSB7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9GUkFNRVNFVF9NT0RFO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBUaGUgXCJhZnRlciBmcmFtZXNldFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdBZnRlckZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTk9GUkFNRVMpIHtcbiAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnQWZ0ZXJGcmFtZXNldChwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdOYW1lID09PSAkLkhUTUwpIHtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gQUZURVJfQUZURVJfRlJBTUVTRVRfTU9ERTtcbiAgICB9XG59XG5cbi8vIFRoZSBcImFmdGVyIGFmdGVyIGJvZHlcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJBZnRlckJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAodG9rZW4udGFnTmFtZSA9PT0gJC5IVE1MKSB7XG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbkFmdGVyQWZ0ZXJCb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuQWZ0ZXJBZnRlckJvZHkocCwgdG9rZW4pIHtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9CT0RZX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuLy8gVGhlIFwiYWZ0ZXIgYWZ0ZXIgZnJhbWVzZXRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJBZnRlckZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodG4gPT09ICQuTk9GUkFNRVMpIHtcbiAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgIH1cbn1cblxuLy8gVGhlIHJ1bGVzIGZvciBwYXJzaW5nIHRva2VucyBpbiBmb3JlaWduIGNvbnRlbnRcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBudWxsQ2hhcmFjdGVySW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIHRva2VuLmNoYXJzID0gdW5pY29kZS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGNoYXJhY3RlckluRm9yZWlnbkNvbnRlbnQocCwgdG9rZW4pIHtcbiAgICBwLl9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc3RhcnRUYWdJbkZvcmVpZ25Db250ZW50KHAsIHRva2VuKSB7XG4gICAgaWYgKGZvcmVpZ25Db250ZW50LmNhdXNlc0V4aXQodG9rZW4pICYmICFwLmZyYWdtZW50Q29udGV4dCkge1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgICBwLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShwLm9wZW5FbGVtZW50cy5jdXJyZW50KSAhPT0gTlMuSFRNTCAmJlxuICAgICAgICAgICAgIXAuX2lzSW50ZWdyYXRpb25Qb2ludChwLm9wZW5FbGVtZW50cy5jdXJyZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gcC5fZ2V0QWRqdXN0ZWRDdXJyZW50RWxlbWVudCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50TnMgPSBwLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShjdXJyZW50KTtcblxuICAgICAgICBpZiAoY3VycmVudE5zID09PSBOUy5NQVRITUwpIHtcbiAgICAgICAgICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuTWF0aE1MQXR0cnModG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnROcyA9PT0gTlMuU1ZHKSB7XG4gICAgICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblNWR1RhZ05hbWUodG9rZW4pO1xuICAgICAgICAgICAgZm9yZWlnbkNvbnRlbnQuYWRqdXN0VG9rZW5TVkdBdHRycyh0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblhNTEF0dHJzKHRva2VuKTtcblxuICAgICAgICBpZiAodG9rZW4uc2VsZkNsb3NpbmcpIHtcbiAgICAgICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIGN1cnJlbnROcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBjdXJyZW50TnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9rZW4uYWNrU2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIGZvciAobGV0IGkgPSBwLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuaXRlbXNbaV07XG5cbiAgICAgICAgaWYgKHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpID09PSBOUy5IVE1MKSB7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocC50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpLnRvTG93ZXJDYXNlKCkgPT09IHRva2VuLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsRWxlbWVudFBvcHBlZChlbGVtZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19