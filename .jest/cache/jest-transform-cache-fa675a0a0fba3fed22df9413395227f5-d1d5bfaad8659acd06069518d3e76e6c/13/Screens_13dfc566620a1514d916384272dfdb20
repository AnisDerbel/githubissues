756ecfedb8c32c79c34e5adf55ca2745
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.MaybeScreen = exports.MaybeScreenContainer = exports.shouldUseActivityState = void 0;

var React = _interopRequireWildcard(require("react"));



var _Screens;

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

var Screens;

try {
  Screens = require('react-native-screens');
} catch (e) {
}var




WebScreen = function (_React$Component) {require("@babel/runtime/helpers/inherits")(WebScreen, _React$Component);var _super = _createSuper(WebScreen);function WebScreen() {require("@babel/runtime/helpers/classCallCheck")(this, WebScreen);return _super.apply(this, arguments);}require("@babel/runtime/helpers/createClass")(WebScreen, [{ key: "render", value:
    function render() {var _this$props =




      this.props,active = _this$props.active,style = _this$props.style,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_this$props, ["active", "style"]);
      return React.createElement(require("react-native").View,
      _extends({
        hidden: !active,
        style: [style, {
          display: active ? 'flex' : 'none' }] },

      rest));
    } }]);return WebScreen;}(React.Component);



var AnimatedWebScreen = require("react-native").Animated.createAnimatedComponent(WebScreen);


var shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;
exports.shouldUseActivityState = shouldUseActivityState;

var MaybeScreenContainer = function MaybeScreenContainer(_ref)


{var enabled = _ref.enabled,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, ["enabled"]);
  var _Screens2;

  if (enabled && require("react-native").Platform.OS !== 'web' && (_Screens2 = Screens) !== null && _Screens2 !== void 0 && _Screens2.screensEnabled()) {
    return (


      React.createElement(Screens.ScreenContainer, _extends({
        enabled: enabled },
      rest)));

  }

  return React.createElement(require("react-native").View, rest);
};

exports.MaybeScreenContainer = MaybeScreenContainer;

var MaybeScreen = function MaybeScreen(_ref2)



{var enabled = _ref2.enabled,active = _ref2.active,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref2, ["enabled", "active"]);
  var _Screens3;

  if (enabled && require("react-native").Platform.OS === 'web') {
    return React.createElement(AnimatedWebScreen, _extends({
      active: active },
    rest));
  }

  if (enabled && (_Screens3 = Screens) !== null && _Screens3 !== void 0 && _Screens3.screensEnabled()) {
    if (shouldUseActivityState) {
      return (


        React.createElement(Screens.Screen, _extends({
          enabled: enabled,
          activityState: active },
        rest)));

    } else {
      return (


        React.createElement(Screens.Screen, _extends({
          enabled: enabled,
          active: active },
        rest)));

    }
  }

  return React.createElement(require("react-native").View, rest);
};

exports.MaybeScreen = MaybeScreen;