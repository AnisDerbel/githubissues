2f2c6a86fdb8286aba3b2c438414d624
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compilePseudoSelector = exports.pseudos = exports.filters = void 0;

var boolbase_1 = require("boolbase");

var filters_1 = require("./filters");

Object.defineProperty(exports, "filters", {
  enumerable: true,
  get: function get() {
    return filters_1.filters;
  }
});

var pseudos_1 = require("./pseudos");

Object.defineProperty(exports, "pseudos", {
  enumerable: true,
  get: function get() {
    return pseudos_1.pseudos;
  }
});

var subselects_1 = require("./subselects");

var reCSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

function compilePseudoSelector(next, selector, options, context, compileToken) {
  var name = selector.name,
      data = selector.data;

  if (options.strict && !reCSS3.test(name)) {
    throw new Error(":" + name + " isn't part of CSS3");
  }

  if (Array.isArray(data)) {
    return subselects_1.subselects[name](next, data, options, context, compileToken);
  }

  if (name in filters_1.filters) {
    return filters_1.filters[name](next, data, options, context);
  }

  if (name in pseudos_1.pseudos) {
    var pseudo_1 = pseudos_1.pseudos[name];
    pseudos_1.verifyPseudoArgs(pseudo_1, name, data);
    return pseudo_1 === boolbase_1.falseFunc ? boolbase_1.falseFunc : next === boolbase_1.trueFunc ? function (elem) {
      return pseudo_1(elem, options, data);
    } : function (elem) {
      return pseudo_1(elem, options, data) && next(elem);
    };
  }

  throw new Error("unmatched pseudo-class :" + name);
}

exports.compilePseudoSelector = compilePseudoSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tcGlsZVBzZXVkb1NlbGVjdG9yIiwicHNldWRvcyIsImZpbHRlcnMiLCJib29sYmFzZV8xIiwicmVxdWlyZSIsImZpbHRlcnNfMSIsImVudW1lcmFibGUiLCJnZXQiLCJwc2V1ZG9zXzEiLCJzdWJzZWxlY3RzXzEiLCJyZUNTUzMiLCJuZXh0Iiwic2VsZWN0b3IiLCJvcHRpb25zIiwiY29udGV4dCIsImNvbXBpbGVUb2tlbiIsIm5hbWUiLCJkYXRhIiwic3RyaWN0IiwidGVzdCIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5Iiwic3Vic2VsZWN0cyIsInBzZXVkb18xIiwidmVyaWZ5UHNldWRvQXJncyIsImZhbHNlRnVuYyIsInRydWVGdW5jIiwiZWxlbSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7QUFDQUQsT0FBTyxDQUFDRSxxQkFBUixHQUFnQ0YsT0FBTyxDQUFDRyxPQUFSLEdBQWtCSCxPQUFPLENBQUNJLE9BQVIsR0FBa0IsS0FBSyxDQUF6RTs7QUFlQSxJQUFJQyxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLElBQUlDLFNBQVMsR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0FSLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsU0FBL0IsRUFBMEM7QUFBRVEsRUFBQUEsVUFBVSxFQUFFLElBQWQ7QUFBb0JDLEVBQUFBLEdBQUcsRUFBRSxlQUFZO0FBQUUsV0FBT0YsU0FBUyxDQUFDSCxPQUFqQjtBQUEyQjtBQUFsRSxDQUExQzs7QUFDQSxJQUFJTSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUNBUixNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFNBQS9CLEVBQTBDO0FBQUVRLEVBQUFBLFVBQVUsRUFBRSxJQUFkO0FBQW9CQyxFQUFBQSxHQUFHLEVBQUUsZUFBWTtBQUFFLFdBQU9DLFNBQVMsQ0FBQ1AsT0FBakI7QUFBMkI7QUFBbEUsQ0FBMUM7O0FBQ0EsSUFBSVEsWUFBWSxHQUFHTCxPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFFQSxJQUFJTSxNQUFNLEdBQUcsd0ZBQWI7O0FBQ0EsU0FBU1YscUJBQVQsQ0FBK0JXLElBQS9CLEVBQXFDQyxRQUFyQyxFQUErQ0MsT0FBL0MsRUFBd0RDLE9BQXhELEVBQWlFQyxZQUFqRSxFQUErRTtBQUMzRSxNQUFJQyxJQUFJLEdBQUdKLFFBQVEsQ0FBQ0ksSUFBcEI7QUFBQSxNQUEwQkMsSUFBSSxHQUFHTCxRQUFRLENBQUNLLElBQTFDOztBQUNBLE1BQUlKLE9BQU8sQ0FBQ0ssTUFBUixJQUFrQixDQUFDUixNQUFNLENBQUNTLElBQVAsQ0FBWUgsSUFBWixDQUF2QixFQUEwQztBQUN0QyxVQUFNLElBQUlJLEtBQUosQ0FBVSxNQUFNSixJQUFOLEdBQWEscUJBQXZCLENBQU47QUFDSDs7QUFDRCxNQUFJSyxLQUFLLENBQUNDLE9BQU4sQ0FBY0wsSUFBZCxDQUFKLEVBQXlCO0FBQ3JCLFdBQU9SLFlBQVksQ0FBQ2MsVUFBYixDQUF3QlAsSUFBeEIsRUFBOEJMLElBQTlCLEVBQW9DTSxJQUFwQyxFQUEwQ0osT0FBMUMsRUFBbURDLE9BQW5ELEVBQTREQyxZQUE1RCxDQUFQO0FBQ0g7O0FBQ0QsTUFBSUMsSUFBSSxJQUFJWCxTQUFTLENBQUNILE9BQXRCLEVBQStCO0FBQzNCLFdBQU9HLFNBQVMsQ0FBQ0gsT0FBVixDQUFrQmMsSUFBbEIsRUFBd0JMLElBQXhCLEVBQThCTSxJQUE5QixFQUFvQ0osT0FBcEMsRUFBNkNDLE9BQTdDLENBQVA7QUFDSDs7QUFDRCxNQUFJRSxJQUFJLElBQUlSLFNBQVMsQ0FBQ1AsT0FBdEIsRUFBK0I7QUFDM0IsUUFBSXVCLFFBQVEsR0FBR2hCLFNBQVMsQ0FBQ1AsT0FBVixDQUFrQmUsSUFBbEIsQ0FBZjtBQUNBUixJQUFBQSxTQUFTLENBQUNpQixnQkFBVixDQUEyQkQsUUFBM0IsRUFBcUNSLElBQXJDLEVBQTJDQyxJQUEzQztBQUNBLFdBQU9PLFFBQVEsS0FBS3JCLFVBQVUsQ0FBQ3VCLFNBQXhCLEdBQ0R2QixVQUFVLENBQUN1QixTQURWLEdBRURmLElBQUksS0FBS1IsVUFBVSxDQUFDd0IsUUFBcEIsR0FDSSxVQUFVQyxJQUFWLEVBQWdCO0FBQUUsYUFBT0osUUFBUSxDQUFDSSxJQUFELEVBQU9mLE9BQVAsRUFBZ0JJLElBQWhCLENBQWY7QUFBdUMsS0FEN0QsR0FFSSxVQUFVVyxJQUFWLEVBQWdCO0FBQUUsYUFBT0osUUFBUSxDQUFDSSxJQUFELEVBQU9mLE9BQVAsRUFBZ0JJLElBQWhCLENBQVIsSUFBaUNOLElBQUksQ0FBQ2lCLElBQUQsQ0FBNUM7QUFBcUQsS0FKakY7QUFLSDs7QUFDRCxRQUFNLElBQUlSLEtBQUosQ0FBVSw2QkFBNkJKLElBQXZDLENBQU47QUFDSDs7QUFDRGxCLE9BQU8sQ0FBQ0UscUJBQVIsR0FBZ0NBLHFCQUFoQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21waWxlUHNldWRvU2VsZWN0b3IgPSBleHBvcnRzLnBzZXVkb3MgPSBleHBvcnRzLmZpbHRlcnMgPSB2b2lkIDA7XG4vKlxuICogUHNldWRvIHNlbGVjdG9yc1xuICpcbiAqIFBzZXVkbyBzZWxlY3RvcnMgYXJlIGF2YWlsYWJsZSBpbiB0aHJlZSBmb3JtczpcbiAqXG4gKiAxLiBGaWx0ZXJzIGFyZSBjYWxsZWQgd2hlbiB0aGUgc2VsZWN0b3IgaXMgY29tcGlsZWQgYW5kIHJldHVybiBhIGZ1bmN0aW9uXG4gKiAgdGhhdCBoYXMgdG8gcmV0dXJuIGVpdGhlciBmYWxzZSwgb3IgdGhlIHJlc3VsdHMgb2YgYG5leHQoKWAuXG4gKiAyLiBQc2V1ZG9zIGFyZSBjYWxsZWQgb24gZXhlY3V0aW9uLiBUaGV5IGhhdmUgdG8gcmV0dXJuIGEgYm9vbGVhbi5cbiAqIDMuIFN1YnNlbGVjdHMgd29yayBsaWtlIGZpbHRlcnMsIGJ1dCBoYXZlIGFuIGVtYmVkZGVkIHNlbGVjdG9yIHRoYXQgd2lsbCBiZSBydW4gc2VwYXJhdGVseS5cbiAqXG4gKiBGaWx0ZXJzIGFyZSBncmVhdCBpZiB5b3Ugd2FudCB0byBkbyBzb21lIHByZS1wcm9jZXNzaW5nLCBvciBjaGFuZ2UgdGhlIGNhbGwgb3JkZXJcbiAqIG9mIGBuZXh0KClgIGFuZCB5b3VyIGNvZGUuXG4gKiBQc2V1ZG9zIHNob3VsZCBiZSB1c2VkIHRvIGltcGxlbWVudCBzaW1wbGUgY2hlY2tzLlxuICovXG52YXIgYm9vbGJhc2VfMSA9IHJlcXVpcmUoXCJib29sYmFzZVwiKTtcbnZhciBmaWx0ZXJzXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmlsdGVyc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmlsdGVyc18xLmZpbHRlcnM7IH0gfSk7XG52YXIgcHNldWRvc18xID0gcmVxdWlyZShcIi4vcHNldWRvc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBzZXVkb3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBzZXVkb3NfMS5wc2V1ZG9zOyB9IH0pO1xudmFyIHN1YnNlbGVjdHNfMSA9IHJlcXVpcmUoXCIuL3N1YnNlbGVjdHNcIik7XG4vLyBGSVhNRSBUaGlzIGlzIHByZXR0eSBoYWNreVxudmFyIHJlQ1NTMyA9IC9eKD86KD86bnRofGxhc3R8Zmlyc3R8b25seSktKD86Y2hpbGR8b2YtdHlwZSl8cm9vdHxlbXB0eXwoPzplbnxkaXMpYWJsZWR8Y2hlY2tlZHxub3QpJC87XG5mdW5jdGlvbiBjb21waWxlUHNldWRvU2VsZWN0b3IobmV4dCwgc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikge1xuICAgIHZhciBuYW1lID0gc2VsZWN0b3IubmFtZSwgZGF0YSA9IHNlbGVjdG9yLmRhdGE7XG4gICAgaWYgKG9wdGlvbnMuc3RyaWN0ICYmICFyZUNTUzMudGVzdChuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCI6XCIgKyBuYW1lICsgXCIgaXNuJ3QgcGFydCBvZiBDU1MzXCIpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gc3Vic2VsZWN0c18xLnN1YnNlbGVjdHNbbmFtZV0obmV4dCwgZGF0YSwgb3B0aW9ucywgY29udGV4dCwgY29tcGlsZVRva2VuKTtcbiAgICB9XG4gICAgaWYgKG5hbWUgaW4gZmlsdGVyc18xLmZpbHRlcnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcnNfMS5maWx0ZXJzW25hbWVdKG5leHQsIGRhdGEsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAobmFtZSBpbiBwc2V1ZG9zXzEucHNldWRvcykge1xuICAgICAgICB2YXIgcHNldWRvXzEgPSBwc2V1ZG9zXzEucHNldWRvc1tuYW1lXTtcbiAgICAgICAgcHNldWRvc18xLnZlcmlmeVBzZXVkb0FyZ3MocHNldWRvXzEsIG5hbWUsIGRhdGEpO1xuICAgICAgICByZXR1cm4gcHNldWRvXzEgPT09IGJvb2xiYXNlXzEuZmFsc2VGdW5jXG4gICAgICAgICAgICA/IGJvb2xiYXNlXzEuZmFsc2VGdW5jXG4gICAgICAgICAgICA6IG5leHQgPT09IGJvb2xiYXNlXzEudHJ1ZUZ1bmNcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBwc2V1ZG9fMShlbGVtLCBvcHRpb25zLCBkYXRhKTsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHBzZXVkb18xKGVsZW0sIG9wdGlvbnMsIGRhdGEpICYmIG5leHQoZWxlbSk7IH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcInVubWF0Y2hlZCBwc2V1ZG8tY2xhc3MgOlwiICsgbmFtZSk7XG59XG5leHBvcnRzLmNvbXBpbGVQc2V1ZG9TZWxlY3RvciA9IGNvbXBpbGVQc2V1ZG9TZWxlY3RvcjtcbiJdfQ==