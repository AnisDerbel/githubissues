407c19a8344874e39b62cabd5240ff42
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;

var querying_1 = require("./querying");

var tagtypes_1 = require("./tagtypes");

var Checks = {
  tag_name: function tag_name(name) {
    if (typeof name === "function") {
      return function (elem) {
        return tagtypes_1.isTag(elem) && name(elem.name);
      };
    } else if (name === "*") {
      return tagtypes_1.isTag;
    }

    return function (elem) {
      return tagtypes_1.isTag(elem) && elem.name === name;
    };
  },
  tag_type: function tag_type(type) {
    if (typeof type === "function") {
      return function (elem) {
        return type(elem.type);
      };
    }

    return function (elem) {
      return elem.type === type;
    };
  },
  tag_contains: function tag_contains(data) {
    if (typeof data === "function") {
      return function (elem) {
        return tagtypes_1.isText(elem) && data(elem.data);
      };
    }

    return function (elem) {
      return tagtypes_1.isText(elem) && elem.data === data;
    };
  }
};

function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return function (elem) {
      return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]);
    };
  }

  return function (elem) {
    return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value;
  };
}

function combineFuncs(a, b) {
  return function (elem) {
    return a(elem) || b(elem);
  };
}

function compileTest(options) {
  var funcs = Object.keys(options).map(function (key) {
    var value = options[key];
    return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}

function testElement(options, node) {
  var test = compileTest(options);
  return test ? test(node) : true;
}

exports.testElement = testElement;

function getElements(options, nodes, recurse, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }

  var test = compileTest(options);
  return test ? querying_1.filter(test, nodes, recurse, limit) : [];
}

exports.getElements = getElements;

function getElementById(id, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (!Array.isArray(nodes)) nodes = [nodes];
  return querying_1.findOne(getAttribCheck("id", id), nodes, recurse);
}

exports.getElementById = getElementById;

function getElementsByTagName(tagName, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (limit === void 0) {
    limit = Infinity;
  }

  return querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);
}

exports.getElementsByTagName = getElementsByTagName;

function getElementsByTagType(type, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }

  if (limit === void 0) {
    limit = Infinity;
  }

  return querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);
}

exports.getElementsByTagType = getElementsByTagType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,