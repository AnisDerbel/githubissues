a4d2710618b9e9e6cd0e337672664908
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _native = require("@react-navigation/native");

var variants = {
  h1: {
    fontSize: 22,
    fontWeight: 'bold'
  },
  title: {
    fontSize: 20
  },
  body: {
    fontSize: 16
  },
  tag: {
    fontSize: 14
  },
  info: {
    fontSize: 12
  }
};
var colors = {
  black: '#000000',
  white: '#FFFFFF',
  grey: 'grey',
  lightGrey: '#d3d3d3'
};
var spacing = {
  xs: 4,
  s: 8,
  m: 16,
  l: 24,
  xl: 32
};
var CombinedDefaultTheme = (0, _extends2.default)((0, _extends2.default)((0, _extends2.default)({}, _reactNativePaper.DefaultTheme), _native.DefaultTheme), {
  colors: (0, _extends2.default)((0, _extends2.default)((0, _extends2.default)({}, _reactNativePaper.DefaultTheme.colors), _native.DefaultTheme.colors), {
    primary: colors.black,
    accent: colors.lightGrey,
    divider: colors.grey,
    badge: colors.black
  }),
  variants: variants,
  spacing: spacing
});
var CombinedDarkTheme = (0, _extends2.default)((0, _extends2.default)((0, _extends2.default)({}, _reactNativePaper.DarkTheme), _native.DarkTheme), {
  colors: (0, _extends2.default)((0, _extends2.default)((0, _extends2.default)({}, _reactNativePaper.DarkTheme.colors), _native.DarkTheme.colors), {
    primary: colors.white,
    accent: colors.white,
    badge: colors.black,
    divider: colors.white
  }),
  variants: variants,
  spacing: spacing
});

var colorScheme = _reactNative.Appearance.getColorScheme();

var isThemeDark = colorScheme === 'dark';

var _default = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmlzZGVyYmVsL0RvY3VtZW50cy9hcGNnaXRodWJpc3N1ZXMvc3JjL3RoZW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUlBOztBQXdCQSxJQUFNLFFBQVEsR0FBaUI7QUFDN0IsRUFBQSxFQUFFLEVBQUU7QUFDRixJQUFBLFFBQVEsRUFBRSxFQURSO0FBRUYsSUFBQSxVQUFVLEVBQUU7QUFGVixHQUR5QjtBQUs3QixFQUFBLEtBQUssRUFBRTtBQUNMLElBQUEsUUFBUSxFQUFFO0FBREwsR0FMc0I7QUFRN0IsRUFBQSxJQUFJLEVBQUU7QUFDSixJQUFBLFFBQVEsRUFBRTtBQUROLEdBUnVCO0FBVzdCLEVBQUEsR0FBRyxFQUFFO0FBQ0gsSUFBQSxRQUFRLEVBQUU7QUFEUCxHQVh3QjtBQWM3QixFQUFBLElBQUksRUFBRTtBQUNKLElBQUEsUUFBUSxFQUFFO0FBRE47QUFkdUIsQ0FBL0I7QUFtQkEsSUFBTSxNQUFNLEdBQUc7QUFDYixFQUFBLEtBQUssRUFBRSxTQURNO0FBRWIsRUFBQSxLQUFLLEVBQUUsU0FGTTtBQUdiLEVBQUEsSUFBSSxFQUFFLE1BSE87QUFJYixFQUFBLFNBQVMsRUFBRTtBQUpFLENBQWY7QUFNQSxJQUFNLE9BQU8sR0FBaUI7QUFDNUIsRUFBQSxFQUFFLEVBQUUsQ0FEd0I7QUFFNUIsRUFBQSxDQUFDLEVBQUUsQ0FGeUI7QUFHNUIsRUFBQSxDQUFDLEVBQUUsRUFIeUI7QUFJNUIsRUFBQSxDQUFDLEVBQUUsRUFKeUI7QUFLNUIsRUFBQSxFQUFFLEVBQUU7QUFMd0IsQ0FBOUI7QUFPQSxJQUFNLG9CQUFvQixHQUFBLHVCQUFBLHVCQUFBLHVCQUFBLEVBQUEsRUFDckIsOEJBRHFCLENBQUEsRUFFckIsb0JBRnFCLENBQUEsRUFFQztBQUN6QixFQUFBLE1BQU0sRUFBQSx1QkFBQSx1QkFBQSx1QkFBQSxFQUFBLEVBQ0QsK0JBQWtCLE1BRGpCLENBQUEsRUFFRCxxQkFBdUIsTUFGdEIsQ0FBQSxFQUU0QjtBQUNoQyxJQUFBLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FEZ0I7QUFFaEMsSUFBQSxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBRmlCO0FBR2hDLElBQUEsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUhnQjtBQUloQyxJQUFBLEtBQUssRUFBRSxNQUFNLENBQUM7QUFKa0IsR0FGNUIsQ0FEbUI7QUFTekIsRUFBQSxRQUFRLEVBQVIsUUFUeUI7QUFVekIsRUFBQSxPQUFPLEVBQVA7QUFWeUIsQ0FGRCxDQUExQjtBQWNBLElBQU0saUJBQWlCLEdBQUEsdUJBQUEsdUJBQUEsdUJBQUEsRUFBQSxFQUNsQiwyQkFEa0IsQ0FBQSxFQUVsQixpQkFGa0IsQ0FBQSxFQUVDO0FBQ3RCLEVBQUEsTUFBTSxFQUFBLHVCQUFBLHVCQUFBLHVCQUFBLEVBQUEsRUFDRCw0QkFBZSxNQURkLENBQUEsRUFFRCxrQkFBb0IsTUFGbkIsQ0FBQSxFQUV5QjtBQUM3QixJQUFBLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FEYTtBQUU3QixJQUFBLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FGYztBQUc3QixJQUFBLEtBQUssRUFBRSxNQUFNLENBQUMsS0FIZTtBQUk3QixJQUFBLE9BQU8sRUFBRSxNQUFNLENBQUM7QUFKYSxHQUZ6QixDQURnQjtBQVN0QixFQUFBLFFBQVEsRUFBUixRQVRzQjtBQVV0QixFQUFBLE9BQU8sRUFBUDtBQVZzQixDQUZELENBQXZCOztBQWVBLElBQU0sV0FBVyxHQUFHLHdCQUFXLGNBQVgsRUFBcEI7O0FBQ0EsSUFBTSxXQUFXLEdBQUcsV0FBVyxLQUFLLE1BQXBDOztlQUVlLFdBQVcsR0FBRyxpQkFBSCxHQUF1QixvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXBwZWFyYW5jZSwgVGV4dFN0eWxlfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQge1xuICBEYXJrVGhlbWUgYXMgUGFwZXJEYXJrVGhlbWUsXG4gIERlZmF1bHRUaGVtZSBhcyBQYXBlckRlZmF1bHRUaGVtZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbmltcG9ydCB7XG4gIERhcmtUaGVtZSBhcyBOYXZpZ2F0aW9uRGFya1RoZW1lLFxuICBEZWZhdWx0VGhlbWUgYXMgTmF2aWdhdGlvbkRlZmF1bHRUaGVtZSxcbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcblxuaW50ZXJmYWNlIFZhcmlhbnRQcm9wcyB7XG4gIFtrZXk6IHN0cmluZ106IFRleHRTdHlsZTtcbn1cbmludGVyZmFjZSBTcGFjaW5nUHJvcHMge1xuICBba2V5OiBzdHJpbmddOiBudW1iZXI7XG59XG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBSZWFjdE5hdGl2ZVBhcGVyIHtcbiAgICBpbnRlcmZhY2UgVGhlbWVDb2xvcnMge1xuICAgICAgYmFkZ2U6IHN0cmluZztcbiAgICAgIGRpdmlkZXI6IHN0cmluZztcbiAgICB9XG4gICAgaW50ZXJmYWNlIFRoZW1lIHtcbiAgICAgIHZhcmlhbnRzOiBWYXJpYW50UHJvcHM7XG4gICAgICBzcGFjaW5nOiBTcGFjaW5nUHJvcHM7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHZhcmlhbnRzOiBWYXJpYW50UHJvcHMgPSB7XG4gIGgxOiB7XG4gICAgZm9udFNpemU6IDIyLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogMjAsXG4gIH0sXG4gIGJvZHk6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gIH0sXG4gIHRhZzoge1xuICAgIGZvbnRTaXplOiAxNCxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGZvbnRTaXplOiAxMixcbiAgfSxcbn07XG5cbmNvbnN0IGNvbG9ycyA9IHtcbiAgYmxhY2s6ICcjMDAwMDAwJyxcbiAgd2hpdGU6ICcjRkZGRkZGJyxcbiAgZ3JleTogJ2dyZXknLFxuICBsaWdodEdyZXk6ICcjZDNkM2QzJyxcbn07XG5jb25zdCBzcGFjaW5nOiBTcGFjaW5nUHJvcHMgPSB7XG4gIHhzOiA0LFxuICBzOiA4LFxuICBtOiAxNixcbiAgbDogMjQsXG4gIHhsOiAzMixcbn07XG5jb25zdCBDb21iaW5lZERlZmF1bHRUaGVtZSA9IHtcbiAgLi4uUGFwZXJEZWZhdWx0VGhlbWUsXG4gIC4uLk5hdmlnYXRpb25EZWZhdWx0VGhlbWUsXG4gIGNvbG9yczoge1xuICAgIC4uLlBhcGVyRGVmYXVsdFRoZW1lLmNvbG9ycyxcbiAgICAuLi5OYXZpZ2F0aW9uRGVmYXVsdFRoZW1lLmNvbG9ycyxcbiAgICBwcmltYXJ5OiBjb2xvcnMuYmxhY2ssXG4gICAgYWNjZW50OiBjb2xvcnMubGlnaHRHcmV5LFxuICAgIGRpdmlkZXI6IGNvbG9ycy5ncmV5LFxuICAgIGJhZGdlOiBjb2xvcnMuYmxhY2ssXG4gIH0sXG4gIHZhcmlhbnRzLFxuICBzcGFjaW5nLFxufTtcbmNvbnN0IENvbWJpbmVkRGFya1RoZW1lID0ge1xuICAuLi5QYXBlckRhcmtUaGVtZSxcbiAgLi4uTmF2aWdhdGlvbkRhcmtUaGVtZSxcbiAgY29sb3JzOiB7XG4gICAgLi4uUGFwZXJEYXJrVGhlbWUuY29sb3JzLFxuICAgIC4uLk5hdmlnYXRpb25EYXJrVGhlbWUuY29sb3JzLFxuICAgIHByaW1hcnk6IGNvbG9ycy53aGl0ZSxcbiAgICBhY2NlbnQ6IGNvbG9ycy53aGl0ZSxcbiAgICBiYWRnZTogY29sb3JzLmJsYWNrLFxuICAgIGRpdmlkZXI6IGNvbG9ycy53aGl0ZSxcbiAgfSxcbiAgdmFyaWFudHMsXG4gIHNwYWNpbmcsXG59O1xuXG5jb25zdCBjb2xvclNjaGVtZSA9IEFwcGVhcmFuY2UuZ2V0Q29sb3JTY2hlbWUoKTtcbmNvbnN0IGlzVGhlbWVEYXJrID0gY29sb3JTY2hlbWUgPT09ICdkYXJrJztcblxuZXhwb3J0IGRlZmF1bHQgaXNUaGVtZURhcmsgPyBDb21iaW5lZERhcmtUaGVtZSA6IENvbWJpbmVkRGVmYXVsdFRoZW1lO1xuIl19