6a9cb6f937cc861e9e29c2d4f67405d1
"use strict";

var has = Object.prototype.hasOwnProperty,
    toString = Object.prototype.toString,
    forEach = require('./foreach'),
    isArgs = require('./isArguments'),
    hasDontEnumBug = !{
  'toString': null
}.propertyIsEnumerable('toString'),
    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];

var keysShim = function keys(object) {
  var isObject = object !== null && typeof object === 'object',
      isFunction = toString.call(object) === '[object Function]',
      isArguments = isArgs(object),
      theKeys = [];

  if (!isObject && !isFunction && !isArguments) {
    throw new TypeError("Object.keys called on a non-object");
  }

  if (isArguments) {
    forEach(object, function (value, index) {
      theKeys.push(index);
    });
  } else {
    var name,
        skipProto = hasProtoEnumBug && isFunction;

    for (name in object) {
      if (!(skipProto && name === 'prototype') && has.call(object, name)) {
        theKeys.push(name);
      }
    }
  }

  if (hasDontEnumBug) {
    var ctor = object.constructor,
        skipConstructor = ctor && ctor.prototype === object;
    forEach(dontEnums, function (dontEnum) {
      if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
        theKeys.push(dontEnum);
      }
    });
  }

  return theKeys;
};

keysShim.shim = function shimObjectKeys() {
  if (!Object.keys) {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

module.exports = keysShim;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImhhcyIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwidG9TdHJpbmciLCJmb3JFYWNoIiwicmVxdWlyZSIsImlzQXJncyIsImhhc0RvbnRFbnVtQnVnIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJrZXlzU2hpbSIsImtleXMiLCJvYmplY3QiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJjYWxsIiwiaXNBcmd1bWVudHMiLCJ0aGVLZXlzIiwiVHlwZUVycm9yIiwidmFsdWUiLCJpbmRleCIsInB1c2giLCJuYW1lIiwic2tpcFByb3RvIiwiY3RvciIsImNvbnN0cnVjdG9yIiwic2tpcENvbnN0cnVjdG9yIiwiZG9udEVudW0iLCJzaGltIiwic2hpbU9iamVjdEtleXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFHQSxJQUFJQSxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBM0I7QUFBQSxJQUNDQyxRQUFRLEdBQUdILE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkUsUUFEN0I7QUFBQSxJQUVDQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBRmxCO0FBQUEsSUFHQ0MsTUFBTSxHQUFHRCxPQUFPLENBQUMsZUFBRCxDQUhqQjtBQUFBLElBSUNFLGNBQWMsR0FBRyxDQUFFO0FBQUMsY0FBWTtBQUFiLENBQUQsQ0FBcUJDLG9CQUFyQixDQUEwQyxVQUExQyxDQUpuQjtBQUFBLElBS0NDLGVBQWUsR0FBSSxZQUFZLENBQUUsQ0FBZixDQUFpQkQsb0JBQWpCLENBQXNDLFdBQXRDLENBTG5CO0FBQUEsSUFNQ0UsU0FBUyxHQUFHLENBQ1gsVUFEVyxFQUVYLGdCQUZXLEVBR1gsU0FIVyxFQUlYLGdCQUpXLEVBS1gsZUFMVyxFQU1YLHNCQU5XLEVBT1gsYUFQVyxDQU5iOztBQWdCQSxJQUFJQyxRQUFRLEdBQUcsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLEVBQXNCO0FBQ3BDLE1BQUlDLFFBQVEsR0FBR0QsTUFBTSxLQUFLLElBQVgsSUFBbUIsT0FBT0EsTUFBUCxLQUFrQixRQUFwRDtBQUFBLE1BQ0NFLFVBQVUsR0FBR1osUUFBUSxDQUFDYSxJQUFULENBQWNILE1BQWQsTUFBMEIsbUJBRHhDO0FBQUEsTUFFQ0ksV0FBVyxHQUFHWCxNQUFNLENBQUNPLE1BQUQsQ0FGckI7QUFBQSxNQUdDSyxPQUFPLEdBQUcsRUFIWDs7QUFLQSxNQUFJLENBQUNKLFFBQUQsSUFBYSxDQUFDQyxVQUFkLElBQTRCLENBQUNFLFdBQWpDLEVBQThDO0FBQzdDLFVBQU0sSUFBSUUsU0FBSixDQUFjLG9DQUFkLENBQU47QUFDQTs7QUFFRCxNQUFJRixXQUFKLEVBQWlCO0FBQ2hCYixJQUFBQSxPQUFPLENBQUNTLE1BQUQsRUFBUyxVQUFVTyxLQUFWLEVBQWlCQyxLQUFqQixFQUF3QjtBQUN2Q0gsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWFELEtBQWI7QUFDQSxLQUZNLENBQVA7QUFHQSxHQUpELE1BSU87QUFDTixRQUFJRSxJQUFKO0FBQUEsUUFDQ0MsU0FBUyxHQUFHZixlQUFlLElBQUlNLFVBRGhDOztBQUdBLFNBQUtRLElBQUwsSUFBYVYsTUFBYixFQUFxQjtBQUNwQixVQUFJLEVBQUVXLFNBQVMsSUFBSUQsSUFBSSxLQUFLLFdBQXhCLEtBQXdDeEIsR0FBRyxDQUFDaUIsSUFBSixDQUFTSCxNQUFULEVBQWlCVSxJQUFqQixDQUE1QyxFQUFvRTtBQUNuRUwsUUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWFDLElBQWI7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsTUFBSWhCLGNBQUosRUFBb0I7QUFDbkIsUUFBSWtCLElBQUksR0FBR1osTUFBTSxDQUFDYSxXQUFsQjtBQUFBLFFBQ0NDLGVBQWUsR0FBR0YsSUFBSSxJQUFJQSxJQUFJLENBQUN4QixTQUFMLEtBQW1CWSxNQUQ5QztBQUdBVCxJQUFBQSxPQUFPLENBQUNNLFNBQUQsRUFBWSxVQUFVa0IsUUFBVixFQUFvQjtBQUN0QyxVQUFJLEVBQUVELGVBQWUsSUFBSUMsUUFBUSxLQUFLLGFBQWxDLEtBQW9EN0IsR0FBRyxDQUFDaUIsSUFBSixDQUFTSCxNQUFULEVBQWlCZSxRQUFqQixDQUF4RCxFQUFvRjtBQUNuRlYsUUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWFNLFFBQWI7QUFDQTtBQUNELEtBSk0sQ0FBUDtBQUtBOztBQUNELFNBQU9WLE9BQVA7QUFDQSxDQXBDRDs7QUFzQ0FQLFFBQVEsQ0FBQ2tCLElBQVQsR0FBZ0IsU0FBU0MsY0FBVCxHQUEwQjtBQUN6QyxNQUFJLENBQUM5QixNQUFNLENBQUNZLElBQVosRUFBa0I7QUFDakJaLElBQUFBLE1BQU0sQ0FBQ1ksSUFBUCxHQUFjRCxRQUFkO0FBQ0E7O0FBQ0QsU0FBT1gsTUFBTSxDQUFDWSxJQUFQLElBQWVELFFBQXRCO0FBQ0EsQ0FMRDs7QUFPQW9CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLFFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcblx0dG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRmb3JFYWNoID0gcmVxdWlyZSgnLi9mb3JlYWNoJyksXG5cdGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcblx0aGFzRG9udEVudW1CdWcgPSAhKHsndG9TdHJpbmcnOiBudWxsfSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyksXG5cdGhhc1Byb3RvRW51bUJ1ZyA9IChmdW5jdGlvbiAoKSB7fSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3Byb3RvdHlwZScpLFxuXHRkb250RW51bXMgPSBbXG5cdFx0XCJ0b1N0cmluZ1wiLFxuXHRcdFwidG9Mb2NhbGVTdHJpbmdcIixcblx0XHRcInZhbHVlT2ZcIixcblx0XHRcImhhc093blByb3BlcnR5XCIsXG5cdFx0XCJpc1Byb3RvdHlwZU9mXCIsXG5cdFx0XCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFxuXHRcdFwiY29uc3RydWN0b3JcIlxuXHRdO1xuXG52YXIga2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcsXG5cdFx0aXNGdW5jdGlvbiA9IHRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcblx0XHRpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpLFxuXHRcdHRoZUtleXMgPSBbXTtcblxuXHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0XCIpO1xuXHR9XG5cblx0aWYgKGlzQXJndW1lbnRzKSB7XG5cdFx0Zm9yRWFjaChvYmplY3QsIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdHRoZUtleXMucHVzaChpbmRleCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblxuXHRcdGZvciAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2gobmFtZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0dmFyIGN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG5cdFx0XHRza2lwQ29uc3RydWN0b3IgPSBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvYmplY3Q7XG5cblx0XHRmb3JFYWNoKGRvbnRFbnVtcywgZnVuY3Rpb24gKGRvbnRFbnVtKSB7XG5cdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW0gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW0pKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIHRoZUtleXM7XG59O1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmICghT2JqZWN0LmtleXMpIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG5cbiJdfQ==