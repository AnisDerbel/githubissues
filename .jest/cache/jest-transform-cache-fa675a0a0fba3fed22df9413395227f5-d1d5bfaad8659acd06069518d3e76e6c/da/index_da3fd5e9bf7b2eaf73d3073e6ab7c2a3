089ceb9c8d3339625451df5d4ec27a42
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _exposableEffects;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expectSaga;

var _reduxSaga = require("redux-saga");

var is = _interopRequireWildcard(require("@redux-saga/is"));

var effects = _interopRequireWildcard(require("redux-saga/effects"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _array = require("../utils/array");

var _Map = _interopRequireDefault(require("../utils/Map"));

var _ArraySet = _interopRequireDefault(require("../utils/ArraySet"));

var _logging = require("../utils/logging");

var _async = require("../utils/async");

var _identity = _interopRequireDefault(require("../utils/identity"));

var _parseEffect = _interopRequireDefault(require("./parseEffect"));

var _provideValue = require("./provideValue");

var _object = require("../utils/object");

var _findDispatchableActionIndex = _interopRequireDefault(require("./findDispatchableActionIndex"));

var _sagaWrapper = _interopRequireWildcard(require("./sagaWrapper"));

var _sagaIdFactory = _interopRequireDefault(require("./sagaIdFactory"));

var _helpers = require("./providers/helpers");

var _asEffect = require("../utils/asEffect");

var _expectations = require("./expectations");

var _keys = require("../shared/keys");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var all = effects.all,
    call = effects.call,
    fork = effects.fork,
    race = effects.race,
    spawn = effects.spawn;
var INIT_ACTION = {
  type: '@@redux-saga-test-plan/INIT'
};
var defaultSagaWrapper = (0, _sagaWrapper.default)();

function extractState(reducer, initialState) {
  return initialState || reducer(undefined, INIT_ACTION);
}

function _toJSON(object) {
  if (Array.isArray(object)) {
    return object.map(_toJSON);
  }

  if (typeof object === 'function') {
    return "@@redux-saga-test-plan/json/function/" + (object.name || '<anonymous>');
  }

  if (typeof object === 'object' && object !== null) {
    return (0, _object.mapValues)(object, _toJSON);
  }

  return object;
}

function lacksSagaWrapper(value) {
  var _ref = (0, _parseEffect.default)(value),
      type = _ref.type,
      effect = _ref.effect;

  return type !== 'FORK' || !(0, _sagaWrapper.isSagaWrapper)(effect.fn);
}

var exposableEffects = (_exposableEffects = {}, (0, _defineProperty2.default)(_exposableEffects, _keys.TAKE, 'take'), (0, _defineProperty2.default)(_exposableEffects, _keys.PUT, 'put'), (0, _defineProperty2.default)(_exposableEffects, _keys.RACE, 'race'), (0, _defineProperty2.default)(_exposableEffects, _keys.CALL, 'call'), (0, _defineProperty2.default)(_exposableEffects, _keys.CPS, 'cps'), (0, _defineProperty2.default)(_exposableEffects, _keys.FORK, 'fork'), (0, _defineProperty2.default)(_exposableEffects, _keys.GET_CONTEXT, 'getContext'), (0, _defineProperty2.default)(_exposableEffects, _keys.SELECT, 'select'), (0, _defineProperty2.default)(_exposableEffects, _keys.SET_CONTEXT, 'setContext'), (0, _defineProperty2.default)(_exposableEffects, _keys.ACTION_CHANNEL, 'actionChannel'), _exposableEffects);

function expectSaga(generator) {
  var _effectStores;

  for (var _len = arguments.length, sagaArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sagaArgs[_key - 1] = arguments[_key];
  }

  var allEffects = [];
  var effectStores = (_effectStores = {}, (0, _defineProperty2.default)(_effectStores, _keys.TAKE, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.PUT, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.RACE, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.CALL, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.CPS, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.FORK, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.GET_CONTEXT, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.SET_CONTEXT, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.SELECT, new _ArraySet.default()), (0, _defineProperty2.default)(_effectStores, _keys.ACTION_CHANNEL, new _ArraySet.default()), _effectStores);
  var expectations = [];
  var ioChannel = (0, _reduxSaga.stdChannel)();
  var queuedActions = [];
  var forkedTasks = [];
  var outstandingForkEffects = new _Map.default();
  var outstandingActionChannelEffects = new _Map.default();
  var channelsToPatterns = new _Map.default();
  var dispatchPromise = Promise.resolve();
  var nextSagaId = (0, _sagaIdFactory.default)();
  var stopDirty = false;
  var negateNextAssertion = false;
  var isRunning = false;
  var delayTime = null;
  var iterator;
  var mainTask;
  var mainTaskPromise;
  var providers;
  var returnValue;
  var errorValue;
  var expectError = false;
  var storeState;

  function setReturnValue(value) {
    returnValue = value;
  }

  function setErrorValue(value) {
    errorValue = value;
  }

  function useProvidedValue(value) {
    function addEffect() {
      processEffect({
        effectId: nextSagaId(),
        effect: value
      });
    }

    try {
      var providedValue = (0, _provideValue.provideValue)(providers, value);

      if (providedValue === _provideValue.NEXT) {
        return value;
      }

      addEffect();
      return providedValue;
    } catch (e) {
      addEffect();
      throw e;
    }
  }

  function refineYieldedValue(value) {
    var parsedEffect = (0, _parseEffect.default)(value);
    var localProviders = providers || {};
    var type = parsedEffect.type,
        effect = parsedEffect.effect;

    switch (true) {
      case type === _keys.RACE && !localProviders.race:
        processEffect({
          effectId: nextSagaId(),
          effect: value
        });
        return race(parsedEffect.mapEffects(refineYieldedValue));

      case type === _keys.ALL && !localProviders.all:
        return all(parsedEffect.mapEffects(refineYieldedValue));

      case type === _keys.FORK:
        {
          var args = effect.args,
              detached = effect.detached,
              context = effect.context,
              fn = effect.fn;
          var providedValue = useProvidedValue(value);
          var isProvided = providedValue !== value;

          if (!detached && !isProvided) {
            processEffect({
              effectId: nextSagaId(),
              effect: value
            });
            var finalArgs = args;
            return fork((0, _sagaWrapper.default)(fn.name), fn.apply(context, finalArgs), refineYieldedValue);
          }

          if (detached && !isProvided) {
            processEffect({
              effectId: nextSagaId(),
              effect: value
            });
            return spawn((0, _sagaWrapper.default)(fn.name), fn.apply(context, args), refineYieldedValue);
          }

          return providedValue;
        }

      case type === _keys.CALL:
        {
          var _providedValue = useProvidedValue(value);

          if (_providedValue !== value) {
            return _providedValue;
          }

          processEffect({
            effectId: nextSagaId(),
            effect: value
          });
          var _context = effect.context,
              _fn = effect.fn,
              _args = effect.args;

          var result = _fn.apply(_context, _args);

          if (is.iterator(result)) {
            return call(defaultSagaWrapper, result, refineYieldedValue);
          }

          return result;
        }

      case is.iterator(value):
        return useProvidedValue(defaultSagaWrapper(value, refineYieldedValue));

      default:
        return useProvidedValue(value);
    }
  }

  function defaultReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : storeState;
    return state;
  }

  var reducer = defaultReducer;

  function getAllPromises() {
    return new Promise(function (resolve) {
      Promise.all([].concat((0, _toConsumableArray2.default)(forkedTasks.map(taskPromise)), [mainTaskPromise])).then(function () {
        if (stopDirty) {
          stopDirty = false;
          resolve(getAllPromises());
        }

        resolve();
      });
    });
  }

  function addForkedTask(task) {
    stopDirty = true;
    forkedTasks.push(task);
  }

  function cancelMainTask(timeout, silenceTimeout, timedOut) {
    if (!silenceTimeout && timedOut) {
      (0, _logging.warn)("Saga exceeded async timeout of " + timeout + "ms");
    }

    mainTask.cancel();
    return mainTaskPromise;
  }

  function scheduleStop(timeout) {
    var promise = (0, _async.schedule)(getAllPromises).then(function () {
      return false;
    });
    var silenceTimeout = false;
    var timeoutLength;

    if (typeof timeout === 'number') {
      timeoutLength = timeout;
    } else if (typeof timeout === 'object') {
      silenceTimeout = timeout.silenceTimeout === true;

      if ('timeout' in timeout) {
        timeoutLength = timeout.timeout;
      } else {
        timeoutLength = expectSaga.DEFAULT_TIMEOUT;
      }
    }

    if (typeof timeoutLength === 'number') {
      promise = Promise.race([promise, (0, _async.delay)(timeoutLength).then(function () {
        return true;
      })]);
    }

    return promise.then(function (timedOut) {
      return (0, _async.schedule)(cancelMainTask, [timeoutLength, silenceTimeout, timedOut]);
    });
  }

  function queueAction(action) {
    queuedActions.push(action);
  }

  function notifyListeners(action) {
    ioChannel.put(action);
  }

  function dispatch(action) {
    if (typeof action._delayTime === 'number') {
      var _delayTime = action._delayTime;
      dispatchPromise.then(function () {
        return (0, _async.delay)(_delayTime);
      }).then(function () {
        storeState = reducer(storeState, action);
        notifyListeners(action);
      });
    } else {
      storeState = reducer(storeState, action);
      dispatchPromise.then(function () {
        return notifyListeners(action);
      });
    }
  }

  function associateChannelWithPattern(channel, pattern) {
    channelsToPatterns.set(channel, pattern);
  }

  function getDispatchableActions(effect) {
    var pattern = effect.pattern || channelsToPatterns.get(effect.channel);
    var index = (0, _findDispatchableActionIndex.default)(queuedActions, pattern);

    if (index > -1) {
      var actions = queuedActions.splice(0, index + 1);
      return actions;
    }

    return [];
  }

  function processEffect(event) {
    var parsedEffect = (0, _parseEffect.default)(event.effect);

    if (parsedEffect.type === 'NONE') {
      return;
    }

    var effectStore = effectStores[parsedEffect.type];

    if (!effectStore) {
      return;
    }

    allEffects.push(event.effect);
    effectStore.add(event.effect);

    switch (parsedEffect.type) {
      case _keys.FORK:
        {
          outstandingForkEffects.set(event.effectId, parsedEffect.effect);
          break;
        }

      case _keys.TAKE:
        {
          var actions = getDispatchableActions(parsedEffect.effect);

          var _ref2 = (0, _array.splitAt)(actions, -1),
              _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
              reducerActions = _ref3[0],
              _ref3$ = (0, _slicedToArray2.default)(_ref3[1], 1),
              sagaAction = _ref3$[0];

          reducerActions.forEach(function (action) {
            dispatch(action);
          });

          if (sagaAction) {
            dispatch(sagaAction);
          }

          break;
        }

      case _keys.ACTION_CHANNEL:
        {
          outstandingActionChannelEffects.set(event.effectId, parsedEffect.effect);
          break;
        }
    }
  }

  function addExpectation(expectation) {
    expectations.push(expectation);
  }

  var io = {
    dispatch: dispatch,
    channel: ioChannel,
    getState: function getState() {
      return storeState;
    },
    sagaMonitor: {
      effectTriggered: function effectTriggered(event) {
        processEffect(event);
      },
      effectResolved: function effectResolved(effectId, value) {
        var forkEffect = outstandingForkEffects.get(effectId);

        if (forkEffect) {
          addForkedTask(value);
          return;
        }

        var actionChannelEffect = outstandingActionChannelEffects.get(effectId);

        if (actionChannelEffect) {
          associateChannelWithPattern(value, actionChannelEffect.pattern);
        }
      },
      effectRejected: function effectRejected() {},
      effectCancelled: function effectCancelled() {}
    },
    logger: function logger() {}
  };
  var api = {
    run: run,
    silentRun: silentRun,
    withState: withState,
    withReducer: withReducer,
    provide: provide,
    returns: returns,
    throws: throws,
    hasFinalState: hasFinalState,
    dispatch: apiDispatch,
    delay: apiDelay,

    get not() {
      negateNextAssertion = true;
      return api;
    },

    actionChannel: createEffectTesterFromEffects('actionChannel', _keys.ACTION_CHANNEL, _asEffect.asEffect.actionChannel),
    apply: createEffectTesterFromEffects('apply', _keys.CALL, _asEffect.asEffect.call),
    call: createEffectTesterFromEffects('call', _keys.CALL, _asEffect.asEffect.call),
    cps: createEffectTesterFromEffects('cps', _keys.CPS, _asEffect.asEffect.cps),
    fork: createEffectTesterFromEffects('fork', _keys.FORK, _asEffect.asEffect.fork),
    getContext: createEffectTesterFromEffects('getContext', _keys.GET_CONTEXT, _asEffect.asEffect.getContext),
    put: createEffectTesterFromEffects('put', _keys.PUT, _asEffect.asEffect.put),
    putResolve: createEffectTesterFromEffects('putResolve', _keys.PUT, _asEffect.asEffect.put),
    race: createEffectTesterFromEffects('race', _keys.RACE, _asEffect.asEffect.race),
    select: createEffectTesterFromEffects('select', _keys.SELECT, _asEffect.asEffect.select),
    spawn: createEffectTesterFromEffects('spawn', _keys.FORK, _asEffect.asEffect.fork),
    setContext: createEffectTesterFromEffects('setContext', _keys.SET_CONTEXT, _asEffect.asEffect.setContext),
    take: createEffectTesterFromEffects('take', _keys.TAKE, _asEffect.asEffect.take),
    takeMaybe: createEffectTesterFromEffects('takeMaybe', _keys.TAKE, _asEffect.asEffect.take)
  };
  api.actionChannel.like = createEffectTester('actionChannel', _keys.ACTION_CHANNEL, effects.actionChannel, _asEffect.asEffect.actionChannel, true);

  api.actionChannel.pattern = function (pattern) {
    return api.actionChannel.like({
      pattern: pattern
    });
  };

  api.apply.like = createEffectTester('apply', _keys.CALL, effects.apply, _asEffect.asEffect.call, true);

  api.apply.fn = function (fn) {
    return api.apply.like({
      fn: fn
    });
  };

  api.call.like = createEffectTester('call', _keys.CALL, effects.call, _asEffect.asEffect.call, true);

  api.call.fn = function (fn) {
    return api.call.like({
      fn: fn
    });
  };

  api.cps.like = createEffectTester('cps', _keys.CPS, effects.cps, _asEffect.asEffect.cps, true);

  api.cps.fn = function (fn) {
    return api.cps.like({
      fn: fn
    });
  };

  api.fork.like = createEffectTester('fork', _keys.FORK, effects.fork, _asEffect.asEffect.fork, true);

  api.fork.fn = function (fn) {
    return api.fork.like({
      fn: fn
    });
  };

  api.put.like = createEffectTester('put', _keys.PUT, effects.put, _asEffect.asEffect.put, true);

  api.put.actionType = function (type) {
    return api.put.like({
      action: {
        type: type
      }
    });
  };

  api.putResolve.like = createEffectTester('putResolve', _keys.PUT, effects.putResolve, _asEffect.asEffect.put, true);

  api.putResolve.actionType = function (type) {
    return api.putResolve.like({
      action: {
        type: type
      }
    });
  };

  api.select.like = createEffectTester('select', _keys.SELECT, effects.select, _asEffect.asEffect.select, true);

  api.select.selector = function (selector) {
    return api.select.like({
      selector: selector
    });
  };

  api.spawn.like = createEffectTester('spawn', _keys.FORK, effects.spawn, _asEffect.asEffect.fork, true);

  api.spawn.fn = function (fn) {
    return api.spawn.like({
      fn: fn
    });
  };

  function checkExpectations() {
    expectations.forEach(function (expectation) {
      expectation({
        storeState: storeState,
        returnValue: returnValue,
        errorValue: errorValue
      });
    });
  }

  function apiDispatch(action) {
    var dispatchableAction;

    if (typeof delayTime === 'number') {
      dispatchableAction = (0, _objectAssign.default)({}, action, {
        _delayTime: delayTime
      });
      delayTime = null;
    } else {
      dispatchableAction = action;
    }

    if (isRunning) {
      dispatch(dispatchableAction);
    } else {
      queueAction(dispatchableAction);
    }

    return api;
  }

  function taskPromise(task) {
    return task.toPromise();
  }

  function start() {
    var sagaWrapper = (0, _sagaWrapper.default)(generator.name);
    isRunning = true;
    iterator = generator.apply(void 0, sagaArgs);
    mainTask = (0, _reduxSaga.runSaga)(io, sagaWrapper, iterator, refineYieldedValue, setReturnValue, setErrorValue);
    mainTaskPromise = taskPromise(mainTask).then(checkExpectations, function (e) {
      return !expectError && e || checkExpectations();
    }).catch(_identity.default);
    return api;
  }

  function stop(timeout) {
    return scheduleStop(timeout).then(function (err) {
      if (err) {
        throw err;
      }
    });
  }

  function exposeResults() {
    var finalEffects = Object.keys(exposableEffects).reduce(function (memo, key) {
      var effectName = exposableEffects[key];
      var values = effectStores[key].values().filter(lacksSagaWrapper);

      if (values.length > 0) {
        memo[effectName] = effectStores[key].values().filter(lacksSagaWrapper);
      }

      return memo;
    }, {});
    return {
      storeState: storeState,
      returnValue: returnValue,
      effects: finalEffects,
      allEffects: allEffects,
      toJSON: function toJSON() {
        return _toJSON(finalEffects);
      }
    };
  }

  function run() {
    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : expectSaga.DEFAULT_TIMEOUT;
    start();
    return stop(timeout).then(exposeResults);
  }

  function silentRun() {
    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : expectSaga.DEFAULT_TIMEOUT;
    return run({
      timeout: timeout,
      silenceTimeout: true
    });
  }

  function withState(state) {
    storeState = state;
    return api;
  }

  function withReducer(newReducer, initialState) {
    reducer = newReducer;
    storeState = extractState(newReducer, initialState);
    return api;
  }

  function provide(newProviders) {
    providers = Array.isArray(newProviders) ? (0, _helpers.coalesceProviders)(newProviders) : newProviders;
    return api;
  }

  function returns(value) {
    addExpectation((0, _expectations.createReturnExpectation)({
      value: value,
      expected: !negateNextAssertion
    }));
    return api;
  }

  function throws(type) {
    expectError = true;
    addExpectation((0, _expectations.createErrorExpectation)({
      type: type,
      expected: !negateNextAssertion
    }));
    return api;
  }

  function hasFinalState(state) {
    addExpectation((0, _expectations.createStoreStateExpectation)({
      state: state,
      expected: !negateNextAssertion
    }));
    return api;
  }

  function apiDelay(time) {
    delayTime = time;
    return api;
  }

  function createEffectTester(effectName, storeKey, effectCreator, extractEffect) {
    var like = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    return function () {
      var expectedEffect = like ? arguments.length <= 0 ? undefined : arguments[0] : effectCreator.apply(void 0, arguments);
      addExpectation((0, _expectations.createEffectExpectation)({
        effectName: effectName,
        expectedEffect: expectedEffect,
        storeKey: storeKey,
        like: like,
        extractEffect: extractEffect,
        store: effectStores[storeKey],
        expected: !negateNextAssertion
      }));
      negateNextAssertion = false;
      return api;
    };
  }

  function createEffectTesterFromEffects(effectName, storeKey, extractEffect) {
    return createEffectTester(effectName, storeKey, effects[effectName], extractEffect);
  }

  return api;
}

expectSaga.DEFAULT_TIMEOUT = 250;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,