{"version":3,"sources":["saga.ts"],"names":["getRepoIssues","repoSaga","PAGE_SIZE","payload","page","state","form","values","repo","issues","hasMoreIssues","repoActions","setCurrentPage","axios","get","organization","repository","repoIssues","length","data","getRepoIssuesSuccess","getRepoIssuesFailed","ERepoActionTypes","GET_REPO_ISSUES"],"mappingswCAKUA,a;yCAyCAC,Q;;AA3CV,IAAMC,SAAS,4BAAG,EAAH,CAAf;;AAEA,SAAUF,aAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyBG,UAAAA,OAAzB,QAAyBA,OAAzB;AAAA;AAAA;AAAA;AAAA,2CAEmBA,OAFnB,GAEWC,IAFX,SAEWA,IAFX;AAAA;AAAA;AAKQ,iBAAM,qBAAO,UAACC,KAAD,EAA8B;AAAA;AAAA;AAAA,mBAAAA,KAAK,CAACC,IAAN;AAAU,WAA/C,CAAN;;AALR;AAAA;AAIaC,UAAAA,MAJb,SAIMD,IAJN,CAIaC,MAJb;AAAA;AAAA;AAMoC,iBAAM,qBACpC,UAACF,KAAD,EAA8B;AAAA;AAAA;AAAA,mBAAAA,KAAK,CAACG,IAAN;AAAU,WADJ,CAAN;;AANpC;AAAA;AAMWC,UAAAA,MANX,SAMWA,MANX;AAMmBC,UAAAA,aANnB,SAMmBA,aANnB;AAAA;;AAAA,cAUS,CAACD,MAAM,CAACL,IAAD,CAVhB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWM,iBAAM,kBACJO,qBAAYC,cAAZ,CAA2B;AACzBR,YAAAA,IAAI,EAAJA,IADyB;AAEzBM,YAAAA,aAAa,EAAE,4BAAAA,aAAa,iCAAID,MAAM,CAACL,IAAI,GAAG,CAAR,CAAV,CAAb,+BAAoC,IAApC,gCAA2C,KAA3C;AAFU,WAA3B,CADI,CAAN;;AAXN;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwBsC,iBAAM,mBACtCS,eAAMC,GADgC,cAE5BP,MAAM,CAACQ,YAFqB,SAELR,MAAM,CAACS,UAFF,2DAEkEZ,IAFlE,kBAEmFF,SAFnF,CAAN;;AAxBtC;AAwBUe,UAAAA,UAxBV;AA4BUC,UAAAA,MA5BV,6BA4BmBD,UAAU,CAACE,IAAX,CAAgBD,MA5BnC;AAAA;AAAA;AA6BI,iBAAM,kBACJP,qBAAYS,oBAAZ,CAAiC;AAC/BX,YAAAA,MAAM,EAAEQ,UAAU,CAACE,IADY;AAE/Bf,YAAAA,IAAI,EAAJA,IAF+B;AAG/BM,YAAAA,aAAa,EAAE,4BAAAQ,MAAM,KAAK,CAAX,iCAAgBA,MAAM,GAAGhB,SAAzB,gCAAqC,KAArC,gCAA6C,IAA7C;AAHgB,WAAjC,CADI,CAAN;;AA7BJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCI,iBAAM,kBAAIS,qBAAYU,mBAAZ,EAAJ,CAAN;;AArCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyCA,SAAUpB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAM,yBAAWqB,0BAAiBC,eAA5B,EAA6CvB,aAA7C,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;eAIeC,Q","sourcesContent":["import {call, put, takeLatest, select} from 'redux-saga/effects';\nimport {AxiosResponse} from 'axios';\nimport {ERepoActionTypes, repoActions, TRepoIssuesAction} from './actions';\nimport axios from '../axios';\nimport {IApplicationState} from '../appReducer';\n\nconst PAGE_SIZE = 30;\n\nfunction* getRepoIssues({payload}: TRepoIssuesAction) {\n  try {\n    const {page} = payload;\n    const {\n      form: {values},\n    } = yield select((state: IApplicationState) => state.form);\n    const {issues, hasMoreIssues} = yield select(\n      (state: IApplicationState) => state.repo,\n    );\n\n    if (!!issues[page]) {\n      yield put(\n        repoActions.setCurrentPage({\n          page,\n          hasMoreIssues: hasMoreIssues || issues[page + 1] ? true : false,\n        }),\n        // repoActions.getRepoIssuesSuccess({\n        //   issues: issues[page],\n        //   page,\n        //   hasMoreIssues: hasMoreIssues || issues[page + 1] ? true : false,\n        // }),\n      );\n      return;\n    }\n    const repoIssues: AxiosResponse = yield call(\n      axios.get,\n      `/repos/${values.organization}/${values.repository}/issues?direction=desc&sort=created&state=all&page=${page}&per_page=${PAGE_SIZE}`,\n    );\n    const length = repoIssues.data.length;\n    yield put(\n      repoActions.getRepoIssuesSuccess({\n        issues: repoIssues.data,\n        page,\n        hasMoreIssues: length === 0 || length < PAGE_SIZE ? false : true,\n      }),\n    );\n  } catch (e) {\n    yield put(repoActions.getRepoIssuesFailed());\n  }\n}\n\nfunction* repoSaga() {\n  yield takeLatest(ERepoActionTypes.GET_REPO_ISSUES, getRepoIssues);\n}\n\nexport default repoSaga;\n"]}