997d5c7e9c5b884b18099a8a632b4066
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var HTML = require('../common/html');

var $ = HTML.TAG_NAMES;
var NS = HTML.NAMESPACES;

function isImpliedEndTagRequired(tn) {
  switch (tn.length) {
    case 1:
      return tn === $.P;

    case 2:
      return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

    case 3:
      return tn === $.RTC;

    case 6:
      return tn === $.OPTION;

    case 8:
      return tn === $.OPTGROUP;
  }

  return false;
}

function isImpliedEndTagRequiredThoroughly(tn) {
  switch (tn.length) {
    case 1:
      return tn === $.P;

    case 2:
      return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI || tn === $.TD || tn === $.TH || tn === $.TR;

    case 3:
      return tn === $.RTC;

    case 5:
      return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;

    case 6:
      return tn === $.OPTION;

    case 7:
      return tn === $.CAPTION;

    case 8:
      return tn === $.OPTGROUP || tn === $.COLGROUP;
  }

  return false;
}

function isScopingElement(tn, ns) {
  switch (tn.length) {
    case 2:
      if (tn === $.TD || tn === $.TH) {
        return ns === NS.HTML;
      } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {
        return ns === NS.MATHML;
      }

      break;

    case 4:
      if (tn === $.HTML) {
        return ns === NS.HTML;
      } else if (tn === $.DESC) {
        return ns === NS.SVG;
      }

      break;

    case 5:
      if (tn === $.TABLE) {
        return ns === NS.HTML;
      } else if (tn === $.MTEXT) {
        return ns === NS.MATHML;
      } else if (tn === $.TITLE) {
        return ns === NS.SVG;
      }

      break;

    case 6:
      return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

    case 7:
      return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

    case 8:
      return tn === $.TEMPLATE && ns === NS.HTML;

    case 13:
      return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

    case 14:
      return tn === $.ANNOTATION_XML && ns === NS.MATHML;
  }

  return false;
}

var OpenElementStack = function () {
  function OpenElementStack(document, treeAdapter) {
    (0, _classCallCheck2.default)(this, OpenElementStack);
    this.stackTop = -1;
    this.items = [];
    this.current = document;
    this.currentTagName = null;
    this.currentTmplContent = null;
    this.tmplCount = 0;
    this.treeAdapter = treeAdapter;
  }

  (0, _createClass2.default)(OpenElementStack, [{
    key: "_indexOf",
    value: function _indexOf(element) {
      var idx = -1;

      for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
          idx = i;
          break;
        }
      }

      return idx;
    }
  }, {
    key: "_isInTemplate",
    value: function _isInTemplate() {
      return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
    }
  }, {
    key: "_updateCurrentElement",
    value: function _updateCurrentElement() {
      this.current = this.items[this.stackTop];
      this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
      this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
    }
  }, {
    key: "push",
    value: function push(element) {
      this.items[++this.stackTop] = element;

      this._updateCurrentElement();

      if (this._isInTemplate()) {
        this.tmplCount++;
      }
    }
  }, {
    key: "pop",
    value: function pop() {
      this.stackTop--;

      if (this.tmplCount > 0 && this._isInTemplate()) {
        this.tmplCount--;
      }

      this._updateCurrentElement();
    }
  }, {
    key: "replace",
    value: function replace(oldElement, newElement) {
      var idx = this._indexOf(oldElement);

      this.items[idx] = newElement;

      if (idx === this.stackTop) {
        this._updateCurrentElement();
      }
    }
  }, {
    key: "insertAfter",
    value: function insertAfter(referenceElement, newElement) {
      var insertionIdx = this._indexOf(referenceElement) + 1;
      this.items.splice(insertionIdx, 0, newElement);

      if (insertionIdx === ++this.stackTop) {
        this._updateCurrentElement();
      }
    }
  }, {
    key: "popUntilTagNamePopped",
    value: function popUntilTagNamePopped(tagName) {
      while (this.stackTop > -1) {
        var tn = this.currentTagName;
        var ns = this.treeAdapter.getNamespaceURI(this.current);
        this.pop();

        if (tn === tagName && ns === NS.HTML) {
          break;
        }
      }
    }
  }, {
    key: "popUntilElementPopped",
    value: function popUntilElementPopped(element) {
      while (this.stackTop > -1) {
        var poppedElement = this.current;
        this.pop();

        if (poppedElement === element) {
          break;
        }
      }
    }
  }, {
    key: "popUntilNumberedHeaderPopped",
    value: function popUntilNumberedHeaderPopped() {
      while (this.stackTop > -1) {
        var tn = this.currentTagName;
        var ns = this.treeAdapter.getNamespaceURI(this.current);
        this.pop();

        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML) {
          break;
        }
      }
    }
  }, {
    key: "popUntilTableCellPopped",
    value: function popUntilTableCellPopped() {
      while (this.stackTop > -1) {
        var tn = this.currentTagName;
        var ns = this.treeAdapter.getNamespaceURI(this.current);
        this.pop();

        if (tn === $.TD || tn === $.TH && ns === NS.HTML) {
          break;
        }
      }
    }
  }, {
    key: "popAllUpToHtmlElement",
    value: function popAllUpToHtmlElement() {
      this.stackTop = 0;

      this._updateCurrentElement();
    }
  }, {
    key: "clearBackToTableContext",
    value: function clearBackToTableContext() {
      while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
        this.pop();
      }
    }
  }, {
    key: "clearBackToTableBodyContext",
    value: function clearBackToTableBodyContext() {
      while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
        this.pop();
      }
    }
  }, {
    key: "clearBackToTableRowContext",
    value: function clearBackToTableRowContext() {
      while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
        this.pop();
      }
    }
  }, {
    key: "remove",
    value: function remove(element) {
      for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
          this.items.splice(i, 1);
          this.stackTop--;

          this._updateCurrentElement();

          break;
        }
      }
    }
  }, {
    key: "tryPeekProperlyNestedBodyElement",
    value: function tryPeekProperlyNestedBodyElement() {
      var element = this.items[1];
      return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
    }
  }, {
    key: "contains",
    value: function contains(element) {
      return this._indexOf(element) > -1;
    }
  }, {
    key: "getCommonAncestor",
    value: function getCommonAncestor(element) {
      var elementIdx = this._indexOf(element);

      return --elementIdx >= 0 ? this.items[elementIdx] : null;
    }
  }, {
    key: "isRootHtmlElementCurrent",
    value: function isRootHtmlElementCurrent() {
      return this.stackTop === 0 && this.currentTagName === $.HTML;
    }
  }, {
    key: "hasInScope",
    value: function hasInScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML) {
          return true;
        }

        if (isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasNumberedHeaderInScope",
    value: function hasNumberedHeaderInScope() {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML) {
          return true;
        }

        if (isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInListItemScope",
    value: function hasInListItemScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML) {
          return true;
        }

        if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInButtonScope",
    value: function hasInButtonScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML) {
          return true;
        }

        if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInTableScope",
    value: function hasInTableScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML) {
          continue;
        }

        if (tn === tagName) {
          return true;
        }

        if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasTableBodyContextInTableScope",
    value: function hasTableBodyContextInTableScope() {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML) {
          continue;
        }

        if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {
          return true;
        }

        if (tn === $.TABLE || tn === $.HTML) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "hasInSelectScope",
    value: function hasInSelectScope(tagName) {
      for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);
        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML) {
          continue;
        }

        if (tn === tagName) {
          return true;
        }

        if (tn !== $.OPTION && tn !== $.OPTGROUP) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "generateImpliedEndTags",
    value: function generateImpliedEndTags() {
      while (isImpliedEndTagRequired(this.currentTagName)) {
        this.pop();
      }
    }
  }, {
    key: "generateImpliedEndTagsThoroughly",
    value: function generateImpliedEndTagsThoroughly() {
      while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
        this.pop();
      }
    }
  }, {
    key: "generateImpliedEndTagsWithExclusion",
    value: function generateImpliedEndTagsWithExclusion(exclusionTagName) {
      while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
        this.pop();
      }
    }
  }]);
  return OpenElementStack;
}();

module.exports = OpenElementStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,