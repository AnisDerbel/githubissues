8b146d39b4033ba70bff0bb96c50af73
var domEach = require('../utils').domEach;

var toString = Object.prototype.toString;

exports.css = function (prop, val) {
  if (arguments.length === 2 || toString.call(prop) === '[object Object]') {
    return domEach(this, function (idx, el) {
      setCss(el, prop, val, idx);
    });
  }

  return getCss(this[0], prop);
};

function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);

    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function (k) {
      setCss(el, k, prop[k]);
    });
  }
}

function getCss(el, prop) {
  if (!el || !el.attribs) {
    return undefined;
  }

  var styles = parse(el.attribs.style);

  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    var newStyles = {};
    prop.forEach(function (item) {
      if (styles[item] != null) {
        newStyles[item] = styles[item];
      }
    });
    return newStyles;
  }

  return styles;
}

function stringify(obj) {
  return Object.keys(obj || {}).reduce(function (str, prop) {
    return str += '' + (str ? ' ' : '') + prop + ': ' + obj[prop] + ';';
  }, '');
}

function parse(styles) {
  styles = (styles || '').trim();
  if (!styles) return {};
  return styles.split(';').reduce(function (obj, str) {
    var n = str.indexOf(':');
    if (n < 1 || n === str.length - 1) return obj;
    obj[str.slice(0, n).trim()] = str.slice(n + 1).trim();
    return obj;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,