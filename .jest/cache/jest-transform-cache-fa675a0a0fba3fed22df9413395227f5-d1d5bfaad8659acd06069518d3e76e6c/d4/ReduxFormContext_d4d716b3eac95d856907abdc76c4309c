27de7dc6cbf15b5a5469989c8c93e074
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.withReduxForm = exports.renderChildren = exports.ReduxFormContext = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var React = _interopRequireWildcard(require("react"));

var ReduxFormContext = React.createContext(null);
exports.ReduxFormContext = ReduxFormContext;

var renderChildren = function renderChildren(Component, _ref) {
  var forwardedRef = _ref.forwardedRef,
      rest = (0, _objectWithoutPropertiesLoose2["default"])(_ref, ["forwardedRef"]);
  return function (_reduxForm) {
    return React.createElement(Component, (0, _extends2["default"])({}, rest, {
      _reduxForm: _reduxForm,
      ref: forwardedRef
    }));
  };
};

exports.renderChildren = renderChildren;

var withReduxForm = function withReduxForm(Component) {
  var Hoc = function (_React$Component) {
    (0, _inheritsLoose2["default"])(Hoc, _React$Component);

    function Hoc() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = Hoc.prototype;

    _proto.render = function render() {
      return React.createElement(ReduxFormContext.Consumer, {
        children: renderChildren(Component, this.props)
      });
    };

    return Hoc;
  }(React.Component);

  var ref = React.forwardRef(function (props, ref) {
    return React.createElement(Hoc, (0, _extends2["default"])({}, props, {
      forwardedRef: ref
    }));
  });
  ref.displayName = Component.displayName || Component.name || 'Component';
  return ref;
};

exports.withReduxForm = withReduxForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlZHV4Rm9ybUNvbnRleHQuanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwid2l0aFJlZHV4Rm9ybSIsInJlbmRlckNoaWxkcmVuIiwiUmVkdXhGb3JtQ29udGV4dCIsIl9pbmhlcml0c0xvb3NlMiIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsIkNvbXBvbmVudCIsIl9yZWYiLCJmb3J3YXJkZWRSZWYiLCJyZXN0IiwiX3JlZHV4Rm9ybSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJIb2MiLCJfUmVhY3QkQ29tcG9uZW50IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJyZW5kZXIiLCJDb25zdW1lciIsImNoaWxkcmVuIiwicHJvcHMiLCJmb3J3YXJkUmVmIiwiZGlzcGxheU5hbWUiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSx1QkFBdUIsR0FBR0MsT0FBTyxDQUFDLCtDQUFELENBQXJDOztBQUVBLElBQUlDLHNCQUFzQixHQUFHRCxPQUFPLENBQUMsOENBQUQsQ0FBcEM7O0FBRUFFLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLGFBQVIsR0FBd0JGLE9BQU8sQ0FBQ0csY0FBUixHQUF5QkgsT0FBTyxDQUFDSSxnQkFBUixHQUEyQixLQUFLLENBQWpGOztBQUVBLElBQUlDLGVBQWUsR0FBR04sc0JBQXNCLENBQUNELE9BQU8sQ0FBQyxzQ0FBRCxDQUFSLENBQTVDOztBQUVBLElBQUlRLFNBQVMsR0FBR1Asc0JBQXNCLENBQUNELE9BQU8sQ0FBQyxnQ0FBRCxDQUFSLENBQXRDOztBQUVBLElBQUlTLDhCQUE4QixHQUFHUixzQkFBc0IsQ0FBQ0QsT0FBTyxDQUFDLHFEQUFELENBQVIsQ0FBM0Q7O0FBRUEsSUFBSVUsS0FBSyxHQUFHWCx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQUQsQ0FBUixDQUFuQzs7QUFFQSxJQUFJTSxnQkFBZ0IsR0FBR0ksS0FBSyxDQUFDQyxhQUFOLENBQW9CLElBQXBCLENBQXZCO0FBQ0FULE9BQU8sQ0FBQ0ksZ0JBQVIsR0FBMkJBLGdCQUEzQjs7QUFFQSxJQUFJRCxjQUFjLEdBQUcsU0FBU0EsY0FBVCxDQUF3Qk8sU0FBeEIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQzVELE1BQUlDLFlBQVksR0FBR0QsSUFBSSxDQUFDQyxZQUF4QjtBQUFBLE1BQ0lDLElBQUksR0FBRyxDQUFDLEdBQUdOLDhCQUE4QixDQUFDLFNBQUQsQ0FBbEMsRUFBK0NJLElBQS9DLEVBQXFELENBQUMsY0FBRCxDQUFyRCxDQURYO0FBRUEsU0FBTyxVQUFVRyxVQUFWLEVBQXNCO0FBQzNCLFdBQU9OLEtBQUssQ0FBQ08sYUFBTixDQUFvQkwsU0FBcEIsRUFBK0IsQ0FBQyxHQUFHSixTQUFTLENBQUMsU0FBRCxDQUFiLEVBQTBCLEVBQTFCLEVBQThCTyxJQUE5QixFQUFvQztBQUN4RUMsTUFBQUEsVUFBVSxFQUFFQSxVQUQ0RDtBQUV4RUUsTUFBQUEsR0FBRyxFQUFFSjtBQUZtRSxLQUFwQyxDQUEvQixDQUFQO0FBSUQsR0FMRDtBQU1ELENBVEQ7O0FBV0FaLE9BQU8sQ0FBQ0csY0FBUixHQUF5QkEsY0FBekI7O0FBRUEsSUFBSUQsYUFBYSxHQUFHLFNBQVNBLGFBQVQsQ0FBdUJRLFNBQXZCLEVBQWtDO0FBQ3BELE1BQUlPLEdBQUcsR0FBZ0IsVUFBVUMsZ0JBQVYsRUFBNEI7QUFDakQsS0FBQyxHQUFHYixlQUFlLENBQUMsU0FBRCxDQUFuQixFQUFnQ1ksR0FBaEMsRUFBcUNDLGdCQUFyQzs7QUFFQSxhQUFTRCxHQUFULEdBQWU7QUFDYixhQUFPQyxnQkFBZ0IsQ0FBQ0MsS0FBakIsQ0FBdUIsSUFBdkIsRUFBNkJDLFNBQTdCLEtBQTJDLElBQWxEO0FBQ0Q7O0FBRUQsUUFBSUMsTUFBTSxHQUFHSixHQUFHLENBQUNLLFNBQWpCOztBQUVBRCxJQUFBQSxNQUFNLENBQUNFLE1BQVAsR0FBZ0IsU0FBU0EsTUFBVCxHQUFrQjtBQUNoQyxhQUFPZixLQUFLLENBQUNPLGFBQU4sQ0FBb0JYLGdCQUFnQixDQUFDb0IsUUFBckMsRUFBK0M7QUFDcERDLFFBQUFBLFFBQVEsRUFBRXRCLGNBQWMsQ0FBQ08sU0FBRCxFQUFZLEtBQUtnQixLQUFqQjtBQUQ0QixPQUEvQyxDQUFQO0FBR0QsS0FKRDs7QUFNQSxXQUFPVCxHQUFQO0FBQ0QsR0FoQnNCLENBZ0JyQlQsS0FBSyxDQUFDRSxTQWhCZSxDQUF2Qjs7QUFrQkEsTUFBSU0sR0FBRyxHQUFHUixLQUFLLENBQUNtQixVQUFOLENBQWlCLFVBQVVELEtBQVYsRUFBaUJWLEdBQWpCLEVBQXNCO0FBQy9DLFdBQU9SLEtBQUssQ0FBQ08sYUFBTixDQUFvQkUsR0FBcEIsRUFBeUIsQ0FBQyxHQUFHWCxTQUFTLENBQUMsU0FBRCxDQUFiLEVBQTBCLEVBQTFCLEVBQThCb0IsS0FBOUIsRUFBcUM7QUFDbkVkLE1BQUFBLFlBQVksRUFBRUk7QUFEcUQsS0FBckMsQ0FBekIsQ0FBUDtBQUdELEdBSlMsQ0FBVjtBQUtBQSxFQUFBQSxHQUFHLENBQUNZLFdBQUosR0FBa0JsQixTQUFTLENBQUNrQixXQUFWLElBQXlCbEIsU0FBUyxDQUFDbUIsSUFBbkMsSUFBMkMsV0FBN0Q7QUFDQSxTQUFPYixHQUFQO0FBQ0QsQ0ExQkQ7O0FBNEJBaEIsT0FBTyxDQUFDRSxhQUFSLEdBQXdCQSxhQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMud2l0aFJlZHV4Rm9ybSA9IGV4cG9ydHMucmVuZGVyQ2hpbGRyZW4gPSBleHBvcnRzLlJlZHV4Rm9ybUNvbnRleHQgPSB2b2lkIDA7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBSZWR1eEZvcm1Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydHMuUmVkdXhGb3JtQ29udGV4dCA9IFJlZHV4Rm9ybUNvbnRleHQ7XG5cbnZhciByZW5kZXJDaGlsZHJlbiA9IGZ1bmN0aW9uIHJlbmRlckNoaWxkcmVuKENvbXBvbmVudCwgX3JlZikge1xuICB2YXIgZm9yd2FyZGVkUmVmID0gX3JlZi5mb3J3YXJkZWRSZWYsXG4gICAgICByZXN0ID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMltcImRlZmF1bHRcIl0pKF9yZWYsIFtcImZvcndhcmRlZFJlZlwiXSk7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZHV4Rm9ybSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCByZXN0LCB7XG4gICAgICBfcmVkdXhGb3JtOiBfcmVkdXhGb3JtLFxuICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICB9KSk7XG4gIH07XG59O1xuXG5leHBvcnRzLnJlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbnZhciB3aXRoUmVkdXhGb3JtID0gZnVuY3Rpb24gd2l0aFJlZHV4Rm9ybShDb21wb25lbnQpIHtcbiAgdmFyIEhvYyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShIb2MsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gSG9jKCkge1xuICAgICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBIb2MucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlZHV4Rm9ybUNvbnRleHQuQ29uc3VtZXIsIHtcbiAgICAgICAgY2hpbGRyZW46IHJlbmRlckNoaWxkcmVuKENvbXBvbmVudCwgdGhpcy5wcm9wcylcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gSG9jO1xuICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgdmFyIHJlZiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChIb2MsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMsIHtcbiAgICAgIGZvcndhcmRlZFJlZjogcmVmXG4gICAgfSkpO1xuICB9KTtcbiAgcmVmLmRpc3BsYXlOYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICByZXR1cm4gcmVmO1xufTtcblxuZXhwb3J0cy53aXRoUmVkdXhGb3JtID0gd2l0aFJlZHV4Rm9ybTsiXX0=