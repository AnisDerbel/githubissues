d20cebef02c2e2759b58fb71aa131930
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "testSaga", {
  enumerable: true,
  get: function get() {
    return _testSaga2.default;
  }
});
Object.defineProperty(exports, "expectSaga", {
  enumerable: true,
  get: function get() {
    return _expectSaga2.default;
  }
});
exports.providers = exports.matchers = void 0;

var _testSaga2 = _interopRequireDefault(require("./testSaga"));

var _expectSaga2 = _interopRequireDefault(require("./expectSaga"));

var _matchers = _interopRequireWildcard(require("./expectSaga/matchers"));

exports.matchers = _matchers;

var _providers = _interopRequireWildcard(require("./expectSaga/providers"));

exports.providers = _providers;

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl90ZXN0U2FnYTIiLCJkZWZhdWx0IiwiX2V4cGVjdFNhZ2EyIiwicHJvdmlkZXJzIiwibWF0Y2hlcnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9tYXRjaGVycyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3Byb3ZpZGVycyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJoYXMiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FILE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsVUFBL0IsRUFBMkM7QUFDekNFLEVBQUFBLFVBQVUsRUFBRSxJQUQ2QjtBQUV6Q0MsRUFBQUEsR0FBRyxFQUFFLGVBQVk7QUFDZixXQUFPQyxVQUFVLENBQUNDLE9BQWxCO0FBQ0Q7QUFKd0MsQ0FBM0M7QUFNQVAsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0UsRUFBQUEsVUFBVSxFQUFFLElBRCtCO0FBRTNDQyxFQUFBQSxHQUFHLEVBQUUsZUFBWTtBQUNmLFdBQU9HLFlBQVksQ0FBQ0QsT0FBcEI7QUFDRDtBQUowQyxDQUE3QztBQU1BTCxPQUFPLENBQUNPLFNBQVIsR0FBb0JQLE9BQU8sQ0FBQ1EsUUFB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O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGVzdFNhZ2FcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3Rlc3RTYWdhMi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImV4cGVjdFNhZ2FcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2V4cGVjdFNhZ2EyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuZXhwb3J0cy5wcm92aWRlcnMgPSBleHBvcnRzLm1hdGNoZXJzID0gdm9pZCAwO1xuXG52YXIgX3Rlc3RTYWdhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdGVzdFNhZ2FcIikpO1xuXG52YXIgX2V4cGVjdFNhZ2EyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9leHBlY3RTYWdhXCIpKTtcblxudmFyIF9tYXRjaGVycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2V4cGVjdFNhZ2EvbWF0Y2hlcnNcIikpO1xuXG5leHBvcnRzLm1hdGNoZXJzID0gX21hdGNoZXJzO1xuXG52YXIgX3Byb3ZpZGVycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2V4cGVjdFNhZ2EvcHJvdmlkZXJzXCIpKTtcblxuZXhwb3J0cy5wcm92aWRlcnMgPSBfcHJvdmlkZXJzO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iXX0=