{"version":3,"sources":["toHaveClassName.js"],"names":["Object","defineProperty","exports","value","default","toHaveClassName","_name","_interopRequireDefault","require","_html","obj","__esModule","enzymeWrapper","className","normalizedClassName","split","join","actualClassName","pass","getElements","length","is","prop","allMatch","forEach","node","message","negatedMessage","contextualInformation","actual","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAlC;;AAEA,IAAIC,KAAK,GAAGF,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAlC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAS/F,SAASL,eAAT,CAAyBO,aAAzB,EAAwCC,SAAxC,EAAmD;AACjD,MAAIC,mBAAmB,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B,GAA1B,CAA1B;AACA,MAAIC,eAAe,GAAG,QAAtB;AACA,MAAIC,IAAI,GAAG,KAAX;;AAEA,MAAIJ,mBAAmB,CAAC,CAAD,CAAnB,KAA2B,GAA/B,EAAoC;AAClCA,IAAAA,mBAAmB,SAAOA,mBAA1B;AACD;;AAGD,UAAQF,aAAa,CAACO,WAAd,GAA4BC,MAApC;AACE,SAAK,CAAL;AACE;;AAGF,SAAK,CAAL;AACEF,MAAAA,IAAI,GAAGN,aAAa,CAACS,EAAd,CAAiBP,mBAAjB,CAAP;AACAG,MAAAA,eAAe,GAAGL,aAAa,CAACU,IAAd,CAAmB,WAAnB,CAAlB;AACA;;AAEF;AACE,UAAIC,QAAQ,GAAG,IAAf;AACAX,MAAAA,aAAa,CAACY,OAAd,CAAsB,UAAAC,IAAI,EAAI;AAC5B,YAAI,CAACA,IAAI,CAACJ,EAAL,CAAQP,mBAAR,CAAL,EAAmC;AACjCS,UAAAA,QAAQ,GAAG,KAAX;AACD;;AAEDN,QAAAA,eAAe,GAAGQ,IAAI,CAACH,IAAL,CAAU,WAAV,CAAlB;AACD,OAND;AAOAJ,MAAAA,IAAI,GAAGK,QAAP;AAnBJ;;AAsBA,SAAO;AACLL,IAAAA,IAAI,EAAJA,IADK;AAELQ,IAAAA,OAAO,iBAAe,CAAC,GAAGpB,KAAK,CAACF,OAAV,EAAmBQ,aAAnB,CAAf,iCAA2EE,mBAA3E,+BAAsHG,eAAtH,OAFF;AAILU,IAAAA,cAAc,iBAAe,CAAC,GAAGrB,KAAK,CAACF,OAAV,EAAmBQ,aAAnB,CAAf,2BAAqEE,mBAArE,wBAJT;AAKLc,IAAAA,qBAAqB,EAAE;AACrBC,MAAAA,MAAM,0BAAwB,CAAC,GAAGpB,KAAK,CAACL,OAAV,EAAmBQ,aAAnB;AADT;AALlB,GAAP;AASD;;AAEDkB,MAAM,CAAC5B,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toHaveClassName;\n\nvar _name = _interopRequireDefault(require(\"../utils/name\"));\n\nvar _html = _interopRequireDefault(require(\"../utils/html\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This source code is licensed under the MIT-style license found in the\n * LICENSE file in the root directory of this source tree. *\n *\n * @providesModule toHaveClassNameAssertion\n * \n */\nfunction toHaveClassName(enzymeWrapper, className) {\n  let normalizedClassName = className.split(' ').join('.');\n  let actualClassName = '(none)';\n  let pass = false;\n\n  if (normalizedClassName[0] !== '.') {\n    normalizedClassName = `.${normalizedClassName}`;\n  } // handle different lengths of enzymeWrappers\n\n\n  switch (enzymeWrapper.getElements().length) {\n    case 0:\n      break;\n    // this will and should fail the test\n\n    case 1:\n      pass = enzymeWrapper.is(normalizedClassName);\n      actualClassName = enzymeWrapper.prop('className');\n      break;\n\n    default:\n      let allMatch = true;\n      enzymeWrapper.forEach(node => {\n        if (!node.is(normalizedClassName)) {\n          allMatch = false;\n        }\n\n        actualClassName = node.prop('className');\n      });\n      pass = allMatch;\n  }\n\n  return {\n    pass,\n    message: `Expected <${(0, _name.default)(enzymeWrapper)}> to have className of \"${normalizedClassName}\" but instead found \"${actualClassName}\"`,\n    // eslint-disable-line max-len\n    negatedMessage: `Expected <${(0, _name.default)(enzymeWrapper)}> not to contain \"${normalizedClassName}\" in its className`,\n    contextualInformation: {\n      actual: `Found node output: ${(0, _html.default)(enzymeWrapper)}`\n    }\n  };\n}\n\nmodule.exports = exports.default;"]}