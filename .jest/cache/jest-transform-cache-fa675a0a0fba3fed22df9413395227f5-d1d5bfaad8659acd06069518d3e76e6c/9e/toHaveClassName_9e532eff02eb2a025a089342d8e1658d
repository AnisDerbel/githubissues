ab2b15e6ffa5a22782d27a3387e17152
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toHaveClassName;

var _name = _interopRequireDefault(require("../utils/name"));

var _html = _interopRequireDefault(require("../utils/html"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function toHaveClassName(enzymeWrapper, className) {
  var normalizedClassName = className.split(' ').join('.');
  var actualClassName = '(none)';
  var pass = false;

  if (normalizedClassName[0] !== '.') {
    normalizedClassName = "." + normalizedClassName;
  }

  switch (enzymeWrapper.getElements().length) {
    case 0:
      break;

    case 1:
      pass = enzymeWrapper.is(normalizedClassName);
      actualClassName = enzymeWrapper.prop('className');
      break;

    default:
      var allMatch = true;
      enzymeWrapper.forEach(function (node) {
        if (!node.is(normalizedClassName)) {
          allMatch = false;
        }

        actualClassName = node.prop('className');
      });
      pass = allMatch;
  }

  return {
    pass: pass,
    message: "Expected <" + (0, _name.default)(enzymeWrapper) + "> to have className of \"" + normalizedClassName + "\" but instead found \"" + actualClassName + "\"",
    negatedMessage: "Expected <" + (0, _name.default)(enzymeWrapper) + "> not to contain \"" + normalizedClassName + "\" in its className",
    contextualInformation: {
      actual: "Found node output: " + (0, _html.default)(enzymeWrapper)
    }
  };
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvSGF2ZUNsYXNzTmFtZS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ0b0hhdmVDbGFzc05hbWUiLCJfbmFtZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2h0bWwiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZW56eW1lV3JhcHBlciIsImNsYXNzTmFtZSIsIm5vcm1hbGl6ZWRDbGFzc05hbWUiLCJzcGxpdCIsImpvaW4iLCJhY3R1YWxDbGFzc05hbWUiLCJwYXNzIiwiZ2V0RWxlbWVudHMiLCJsZW5ndGgiLCJpcyIsInByb3AiLCJhbGxNYXRjaCIsImZvckVhY2giLCJub2RlIiwibWVzc2FnZSIsIm5lZ2F0ZWRNZXNzYWdlIiwiY29udGV4dHVhbEluZm9ybWF0aW9uIiwiYWN0dWFsIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsZUFBbEI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGVBQUQsQ0FBUixDQUFsQzs7QUFFQSxJQUFJQyxLQUFLLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZUFBRCxDQUFSLENBQWxDOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFTixJQUFBQSxPQUFPLEVBQUVNO0FBQVgsR0FBckM7QUFBd0Q7O0FBUy9GLFNBQVNMLGVBQVQsQ0FBeUJPLGFBQXpCLEVBQXdDQyxTQUF4QyxFQUFtRDtBQUNqRCxNQUFJQyxtQkFBbUIsR0FBR0QsU0FBUyxDQUFDRSxLQUFWLENBQWdCLEdBQWhCLEVBQXFCQyxJQUFyQixDQUEwQixHQUExQixDQUExQjtBQUNBLE1BQUlDLGVBQWUsR0FBRyxRQUF0QjtBQUNBLE1BQUlDLElBQUksR0FBRyxLQUFYOztBQUVBLE1BQUlKLG1CQUFtQixDQUFDLENBQUQsQ0FBbkIsS0FBMkIsR0FBL0IsRUFBb0M7QUFDbENBLElBQUFBLG1CQUFtQixTQUFPQSxtQkFBMUI7QUFDRDs7QUFHRCxVQUFRRixhQUFhLENBQUNPLFdBQWQsR0FBNEJDLE1BQXBDO0FBQ0UsU0FBSyxDQUFMO0FBQ0U7O0FBR0YsU0FBSyxDQUFMO0FBQ0VGLE1BQUFBLElBQUksR0FBR04sYUFBYSxDQUFDUyxFQUFkLENBQWlCUCxtQkFBakIsQ0FBUDtBQUNBRyxNQUFBQSxlQUFlLEdBQUdMLGFBQWEsQ0FBQ1UsSUFBZCxDQUFtQixXQUFuQixDQUFsQjtBQUNBOztBQUVGO0FBQ0UsVUFBSUMsUUFBUSxHQUFHLElBQWY7QUFDQVgsTUFBQUEsYUFBYSxDQUFDWSxPQUFkLENBQXNCLFVBQUFDLElBQUksRUFBSTtBQUM1QixZQUFJLENBQUNBLElBQUksQ0FBQ0osRUFBTCxDQUFRUCxtQkFBUixDQUFMLEVBQW1DO0FBQ2pDUyxVQUFBQSxRQUFRLEdBQUcsS0FBWDtBQUNEOztBQUVETixRQUFBQSxlQUFlLEdBQUdRLElBQUksQ0FBQ0gsSUFBTCxDQUFVLFdBQVYsQ0FBbEI7QUFDRCxPQU5EO0FBT0FKLE1BQUFBLElBQUksR0FBR0ssUUFBUDtBQW5CSjs7QUFzQkEsU0FBTztBQUNMTCxJQUFBQSxJQUFJLEVBQUpBLElBREs7QUFFTFEsSUFBQUEsT0FBTyxpQkFBZSxDQUFDLEdBQUdwQixLQUFLLENBQUNGLE9BQVYsRUFBbUJRLGFBQW5CLENBQWYsaUNBQTJFRSxtQkFBM0UsK0JBQXNIRyxlQUF0SCxPQUZGO0FBSUxVLElBQUFBLGNBQWMsaUJBQWUsQ0FBQyxHQUFHckIsS0FBSyxDQUFDRixPQUFWLEVBQW1CUSxhQUFuQixDQUFmLDJCQUFxRUUsbUJBQXJFLHdCQUpUO0FBS0xjLElBQUFBLHFCQUFxQixFQUFFO0FBQ3JCQyxNQUFBQSxNQUFNLDBCQUF3QixDQUFDLEdBQUdwQixLQUFLLENBQUNMLE9BQVYsRUFBbUJRLGFBQW5CO0FBRFQ7QUFMbEIsR0FBUDtBQVNEOztBQUVEa0IsTUFBTSxDQUFDNUIsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9IYXZlQ2xhc3NOYW1lO1xuXG52YXIgX25hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9uYW1lXCIpKTtcblxudmFyIF9odG1sID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaHRtbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlULXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuICpcbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9IYXZlQ2xhc3NOYW1lQXNzZXJ0aW9uXG4gKiBcbiAqL1xuZnVuY3Rpb24gdG9IYXZlQ2xhc3NOYW1lKGVuenltZVdyYXBwZXIsIGNsYXNzTmFtZSkge1xuICBsZXQgbm9ybWFsaXplZENsYXNzTmFtZSA9IGNsYXNzTmFtZS5zcGxpdCgnICcpLmpvaW4oJy4nKTtcbiAgbGV0IGFjdHVhbENsYXNzTmFtZSA9ICcobm9uZSknO1xuICBsZXQgcGFzcyA9IGZhbHNlO1xuXG4gIGlmIChub3JtYWxpemVkQ2xhc3NOYW1lWzBdICE9PSAnLicpIHtcbiAgICBub3JtYWxpemVkQ2xhc3NOYW1lID0gYC4ke25vcm1hbGl6ZWRDbGFzc05hbWV9YDtcbiAgfSAvLyBoYW5kbGUgZGlmZmVyZW50IGxlbmd0aHMgb2YgZW56eW1lV3JhcHBlcnNcblxuXG4gIHN3aXRjaCAoZW56eW1lV3JhcHBlci5nZXRFbGVtZW50cygpLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICAgIGJyZWFrO1xuICAgIC8vIHRoaXMgd2lsbCBhbmQgc2hvdWxkIGZhaWwgdGhlIHRlc3RcblxuICAgIGNhc2UgMTpcbiAgICAgIHBhc3MgPSBlbnp5bWVXcmFwcGVyLmlzKG5vcm1hbGl6ZWRDbGFzc05hbWUpO1xuICAgICAgYWN0dWFsQ2xhc3NOYW1lID0gZW56eW1lV3JhcHBlci5wcm9wKCdjbGFzc05hbWUnKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGxldCBhbGxNYXRjaCA9IHRydWU7XG4gICAgICBlbnp5bWVXcmFwcGVyLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmICghbm9kZS5pcyhub3JtYWxpemVkQ2xhc3NOYW1lKSkge1xuICAgICAgICAgIGFsbE1hdGNoID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBhY3R1YWxDbGFzc05hbWUgPSBub2RlLnByb3AoJ2NsYXNzTmFtZScpO1xuICAgICAgfSk7XG4gICAgICBwYXNzID0gYWxsTWF0Y2g7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhc3MsXG4gICAgbWVzc2FnZTogYEV4cGVjdGVkIDwkeygwLCBfbmFtZS5kZWZhdWx0KShlbnp5bWVXcmFwcGVyKX0+IHRvIGhhdmUgY2xhc3NOYW1lIG9mIFwiJHtub3JtYWxpemVkQ2xhc3NOYW1lfVwiIGJ1dCBpbnN0ZWFkIGZvdW5kIFwiJHthY3R1YWxDbGFzc05hbWV9XCJgLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbWF4LWxlblxuICAgIG5lZ2F0ZWRNZXNzYWdlOiBgRXhwZWN0ZWQgPCR7KDAsIF9uYW1lLmRlZmF1bHQpKGVuenltZVdyYXBwZXIpfT4gbm90IHRvIGNvbnRhaW4gXCIke25vcm1hbGl6ZWRDbGFzc05hbWV9XCIgaW4gaXRzIGNsYXNzTmFtZWAsXG4gICAgY29udGV4dHVhbEluZm9ybWF0aW9uOiB7XG4gICAgICBhY3R1YWw6IGBGb3VuZCBub2RlIG91dHB1dDogJHsoMCwgX2h0bWwuZGVmYXVsdCkoZW56eW1lV3JhcHBlcil9YFxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19