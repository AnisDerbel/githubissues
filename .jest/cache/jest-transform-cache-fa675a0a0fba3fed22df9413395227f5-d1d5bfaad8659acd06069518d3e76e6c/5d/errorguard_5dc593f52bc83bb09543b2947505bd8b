edecd9a792a89e722fcf1ae161ed5121
var _inGuard = 0;

var _globalHandler = function onError(e, isFatal) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error, false);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args, unused_onError, unused_name) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },
  inGuard: function inGuard() {
    return !!_inGuard;
  },
  guard: function guard(fun, name, context) {
    var _ref;

    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    var guardName = (_ref = name !== null && name !== void 0 ? name : fun.name) !== null && _ref !== void 0 ? _ref : '<generated guard>';

    function guarded() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return ErrorUtils.applyWithGuard(fun, context !== null && context !== void 0 ? context : this, args, null, guardName);
    }

    return guarded;
  }
};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsImlzRmF0YWwiLCJFcnJvclV0aWxzIiwic2V0R2xvYmFsSGFuZGxlciIsImZ1biIsImdldEdsb2JhbEhhbmRsZXIiLCJyZXBvcnRFcnJvciIsImVycm9yIiwicmVwb3J0RmF0YWxFcnJvciIsImFwcGx5V2l0aEd1YXJkIiwiY29udGV4dCIsImFyZ3MiLCJ1bnVzZWRfb25FcnJvciIsInVudXNlZF9uYW1lIiwiYXBwbHkiLCJhcHBseVdpdGhHdWFyZElmTmVlZGVkIiwiaW5HdWFyZCIsImd1YXJkIiwibmFtZSIsImNvbnNvbGUiLCJ3YXJuIiwiZ3VhcmROYW1lIiwiZ3VhcmRlZCIsImdsb2JhbCJdLCJtYXBwaW5ncyI6IkFBV0EsSUFBSUEsUUFBUSxHQUFHLENBQWY7O0FBVUEsSUFBSUMsY0FBNEIsR0FBRyxTQUFTQyxPQUFULENBQ2pDQyxDQURpQyxFQUVqQ0MsT0FGaUMsRUFHakM7QUFDQSxRQUFNRCxDQUFOO0FBQ0QsQ0FMRDs7QUFlQSxJQUFNRSxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLGdCQURpQiw0QkFDQUMsR0FEQSxFQUN5QjtBQUN4Q04sSUFBQUEsY0FBYyxHQUFHTSxHQUFqQjtBQUNELEdBSGdCO0FBSWpCQyxFQUFBQSxnQkFKaUIsOEJBSWdCO0FBQy9CLFdBQU9QLGNBQVA7QUFDRCxHQU5nQjtBQU9qQlEsRUFBQUEsV0FQaUIsdUJBT0xDLEtBUEssRUFPZTtBQUM5QlQsSUFBQUEsY0FBYyxJQUFJQSxjQUFjLENBQUNTLEtBQUQsRUFBUSxLQUFSLENBQWhDO0FBQ0QsR0FUZ0I7QUFVakJDLEVBQUFBLGdCQVZpQiw0QkFVQUQsS0FWQSxFQVVvQjtBQUVuQ1QsSUFBQUEsY0FBYyxJQUFJQSxjQUFjLENBQUNTLEtBQUQsRUFBUSxJQUFSLENBQWhDO0FBQ0QsR0FiZ0I7QUFjakJFLEVBQUFBLGNBZGlCLDBCQWVmTCxHQWZlLEVBZ0JmTSxPQWhCZSxFQWlCZkMsSUFqQmUsRUFtQmZDLGNBbkJlLEVBcUJmQyxXQXJCZSxFQXNCUjtBQUNQLFFBQUk7QUFDRmhCLE1BQUFBLFFBQVE7QUFFUixhQUFPTyxHQUFHLENBQUNVLEtBQUosQ0FBVUosT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtBQUNELEtBSkQsQ0FJRSxPQUFPWCxDQUFQLEVBQVU7QUFDVkUsTUFBQUEsVUFBVSxDQUFDSSxXQUFYLENBQXVCTixDQUF2QjtBQUNELEtBTkQsU0FNVTtBQUNSSCxNQUFBQSxRQUFRO0FBQ1Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0FqQ2dCO0FBa0NqQmtCLEVBQUFBLHNCQWxDaUIsa0NBbUNmWCxHQW5DZSxFQW9DZk0sT0FwQ2UsRUFxQ2ZDLElBckNlLEVBc0NSO0FBQ1AsUUFBSVQsVUFBVSxDQUFDYyxPQUFYLEVBQUosRUFBMEI7QUFFeEIsYUFBT1osR0FBRyxDQUFDVSxLQUFKLENBQVVKLE9BQVYsRUFBbUJDLElBQW5CLENBQVA7QUFDRCxLQUhELE1BR087QUFDTFQsTUFBQUEsVUFBVSxDQUFDTyxjQUFYLENBQTBCTCxHQUExQixFQUErQk0sT0FBL0IsRUFBd0NDLElBQXhDO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0E5Q2dCO0FBK0NqQkssRUFBQUEsT0EvQ2lCLHFCQStDRTtBQUNqQixXQUFPLENBQUMsQ0FBQ25CLFFBQVQ7QUFDRCxHQWpEZ0I7QUFrRGpCb0IsRUFBQUEsS0FsRGlCLGlCQW1EZmIsR0FuRGUsRUFvRGZjLElBcERlLEVBcURmUixPQXJEZSxFQXNETztBQUFBOztBQUd0QixRQUFJLE9BQU9OLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUM3QmUsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEscURBQWIsRUFBb0VoQixHQUFwRTtBQUNBLGFBQU8sSUFBUDtBQUNEOztBQUNELFFBQU1pQixTQUFTLFdBQUdILElBQUgsYUFBR0EsSUFBSCxjQUFHQSxJQUFILEdBQVdkLEdBQUcsQ0FBQ2MsSUFBZix1Q0FBdUIsbUJBQXRDOztBQUNBLGFBQVNJLE9BQVQsR0FBd0M7QUFBQSx3Q0FBcEJYLElBQW9CO0FBQXBCQSxRQUFBQSxJQUFvQjtBQUFBOztBQUN0QyxhQUFPVCxVQUFVLENBQUNPLGNBQVgsQ0FDTEwsR0FESyxFQUVMTSxPQUZLLGFBRUxBLE9BRkssY0FFTEEsT0FGSyxHQUVNLElBRk4sRUFHTEMsSUFISyxFQUlMLElBSkssRUFLTFUsU0FMSyxDQUFQO0FBT0Q7O0FBRUQsV0FBT0MsT0FBUDtBQUNEO0FBekVnQixDQUFuQjtBQTRFQUMsTUFBTSxDQUFDckIsVUFBUCxHQUFvQkEsVUFBcEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICogQHBvbHlmaWxsXG4gKi9cblxubGV0IF9pbkd1YXJkID0gMDtcblxudHlwZSBFcnJvckhhbmRsZXIgPSAoZXJyb3I6IG1peGVkLCBpc0ZhdGFsOiBib29sZWFuKSA9PiB2b2lkO1xudHlwZSBGbjxBcmdzLCBSZXR1cm4+ID0gKC4uLkFyZ3MpID0+IFJldHVybjtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBlcnJvciBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gd2UgZW5jb3VudGVyIGFuIGV4Y2VwdGlvblxuICogd2hlbiBsb2FkaW5nIGEgbW9kdWxlLiBUaGlzIHdpbGwgcmVwb3J0IGFueSBlcnJvcnMgZW5jb3VudGVyZWQgYmVmb3JlXG4gKiBFeGNlcHRpb25zTWFuYWdlciBpcyBjb25maWd1cmVkLlxuICovXG5sZXQgX2dsb2JhbEhhbmRsZXI6IEVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIG9uRXJyb3IoXG4gIGU6IG1peGVkLFxuICBpc0ZhdGFsOiBib29sZWFuLFxuKSB7XG4gIHRocm93IGU7XG59O1xuXG4vKipcbiAqIFRoZSBwYXJ0aWN1bGFyIHJlcXVpcmUgcnVudGltZSB0aGF0IHdlIGFyZSB1c2luZyBsb29rcyBmb3IgYSBnbG9iYWxcbiAqIGBFcnJvclV0aWxzYCBvYmplY3QgYW5kIGlmIGl0IGV4aXN0cywgdGhlbiBpdCByZXF1aXJlcyBtb2R1bGVzIHdpdGggdGhlXG4gKiBlcnJvciBoYW5kbGVyIHNwZWNpZmllZCB2aWEgRXJyb3JVdGlscy5zZXRHbG9iYWxIYW5kbGVyIGJ5IGNhbGxpbmcgdGhlXG4gKiByZXF1aXJlIGZ1bmN0aW9uIHdpdGggYXBwbHlXaXRoR3VhcmQuIFNpbmNlIHRoZSByZXF1aXJlIG1vZHVsZSBpcyBsb2FkZWRcbiAqIGJlZm9yZSBhbnkgb2YgdGhlIG1vZHVsZXMsIHRoaXMgRXJyb3JVdGlscyBtdXN0IGJlIGRlZmluZWQgKGFuZCB0aGUgaGFuZGxlclxuICogc2V0KSBnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIGFueXRoaW5nLlxuICovXG5jb25zdCBFcnJvclV0aWxzID0ge1xuICBzZXRHbG9iYWxIYW5kbGVyKGZ1bjogRXJyb3JIYW5kbGVyKTogdm9pZCB7XG4gICAgX2dsb2JhbEhhbmRsZXIgPSBmdW47XG4gIH0sXG4gIGdldEdsb2JhbEhhbmRsZXIoKTogRXJyb3JIYW5kbGVyIHtcbiAgICByZXR1cm4gX2dsb2JhbEhhbmRsZXI7XG4gIH0sXG4gIHJlcG9ydEVycm9yKGVycm9yOiBtaXhlZCk6IHZvaWQge1xuICAgIF9nbG9iYWxIYW5kbGVyICYmIF9nbG9iYWxIYW5kbGVyKGVycm9yLCBmYWxzZSk7XG4gIH0sXG4gIHJlcG9ydEZhdGFsRXJyb3IoZXJyb3I6IG1peGVkKTogdm9pZCB7XG4gICAgLy8gTk9URTogVGhpcyBoYXMgYW4gdW50eXBlZCBjYWxsIHNpdGUgaW4gTWV0cm8uXG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IsIHRydWUpO1xuICB9LFxuICBhcHBseVdpdGhHdWFyZDxUQXJnczogJFJlYWRPbmx5QXJyYXk8bWl4ZWQ+LCBUT3V0PihcbiAgICBmdW46IEZuPFRBcmdzLCBUT3V0PixcbiAgICBjb250ZXh0PzogP21peGVkLFxuICAgIGFyZ3M/OiA/VEFyZ3MsXG4gICAgLy8gVW51c2VkLCBidXQgc29tZSBjb2RlIHN5bmNlZCBmcm9tIHd3dyBzZXRzIGl0IHRvIG51bGwuXG4gICAgdW51c2VkX29uRXJyb3I/OiBudWxsLFxuICAgIC8vIFNvbWUgY2FsbGVycyBwYXNzIGEgbmFtZSBoZXJlLCB3aGljaCB3ZSBpZ25vcmUuXG4gICAgdW51c2VkX25hbWU/OiA/c3RyaW5nLFxuICApOiA/VE91dCB7XG4gICAgdHJ5IHtcbiAgICAgIF9pbkd1YXJkKys7XG4gICAgICAvLyAkRmxvd0ZpeE1lOiBUT0RPIFQ0ODIwNDc0NSAoMSkgYXBwbHkoY29udGV4dCwgbnVsbCkgaXMgZmluZS4gKDIpIGFycmF5IC0+IHJlc3QgYXJyYXkgc2hvdWxkIHdvcmtcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgRXJyb3JVdGlscy5yZXBvcnRFcnJvcihlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2luR3VhcmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkSWZOZWVkZWQ8VEFyZ3M6ICRSZWFkT25seUFycmF5PG1peGVkPiwgVE91dD4oXG4gICAgZnVuOiBGbjxUQXJncywgVE91dD4sXG4gICAgY29udGV4dD86ID9taXhlZCxcbiAgICBhcmdzPzogP1RBcmdzLFxuICApOiA/VE91dCB7XG4gICAgaWYgKEVycm9yVXRpbHMuaW5HdWFyZCgpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lOiBUT0RPIFQ0ODIwNDc0NSAoMSkgYXBwbHkoY29udGV4dCwgbnVsbCkgaXMgZmluZS4gKDIpIGFycmF5IC0+IHJlc3QgYXJyYXkgc2hvdWxkIHdvcmtcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoZnVuLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGluR3VhcmQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhX2luR3VhcmQ7XG4gIH0sXG4gIGd1YXJkPFRBcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sIFRPdXQ+KFxuICAgIGZ1bjogRm48VEFyZ3MsIFRPdXQ+LFxuICAgIG5hbWU/OiA/c3RyaW5nLFxuICAgIGNvbnRleHQ/OiA/bWl4ZWQsXG4gICk6ID8oLi4uVEFyZ3MpID0+ID9UT3V0IHtcbiAgICAvLyBUT0RPOiAobW90aSkgVDQ4MjA0NzUzIE1ha2Ugc3VyZSB0aGlzIHdhcm5pbmcgaXMgbmV2ZXIgaGl0IGFuZCByZW1vdmUgaXQgLSB0eXBlc1xuICAgIC8vIHNob3VsZCBiZSBzdWZmaWNpZW50LlxuICAgIGlmICh0eXBlb2YgZnVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0EgZnVuY3Rpb24gbXVzdCBiZSBwYXNzZWQgdG8gRXJyb3JVdGlscy5ndWFyZCwgZ290ICcsIGZ1bik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZ3VhcmROYW1lID0gbmFtZSA/PyBmdW4ubmFtZSA/PyAnPGdlbmVyYXRlZCBndWFyZD4nO1xuICAgIGZ1bmN0aW9uIGd1YXJkZWQoLi4uYXJnczogVEFyZ3MpOiA/VE91dCB7XG4gICAgICByZXR1cm4gRXJyb3JVdGlscy5hcHBseVdpdGhHdWFyZChcbiAgICAgICAgZnVuLFxuICAgICAgICBjb250ZXh0ID8/IHRoaXMsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGd1YXJkTmFtZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGd1YXJkZWQ7XG4gIH0sXG59O1xuXG5nbG9iYWwuRXJyb3JVdGlscyA9IEVycm9yVXRpbHM7XG5cbmV4cG9ydCB0eXBlIEVycm9yVXRpbHNUID0gdHlwZW9mIEVycm9yVXRpbHM7XG4iXX0=