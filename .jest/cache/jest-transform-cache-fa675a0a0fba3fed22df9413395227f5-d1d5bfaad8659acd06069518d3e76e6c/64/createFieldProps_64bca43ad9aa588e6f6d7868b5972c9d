12f074433070419abd78a1650a7882ef
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = createFieldProps;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var processProps = function processProps(type, props, _value, deepEqual) {
  var value = props.value;

  if (type === 'checkbox') {
    return (0, _extends2["default"])({}, props, {
      checked: !!value
    });
  }

  if (type === 'radio') {
    return (0, _extends2["default"])({}, props, {
      checked: deepEqual(value, _value),
      value: _value
    });
  }

  if (type === 'select-multiple') {
    return (0, _extends2["default"])({}, props, {
      value: value || []
    });
  }

  if (type === 'file') {
    return (0, _extends2["default"])({}, props, {
      value: value || undefined
    });
  }

  return props;
};

function createFieldProps(_ref, name, _ref2) {
  var getIn = _ref.getIn,
      toJS = _ref.toJS,
      deepEqual = _ref.deepEqual;
  var asyncError = _ref2.asyncError,
      asyncValidating = _ref2.asyncValidating,
      onBlur = _ref2.onBlur,
      onChange = _ref2.onChange,
      onDrop = _ref2.onDrop,
      onDragStart = _ref2.onDragStart,
      dirty = _ref2.dirty,
      dispatch = _ref2.dispatch,
      onFocus = _ref2.onFocus,
      form = _ref2.form,
      format = _ref2.format,
      initial = _ref2.initial,
      parse = _ref2.parse,
      pristine = _ref2.pristine,
      props = _ref2.props,
      state = _ref2.state,
      submitError = _ref2.submitError,
      submitFailed = _ref2.submitFailed,
      submitting = _ref2.submitting,
      syncError = _ref2.syncError,
      syncWarning = _ref2.syncWarning,
      validate = _ref2.validate,
      value = _ref2.value,
      _value = _ref2._value,
      warn = _ref2.warn,
      custom = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["asyncError", "asyncValidating", "onBlur", "onChange", "onDrop", "onDragStart", "dirty", "dispatch", "onFocus", "form", "format", "initial", "parse", "pristine", "props", "state", "submitError", "submitFailed", "submitting", "syncError", "syncWarning", "validate", "value", "_value", "warn"]);
  var error = syncError || asyncError || submitError;
  var warning = syncWarning;

  var formatFieldValue = function formatFieldValue(value, format) {
    if (format === null) {
      return value;
    }

    var defaultFormattedValue = value == null ? '' : value;
    return format ? format(value, name) : defaultFormattedValue;
  };

  var formattedFieldValue = formatFieldValue(value, format);
  return {
    input: processProps(custom.type, {
      name: name,
      onBlur: onBlur,
      onChange: onChange,
      onDragStart: onDragStart,
      onDrop: onDrop,
      onFocus: onFocus,
      value: formattedFieldValue
    }, _value, deepEqual),
    meta: (0, _extends2["default"])({}, toJS(state), {
      active: !!(state && getIn(state, 'active')),
      asyncValidating: asyncValidating,
      autofilled: !!(state && getIn(state, 'autofilled')),
      dirty: dirty,
      dispatch: dispatch,
      error: error,
      form: form,
      initial: initial,
      warning: warning,
      invalid: !!error,
      pristine: pristine,
      submitting: !!submitting,
      submitFailed: !!submitFailed,
      touched: !!(state && getIn(state, 'touched')),
      valid: !error,
      visited: !!(state && getIn(state, 'visited'))
    }),
    custom: (0, _extends2["default"])({}, custom, {}, props)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUZpZWxkUHJvcHMuanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsImNyZWF0ZUZpZWxkUHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJfZXh0ZW5kczIiLCJwcm9jZXNzUHJvcHMiLCJ0eXBlIiwicHJvcHMiLCJfdmFsdWUiLCJkZWVwRXF1YWwiLCJ2YWx1ZSIsImNoZWNrZWQiLCJ1bmRlZmluZWQiLCJfcmVmIiwibmFtZSIsIl9yZWYyIiwiZ2V0SW4iLCJ0b0pTIiwiYXN5bmNFcnJvciIsImFzeW5jVmFsaWRhdGluZyIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwib25Ecm9wIiwib25EcmFnU3RhcnQiLCJkaXJ0eSIsImRpc3BhdGNoIiwib25Gb2N1cyIsImZvcm0iLCJmb3JtYXQiLCJpbml0aWFsIiwicGFyc2UiLCJwcmlzdGluZSIsInN0YXRlIiwic3VibWl0RXJyb3IiLCJzdWJtaXRGYWlsZWQiLCJzdWJtaXR0aW5nIiwic3luY0Vycm9yIiwic3luY1dhcm5pbmciLCJ2YWxpZGF0ZSIsIndhcm4iLCJjdXN0b20iLCJlcnJvciIsIndhcm5pbmciLCJmb3JtYXRGaWVsZFZhbHVlIiwiZGVmYXVsdEZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0dGVkRmllbGRWYWx1ZSIsImlucHV0IiwibWV0YSIsImFjdGl2ZSIsImF1dG9maWxsZWQiLCJpbnZhbGlkIiwidG91Y2hlZCIsInZhbGlkIiwidmlzaXRlZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBRCxDQUFwQzs7QUFFQUMsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUJFLGdCQUFyQjs7QUFFQSxJQUFJQyw4QkFBOEIsR0FBR0wsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxREFBRCxD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QUVBLFFBTHFDO0FBTS9DZ0IsTUFBQUEsS0FBSyxFQUFFQSxLQU53QztBQU8vQ2QsTUFBQUEsSUFBSSxFQUFFQSxJQVB5QztBQVEvQ0UsTUFBQUEsT0FBTyxFQUFFQSxPQVJzQztBQVMvQ2EsTUFBQUEsT0FBTyxFQUFFQSxPQVRzQztBQVUvQ1EsTUFBQUEsT0FBTyxFQUFFLENBQUMsQ0FBQ1QsS0FWb0M7QUFXL0NWLE1BQUFBLFFBQVEsRUFBRUEsUUFYcUM7QUFZL0NJLE1BQUFBLFVBQVUsRUFBRSxDQUFDLENBQUNBLFVBWmlDO0FBYS9DRCxNQUFBQSxZQUFZLEVBQUUsQ0FBQyxDQUFDQSxZQWIrQjtBQWMvQ2lCLE1BQUFBLE9BQU8sRUFBRSxDQUFDLEVBQUVuQixLQUFLLElBQUloQixLQUFLLENBQUNnQixLQUFELEVBQVEsU0FBUixDQUFoQixDQWRxQztBQWUvQ29CLE1BQUFBLEtBQUssRUFBRSxDQUFDWCxLQWZ1QztBQWdCL0NZLE1BQUFBLE9BQU8sRUFBRSxDQUFDLEVBQUVyQixLQUFLLElBQUloQixLQUFLLENBQUNnQixLQUFELEVBQVEsU0FBUixDQUFoQjtBQWhCcUMsS0FBM0MsQ0FWRDtBQTRCTFEsSUFBQUEsTUFBTSxFQUFFLENBQUMsR0FBR3BDLFNBQVMsQ0FBQyxTQUFELENBQWIsRUFBMEIsRUFBMUIsRUFBOEJvQyxNQUE5QixFQUFzQyxFQUF0QyxFQUEwQ2pDLEtBQTFDO0FBNUJILEdBQVA7QUE4QkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNyZWF0ZUZpZWxkUHJvcHM7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIHByb2Nlc3NQcm9wcyA9IGZ1bmN0aW9uIHByb2Nlc3NQcm9wcyh0eXBlLCBwcm9wcywgX3ZhbHVlLCBkZWVwRXF1YWwpIHtcbiAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwcm9wcywge1xuICAgICAgY2hlY2tlZDogISF2YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCBwcm9wcywge1xuICAgICAgY2hlY2tlZDogZGVlcEVxdWFsKHZhbHVlLCBfdmFsdWUpLFxuICAgICAgdmFsdWU6IF92YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnKSB7XG4gICAgcmV0dXJuICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSB8fCBbXVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdmaWxlJykge1xuICAgIHJldHVybiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIHByb3BzLCB7XG4gICAgICB2YWx1ZTogdmFsdWUgfHwgdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVGaWVsZFByb3BzKF9yZWYsIG5hbWUsIF9yZWYyKSB7XG4gIHZhciBnZXRJbiA9IF9yZWYuZ2V0SW4sXG4gICAgICB0b0pTID0gX3JlZi50b0pTLFxuICAgICAgZGVlcEVxdWFsID0gX3JlZi5kZWVwRXF1YWw7XG4gIHZhciBhc3luY0Vycm9yID0gX3JlZjIuYXN5bmNFcnJvcixcbiAgICAgIGFzeW5jVmFsaWRhdGluZyA9IF9yZWYyLmFzeW5jVmFsaWRhdGluZyxcbiAgICAgIG9uQmx1ciA9IF9yZWYyLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gX3JlZjIub25DaGFuZ2UsXG4gICAgICBvbkRyb3AgPSBfcmVmMi5vbkRyb3AsXG4gICAgICBvbkRyYWdTdGFydCA9IF9yZWYyLm9uRHJhZ1N0YXJ0LFxuICAgICAgZGlydHkgPSBfcmVmMi5kaXJ0eSxcbiAgICAgIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2gsXG4gICAgICBvbkZvY3VzID0gX3JlZjIub25Gb2N1cyxcbiAgICAgIGZvcm0gPSBfcmVmMi5mb3JtLFxuICAgICAgZm9ybWF0ID0gX3JlZjIuZm9ybWF0LFxuICAgICAgaW5pdGlhbCA9IF9yZWYyLmluaXRpYWwsXG4gICAgICBwYXJzZSA9IF9yZWYyLnBhcnNlLFxuICAgICAgcHJpc3RpbmUgPSBfcmVmMi5wcmlzdGluZSxcbiAgICAgIHByb3BzID0gX3JlZjIucHJvcHMsXG4gICAgICBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgc3VibWl0RXJyb3IgPSBfcmVmMi5zdWJtaXRFcnJvcixcbiAgICAgIHN1Ym1pdEZhaWxlZCA9IF9yZWYyLnN1Ym1pdEZhaWxlZCxcbiAgICAgIHN1Ym1pdHRpbmcgPSBfcmVmMi5zdWJtaXR0aW5nLFxuICAgICAgc3luY0Vycm9yID0gX3JlZjIuc3luY0Vycm9yLFxuICAgICAgc3luY1dhcm5pbmcgPSBfcmVmMi5zeW5jV2FybmluZyxcbiAgICAgIHZhbGlkYXRlID0gX3JlZjIudmFsaWRhdGUsXG4gICAgICB2YWx1ZSA9IF9yZWYyLnZhbHVlLFxuICAgICAgX3ZhbHVlID0gX3JlZjIuX3ZhbHVlLFxuICAgICAgd2FybiA9IF9yZWYyLndhcm4sXG4gICAgICBjdXN0b20gPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyW1wiZGVmYXVsdFwiXSkoX3JlZjIsIFtcImFzeW5jRXJyb3JcIiwgXCJhc3luY1ZhbGlkYXRpbmdcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRHJvcFwiLCBcIm9uRHJhZ1N0YXJ0XCIsIFwiZGlydHlcIiwgXCJkaXNwYXRjaFwiLCBcIm9uRm9jdXNcIiwgXCJmb3JtXCIsIFwiZm9ybWF0XCIsIFwiaW5pdGlhbFwiLCBcInBhcnNlXCIsIFwicHJpc3RpbmVcIiwgXCJwcm9wc1wiLCBcInN0YXRlXCIsIFwic3VibWl0RXJyb3JcIiwgXCJzdWJtaXRGYWlsZWRcIiwgXCJzdWJtaXR0aW5nXCIsIFwic3luY0Vycm9yXCIsIFwic3luY1dhcm5pbmdcIiwgXCJ2YWxpZGF0ZVwiLCBcInZhbHVlXCIsIFwiX3ZhbHVlXCIsIFwid2FyblwiXSk7XG4gIHZhciBlcnJvciA9IHN5bmNFcnJvciB8fCBhc3luY0Vycm9yIHx8IHN1Ym1pdEVycm9yO1xuICB2YXIgd2FybmluZyA9IHN5bmNXYXJuaW5nO1xuXG4gIHZhciBmb3JtYXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gZm9ybWF0RmllbGRWYWx1ZSh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Rm9ybWF0dGVkVmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICByZXR1cm4gZm9ybWF0ID8gZm9ybWF0KHZhbHVlLCBuYW1lKSA6IGRlZmF1bHRGb3JtYXR0ZWRWYWx1ZTtcbiAgfTtcblxuICB2YXIgZm9ybWF0dGVkRmllbGRWYWx1ZSA9IGZvcm1hdEZpZWxkVmFsdWUodmFsdWUsIGZvcm1hdCk7XG4gIHJldHVybiB7XG4gICAgaW5wdXQ6IHByb2Nlc3NQcm9wcyhjdXN0b20udHlwZSwge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIG9uQmx1cjogb25CbHVyLFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgb25EcmFnU3RhcnQ6IG9uRHJhZ1N0YXJ0LFxuICAgICAgb25Ecm9wOiBvbkRyb3AsXG4gICAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgICAgdmFsdWU6IGZvcm1hdHRlZEZpZWxkVmFsdWVcbiAgICB9LCBfdmFsdWUsIGRlZXBFcXVhbCksXG4gICAgbWV0YTogKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCB0b0pTKHN0YXRlKSwge1xuICAgICAgYWN0aXZlOiAhIShzdGF0ZSAmJiBnZXRJbihzdGF0ZSwgJ2FjdGl2ZScpKSxcbiAgICAgIGFzeW5jVmFsaWRhdGluZzogYXN5bmNWYWxpZGF0aW5nLFxuICAgICAgYXV0b2ZpbGxlZDogISEoc3RhdGUgJiYgZ2V0SW4oc3RhdGUsICdhdXRvZmlsbGVkJykpLFxuICAgICAgZGlydHk6IGRpcnR5LFxuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgZm9ybTogZm9ybSxcbiAgICAgIGluaXRpYWw6IGluaXRpYWwsXG4gICAgICB3YXJuaW5nOiB3YXJuaW5nLFxuICAgICAgaW52YWxpZDogISFlcnJvcixcbiAgICAgIHByaXN0aW5lOiBwcmlzdGluZSxcbiAgICAgIHN1Ym1pdHRpbmc6ICEhc3VibWl0dGluZyxcbiAgICAgIHN1Ym1pdEZhaWxlZDogISFzdWJtaXRGYWlsZWQsXG4gICAgICB0b3VjaGVkOiAhIShzdGF0ZSAmJiBnZXRJbihzdGF0ZSwgJ3RvdWNoZWQnKSksXG4gICAgICB2YWxpZDogIWVycm9yLFxuICAgICAgdmlzaXRlZDogISEoc3RhdGUgJiYgZ2V0SW4oc3RhdGUsICd2aXNpdGVkJykpXG4gICAgfSksXG4gICAgY3VzdG9tOiAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sIGN1c3RvbSwge30sIHByb3BzKVxuICB9O1xufSJdfQ==