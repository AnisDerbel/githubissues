4302b963677e52180ec3e0bed4644512
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault(ex) {return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;}


var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/objectWithoutPropertiesLoose'));



var deferred = _interopDefault(require('@redux-saga/deferred'));
require('@redux-saga/delay-p');

var queue = [];








var semaphore = 0;






function exec(task) {
  try {
    suspend();
    task();
  } finally {
    release();
  }
}





function asap(task) {
  queue.push(task);

  if (!semaphore) {
    suspend();
    flush();
  }
}




function immediately(task) {
  try {
    suspend();
    return task();
  } finally {
    flush();
  }
}





function suspend() {
  semaphore++;
}





function release() {
  semaphore--;
}





function flush() {
  release();
  var task;

  while (!semaphore && (task = queue.shift()) !== undefined) {
    exec(task);
  }
}

var array = function array(patterns) {
  return function (input) {
    return patterns.some(function (p) {
      return matcher(p)(input);
    });
  };
};
var predicate = function predicate(_predicate) {
  return function (input) {
    return _predicate(input);
  };
};
var string = function string(pattern) {
  return function (input) {
    return input.type === String(pattern);
  };
};
var symbol = function symbol(pattern) {
  return function (input) {
    return input.type === pattern;
  };
};
var wildcard = function wildcard() {
  return require('./io-1d6eccda.js').kTrue;
};
function matcher(pattern) {

  var matcherCreator = pattern === '*' ? wildcard : require('@redux-saga/is').string(pattern) ? string : require('@redux-saga/is').array(pattern) ? array : require('@redux-saga/is').stringableFunc(pattern) ? string : require('@redux-saga/is').func(pattern) ? predicate : require('@redux-saga/is').symbol(pattern) ? symbol : null;

  if (matcherCreator === null) {
    throw new Error("invalid pattern: " + pattern);
  }

  return matcherCreator(pattern);
}

var END = {
  type: require('@redux-saga/symbols').CHANNEL_END_TYPE };

var isEnd = function isEnd(a) {
  return a && a.type === require('@redux-saga/symbols').CHANNEL_END_TYPE;
};
var CLOSED_CHANNEL_WITH_TAKERS = 'Cannot have a closed channel with pending takers';
var INVALID_BUFFER = 'invalid buffer passed to channel factory function';
var UNDEFINED_INPUT_ERROR = "Saga or channel was provided with an undefined action\nHints:\n  - check that your Action Creator returns a non-undefined value\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners";
function channel(buffer) {
  if (buffer === void 0) {
    buffer = require('./io-1d6eccda.js').expanding();
  }

  var closed = false;
  var takers = [];

  {
    require('./io-1d6eccda.js').check(buffer, require('@redux-saga/is').buffer, INVALID_BUFFER);
  }

  function checkForbiddenStates() {
    if (closed && takers.length) {
      throw require('./io-1d6eccda.js').internalErr(CLOSED_CHANNEL_WITH_TAKERS);
    }

    if (takers.length && !buffer.isEmpty()) {
      throw require('./io-1d6eccda.js').internalErr('Cannot have pending takers with non empty buffer');
    }
  }

  function put(input) {
    {
      checkForbiddenStates();
      require('./io-1d6eccda.js').check(input, require('@redux-saga/is').notUndef, UNDEFINED_INPUT_ERROR);
    }

    if (closed) {
      return;
    }

    if (takers.length === 0) {
      return buffer.put(input);
    }

    var cb = takers.shift();
    cb(input);
  }

  function take(cb) {
    {
      checkForbiddenStates();
      require('./io-1d6eccda.js').check(cb, require('@redux-saga/is').func, "channel.take's callback must be a function");
    }

    if (closed && buffer.isEmpty()) {
      cb(END);
    } else if (!buffer.isEmpty()) {
      cb(buffer.take());
    } else {
      takers.push(cb);

      cb.cancel = function () {
        require('./io-1d6eccda.js').remove(takers, cb);
      };
    }
  }

  function flush(cb) {
    {
      checkForbiddenStates();
      require('./io-1d6eccda.js').check(cb, require('@redux-saga/is').func, "channel.flush' callback must be a function");
    }

    if (closed && buffer.isEmpty()) {
      cb(END);
      return;
    }

    cb(buffer.flush());
  }

  function close() {
    {
      checkForbiddenStates();
    }

    if (closed) {
      return;
    }

    closed = true;
    var arr = takers;
    takers = [];

    for (var i = 0, len = arr.length; i < len; i++) {
      var taker = arr[i];
      taker(END);
    }
  }

  return {
    take: take,
    put: put,
    flush: flush,
    close: close };

}
function eventChannel(subscribe, buffer) {
  if (buffer === void 0) {
    buffer = require('./io-1d6eccda.js').none();
  }

  var closed = false;
  var unsubscribe;
  var chan = channel(buffer);

  var close = function close() {
    if (closed) {
      return;
    }

    closed = true;

    if (require('@redux-saga/is').func(unsubscribe)) {
      unsubscribe();
    }

    chan.close();
  };

  unsubscribe = subscribe(function (input) {
    if (isEnd(input)) {
      close();
      return;
    }

    chan.put(input);
  });

  {
    require('./io-1d6eccda.js').check(unsubscribe, require('@redux-saga/is').func, 'in eventChannel: subscribe should return a function to unsubscribe');
  }

  unsubscribe = require('./io-1d6eccda.js').once(unsubscribe);

  if (closed) {
    unsubscribe();
  }

  return {
    take: chan.take,
    flush: chan.flush,
    close: close };

}
function multicastChannel() {
  var _ref;

  var closed = false;
  var currentTakers = [];
  var nextTakers = currentTakers;

  function checkForbiddenStates() {
    if (closed && nextTakers.length) {
      throw require('./io-1d6eccda.js').internalErr(CLOSED_CHANNEL_WITH_TAKERS);
    }
  }

  var ensureCanMutateNextTakers = function ensureCanMutateNextTakers() {
    if (nextTakers !== currentTakers) {
      return;
    }

    nextTakers = currentTakers.slice();
  };

  var close = function close() {
    {
      checkForbiddenStates();
    }

    closed = true;
    var takers = currentTakers = nextTakers;
    nextTakers = [];
    takers.forEach(function (taker) {
      taker(END);
    });
  };

  return _ref = {}, _ref[require('@redux-saga/symbols').MULTICAST] = true, _ref.put = function put(input) {
    {
      checkForbiddenStates();
      require('./io-1d6eccda.js').check(input, require('@redux-saga/is').notUndef, UNDEFINED_INPUT_ERROR);
    }

    if (closed) {
      return;
    }

    if (isEnd(input)) {
      close();
      return;
    }

    var takers = currentTakers = nextTakers;

    for (var i = 0, len = takers.length; i < len; i++) {
      var taker = takers[i];

      if (taker[require('@redux-saga/symbols').MATCH](input)) {
        taker.cancel();
        taker(input);
      }
    }
  }, _ref.take = function take(cb, matcher) {
    if (matcher === void 0) {
      matcher = wildcard;
    }

    {
      checkForbiddenStates();
    }

    if (closed) {
      cb(END);
      return;
    }

    cb[require('@redux-saga/symbols').MATCH] = matcher;
    ensureCanMutateNextTakers();
    nextTakers.push(cb);
    cb.cancel = require('./io-1d6eccda.js').once(function () {
      ensureCanMutateNextTakers();
      require('./io-1d6eccda.js').remove(nextTakers, cb);
    });
  }, _ref.close = close, _ref;
}
function stdChannel() {
  var chan = multicastChannel();
  var put = chan.put;

  chan.put = function (input) {
    if (input[require('@redux-saga/symbols').SAGA_ACTION]) {
      put(input);
      return;
    }

    asap(function () {
      put(input);
    });
  };

  return chan;
}

var RUNNING = 0;
var CANCELLED = 1;
var ABORTED = 2;
var DONE = 3;

function resolvePromise(promise, cb) {
  var cancelPromise = promise[require('@redux-saga/symbols').CANCEL];

  if (require('@redux-saga/is').func(cancelPromise)) {
    cb.cancel = cancelPromise;
  }

  promise.then(cb, function (error) {
    cb(error, true);
  });
}

var current = 0;
var nextSagaId = function nextSagaId() {
  return ++current;
};

var _effectRunnerMap;

function getIteratorMetaInfo(iterator, fn) {
  if (iterator.isSagaIterator) {
    return {
      name: iterator.meta.name };

  }

  return require('./io-1d6eccda.js').getMetaInfo(fn);
}

function createTaskIterator(_ref) {
  var context = _ref.context,
  fn = _ref.fn,
  args = _ref.args;


  try {
    var result = fn.apply(context, args);

    if (require('@redux-saga/is').iterator(result)) {
      return result;
    }

    var resolved = false;

    var next = function next(arg) {
      if (!resolved) {
        resolved = true;

        return {
          value: result,
          done: !require('@redux-saga/is').promise(result) };

      } else {
        return {
          value: arg,
          done: true };

      }
    };

    return require('./io-1d6eccda.js').makeIterator(next);
  } catch (err) {


    return require('./io-1d6eccda.js').makeIterator(function () {
      throw err;
    });
  }
}

function runPutEffect(env, _ref2, cb) {
  var channel = _ref2.channel,
  action = _ref2.action,
  resolve = _ref2.resolve;






  asap(function () {
    var result;

    try {
      result = (channel ? channel.put : env.dispatch)(action);
    } catch (error) {
      cb(error, true);
      return;
    }

    if (resolve && require('@redux-saga/is').promise(result)) {
      resolvePromise(result, cb);
    } else {
      cb(result);
    }
  });
}

function runTakeEffect(env, _ref3, cb) {
  var _ref3$channel = _ref3.channel,
  channel = _ref3$channel === void 0 ? env.channel : _ref3$channel,
  pattern = _ref3.pattern,
  maybe = _ref3.maybe;

  var takeCb = function takeCb(input) {
    if (input instanceof Error) {
      cb(input, true);
      return;
    }

    if (isEnd(input) && !maybe) {
      cb(require('@redux-saga/symbols').TERMINATE);
      return;
    }

    cb(input);
  };

  try {
    channel.take(takeCb, require('@redux-saga/is').notUndef(pattern) ? matcher(pattern) : null);
  } catch (err) {
    cb(err, true);
    return;
  }

  cb.cancel = takeCb.cancel;
}

function runCallEffect(env, _ref4, cb, _ref5) {
  var context = _ref4.context,
  fn = _ref4.fn,
  args = _ref4.args;
  var task = _ref5.task;


  try {
    var result = fn.apply(context, args);

    if (require('@redux-saga/is').promise(result)) {
      resolvePromise(result, cb);
      return;
    }

    if (require('@redux-saga/is').iterator(result)) {

      proc(env, result, task.context, current, require('./io-1d6eccda.js').getMetaInfo(fn),

      false, cb);
      return;
    }

    cb(result);
  } catch (error) {
    cb(error, true);
  }
}

function runCPSEffect(env, _ref6, cb) {
  var context = _ref6.context,
  fn = _ref6.fn,
  args = _ref6.args;




  try {
    var cpsCb = function cpsCb(err, res) {
      if (require('@redux-saga/is').undef(err)) {
        cb(res);
      } else {
        cb(err, true);
      }
    };

    fn.apply(context, args.concat(cpsCb));

    if (cpsCb.cancel) {
      cb.cancel = cpsCb.cancel;
    }
  } catch (error) {
    cb(error, true);
  }
}

function runForkEffect(env, _ref7, cb, _ref8) {
  var context = _ref7.context,
  fn = _ref7.fn,
  args = _ref7.args,
  detached = _ref7.detached;
  var parent = _ref8.task;
  var taskIterator = createTaskIterator({
    context: context,
    fn: fn,
    args: args });

  var meta = getIteratorMetaInfo(taskIterator, fn);
  immediately(function () {
    var child = proc(env, taskIterator, parent.context, current, meta, detached, undefined);

    if (detached) {
      cb(child);
    } else {
      if (child.isRunning()) {
        parent.queue.addTask(child);
        cb(child);
      } else if (child.isAborted()) {
        parent.queue.abort(child.error());
      } else {
        cb(child);
      }
    }
  });
}

function runJoinEffect(env, taskOrTasks, cb, _ref9) {
  var task = _ref9.task;

  var joinSingleTask = function joinSingleTask(taskToJoin, cb) {
    if (taskToJoin.isRunning()) {
      var joiner = {
        task: task,
        cb: cb };


      cb.cancel = function () {
        if (taskToJoin.isRunning()) require('./io-1d6eccda.js').remove(taskToJoin.joiners, joiner);
      };

      taskToJoin.joiners.push(joiner);
    } else {
      if (taskToJoin.isAborted()) {
        cb(taskToJoin.error(), true);
      } else {
        cb(taskToJoin.result());
      }
    }
  };

  if (require('@redux-saga/is').array(taskOrTasks)) {
    if (taskOrTasks.length === 0) {
      cb([]);
      return;
    }

    var childCallbacks = require('./io-1d6eccda.js').createAllStyleChildCallbacks(taskOrTasks, cb);
    taskOrTasks.forEach(function (t, i) {
      joinSingleTask(t, childCallbacks[i]);
    });
  } else {
    joinSingleTask(taskOrTasks, cb);
  }
}

function cancelSingleTask(taskToCancel) {
  if (taskToCancel.isRunning()) {
    taskToCancel.cancel();
  }
}

function runCancelEffect(env, taskOrTasks, cb, _ref10) {
  var task = _ref10.task;

  if (taskOrTasks === require('@redux-saga/symbols').SELF_CANCELLATION) {
    cancelSingleTask(task);
  } else if (require('@redux-saga/is').array(taskOrTasks)) {
    taskOrTasks.forEach(cancelSingleTask);
  } else {
    cancelSingleTask(taskOrTasks);
  }

  cb();
}

function runAllEffect(env, effects, cb, _ref11) {
  var digestEffect = _ref11.digestEffect;
  var effectId = current;
  var keys = Object.keys(effects);

  if (keys.length === 0) {
    cb(require('@redux-saga/is').array(effects) ? [] : {});
    return;
  }

  var childCallbacks = require('./io-1d6eccda.js').createAllStyleChildCallbacks(effects, cb);
  keys.forEach(function (key) {
    digestEffect(effects[key], effectId, childCallbacks[key], key);
  });
}

function runRaceEffect(env, effects, cb, _ref12) {
  var digestEffect = _ref12.digestEffect;
  var effectId = current;
  var keys = Object.keys(effects);
  var response = require('@redux-saga/is').array(effects) ? require('./io-1d6eccda.js').createEmptyArray(keys.length) : {};
  var childCbs = {};
  var completed = false;
  keys.forEach(function (key) {
    var chCbAtKey = function chCbAtKey(res, isErr) {
      if (completed) {
        return;
      }

      if (isErr || require('./io-1d6eccda.js').shouldComplete(res)) {

        cb.cancel();
        cb(res, isErr);
      } else {
        cb.cancel();
        completed = true;
        response[key] = res;
        cb(response);
      }
    };

    chCbAtKey.cancel = require('./io-1d6eccda.js').noop;
    childCbs[key] = chCbAtKey;
  });

  cb.cancel = function () {

    if (!completed) {
      completed = true;
      keys.forEach(function (key) {
        return childCbs[key].cancel();
      });
    }
  };

  keys.forEach(function (key) {
    if (completed) {
      return;
    }

    digestEffect(effects[key], effectId, childCbs[key], key);
  });
}

function runSelectEffect(env, _ref13, cb) {
  var selector = _ref13.selector,
  args = _ref13.args;

  try {
    var state = selector.apply(void 0, [env.getState()].concat(args));
    cb(state);
  } catch (error) {
    cb(error, true);
  }
}

function runChannelEffect(env, _ref14, cb) {
  var pattern = _ref14.pattern,
  buffer = _ref14.buffer;
  var chan = channel(buffer);
  var match = matcher(pattern);

  var taker = function taker(action) {
    if (!isEnd(action)) {
      env.channel.take(taker, match);
    }

    chan.put(action);
  };

  var close = chan.close;

  chan.close = function () {
    taker.cancel();
    close();
  };

  env.channel.take(taker, match);
  cb(chan);
}

function runCancelledEffect(env, data, cb, _ref15) {
  var task = _ref15.task;
  cb(task.isCancelled());
}

function runFlushEffect(env, channel, cb) {
  channel.flush(cb);
}

function runGetContextEffect(env, prop, cb, _ref16) {
  var task = _ref16.task;
  cb(task.context[prop]);
}

function runSetContextEffect(env, props, cb, _ref17) {
  var task = _ref17.task;
  require('./io-1d6eccda.js').assignWithSymbols(task.context, props);
  cb();
}

var effectRunnerMap = (_effectRunnerMap = {}, _effectRunnerMap[require('./io-1d6eccda.js').TAKE] = runTakeEffect, _effectRunnerMap[require('./io-1d6eccda.js').PUT] = runPutEffect, _effectRunnerMap[require('./io-1d6eccda.js').ALL] = runAllEffect, _effectRunnerMap[require('./io-1d6eccda.js').RACE] = runRaceEffect, _effectRunnerMap[require('./io-1d6eccda.js').CALL] = runCallEffect, _effectRunnerMap[require('./io-1d6eccda.js').CPS] = runCPSEffect, _effectRunnerMap[require('./io-1d6eccda.js').FORK] = runForkEffect, _effectRunnerMap[require('./io-1d6eccda.js').JOIN] = runJoinEffect, _effectRunnerMap[require('./io-1d6eccda.js').CANCEL] = runCancelEffect, _effectRunnerMap[require('./io-1d6eccda.js').SELECT] = runSelectEffect, _effectRunnerMap[require('./io-1d6eccda.js').ACTION_CHANNEL] = runChannelEffect, _effectRunnerMap[require('./io-1d6eccda.js').CANCELLED] = runCancelledEffect, _effectRunnerMap[require('./io-1d6eccda.js').FLUSH] = runFlushEffect, _effectRunnerMap[require('./io-1d6eccda.js').GET_CONTEXT] = runGetContextEffect, _effectRunnerMap[require('./io-1d6eccda.js').SET_CONTEXT] = runSetContextEffect, _effectRunnerMap);

















function forkQueue(mainTask, onAbort, cont) {
  var tasks = [];
  var result;
  var completed = false;
  addTask(mainTask);

  var getTasks = function getTasks() {
    return tasks;
  };

  function abort(err) {
    onAbort();
    cancelAll();
    cont(err, true);
  }

  function addTask(task) {
    tasks.push(task);

    task.cont = function (res, isErr) {
      if (completed) {
        return;
      }

      require('./io-1d6eccda.js').remove(tasks, task);
      task.cont = require('./io-1d6eccda.js').noop;

      if (isErr) {
        abort(res);
      } else {
        if (task === mainTask) {
          result = res;
        }

        if (!tasks.length) {
          completed = true;
          cont(result);
        }
      }
    };
  }

  function cancelAll() {
    if (completed) {
      return;
    }

    completed = true;
    tasks.forEach(function (t) {
      t.cont = require('./io-1d6eccda.js').noop;
      t.cancel();
    });
    tasks = [];
  }

  return {
    addTask: addTask,
    cancelAll: cancelAll,
    abort: abort,
    getTasks: getTasks };

}



function formatLocation(fileName, lineNumber) {
  return fileName + "?" + lineNumber;
}

function effectLocationAsString(effect) {
  var location = require('./io-1d6eccda.js').getLocation(effect);

  if (location) {
    var code = location.code,
    fileName = location.fileName,
    lineNumber = location.lineNumber;
    var source = code + "  " + formatLocation(fileName, lineNumber);
    return source;
  }

  return '';
}

function sagaLocationAsString(sagaMeta) {
  var name = sagaMeta.name,
  location = sagaMeta.location;

  if (location) {
    return name + "  " + formatLocation(location.fileName, location.lineNumber);
  }

  return name;
}

function cancelledTasksAsString(sagaStack) {
  var cancelledTasks = require('./io-1d6eccda.js').flatMap(function (i) {
    return i.cancelledTasks;
  }, sagaStack);

  if (!cancelledTasks.length) {
    return '';
  }

  return ['Tasks cancelled due to error:'].concat(cancelledTasks).join('\n');
}

var crashedEffect = null;
var sagaStack = [];
var addSagaFrame = function addSagaFrame(frame) {
  frame.crashedEffect = crashedEffect;
  sagaStack.push(frame);
};
var clear = function clear() {
  crashedEffect = null;
  sagaStack.length = 0;
};



var setCrashedEffect = function setCrashedEffect(effect) {
  crashedEffect = effect;
};










var toString = function toString() {
  var firstSaga = sagaStack[0],
  otherSagas = sagaStack.slice(1);
  var crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null;
  var errorMessage = "The above error occurred in task " + sagaLocationAsString(firstSaga.meta) + (crashedEffectLocation ? " \n when executing effect " + crashedEffectLocation : '');
  return [errorMessage].concat(otherSagas.map(function (s) {
    return "    created by " + sagaLocationAsString(s.meta);
  }), [cancelledTasksAsString(sagaStack)]).join('\n');
};

function newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont) {
  var _task;

  if (cont === void 0) {
    cont = require('./io-1d6eccda.js').noop;
  }

  var status = RUNNING;
  var taskResult;
  var taskError;
  var deferredEnd = null;
  var cancelledDueToErrorTasks = [];
  var context = Object.create(parentContext);
  var queue = forkQueue(mainTask, function onAbort() {
    cancelledDueToErrorTasks.push.apply(cancelledDueToErrorTasks, queue.getTasks().map(function (t) {
      return t.meta.name;
    }));
  }, end);








  function cancel() {
    if (status === RUNNING) {


      status = CANCELLED;
      queue.cancelAll();

      end(require('@redux-saga/symbols').TASK_CANCEL, false);
    }
  }

  function end(result, isErr) {
    if (!isErr) {


      if (result === require('@redux-saga/symbols').TASK_CANCEL) {
        status = CANCELLED;
      } else if (status !== CANCELLED) {
        status = DONE;
      }

      taskResult = result;
      deferredEnd && deferredEnd.resolve(result);
    } else {
      status = ABORTED;
      addSagaFrame({
        meta: meta,
        cancelledTasks: cancelledDueToErrorTasks });


      if (task.isRoot) {
        var sagaStack = toString();


        clear();
        env.onError(result, {
          sagaStack: sagaStack });

      }

      taskError = result;
      deferredEnd && deferredEnd.reject(result);
    }

    task.cont(result, isErr);
    task.joiners.forEach(function (joiner) {
      joiner.cb(result, isErr);
    });
    task.joiners = null;
  }

  function setContext(props) {
    {
      require('./io-1d6eccda.js').check(props, require('@redux-saga/is').object, require('./io-1d6eccda.js').createSetContextWarning('task', props));
    }

    require('./io-1d6eccda.js').assignWithSymbols(context, props);
  }

  function toPromise() {
    if (deferredEnd) {
      return deferredEnd.promise;
    }

    deferredEnd = deferred();

    if (status === ABORTED) {
      deferredEnd.reject(taskError);
    } else if (status !== RUNNING) {
      deferredEnd.resolve(taskResult);
    }

    return deferredEnd.promise;
  }

  var task = (_task = {}, _task[require('@redux-saga/symbols').TASK] = true, _task.id = parentEffectId, _task.meta = meta, _task.isRoot = isRoot, _task.context = context, _task.joiners = [], _task.queue = queue, _task.cancel = cancel, _task.cont = cont, _task.end = end, _task.setContext = setContext, _task.toPromise = toPromise, _task.isRunning = function isRunning() {
    return status === RUNNING;
  }, _task.isCancelled = function isCancelled() {
    return status === CANCELLED || status === RUNNING && mainTask.status === CANCELLED;
  }, _task.isAborted = function isAborted() {
    return status === ABORTED;
  }, _task.result = function result() {
    return taskResult;
  }, _task.error = function error() {
    return taskError;
  }, _task);
  return task;
}

function proc(env, iterator, parentContext, parentEffectId, meta, isRoot, cont) {
  if (iterator[require('./io-1d6eccda.js').asyncIteratorSymbol]) {
    throw new Error("redux-saga doesn't support async generators, please use only regular ones");
  }

  var finalRunEffect = env.finalizeRunEffect(runEffect);






  next.cancel = require('./io-1d6eccda.js').noop;


  var mainTask = {
    meta: meta,
    cancel: cancelMain,
    status: RUNNING };






  var task = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont);
  var executingContext = {
    task: task,
    digestEffect: digestEffect };





  function cancelMain() {
    if (mainTask.status === RUNNING) {
      mainTask.status = CANCELLED;
      next(require('@redux-saga/symbols').TASK_CANCEL);
    }
  }






  if (cont) {
    cont.cancel = task.cancel;
  }


  next();

  return task;










  function next(arg, isErr) {
    try {
      var result;

      if (isErr) {
        result = iterator.throw(arg);

        clear();
      } else if (require('./io-1d6eccda.js').shouldCancel(arg)) {






        mainTask.status = CANCELLED;




        next.cancel();





        result = require('@redux-saga/is').func(iterator.return) ? iterator.return(require('@redux-saga/symbols').TASK_CANCEL) : {
          done: true,
          value: require('@redux-saga/symbols').TASK_CANCEL };

      } else if (require('./io-1d6eccda.js').shouldTerminate(arg)) {

        result = require('@redux-saga/is').func(iterator.return) ? iterator.return() : {
          done: true };

      } else {
        result = iterator.next(arg);
      }

      if (!result.done) {
        digestEffect(result.value, parentEffectId, next);
      } else {



        if (mainTask.status !== CANCELLED) {
          mainTask.status = DONE;
        }

        mainTask.cont(result.value);
      }
    } catch (error) {
      if (mainTask.status === CANCELLED) {
        throw error;
      }

      mainTask.status = ABORTED;
      mainTask.cont(error, true);
    }
  }

  function runEffect(effect, effectId, currCb) {












    if (require('@redux-saga/is').promise(effect)) {
      resolvePromise(effect, currCb);
    } else if (require('@redux-saga/is').iterator(effect)) {

      proc(env, effect, task.context, effectId, meta,

      false, currCb);
    } else if (effect && effect[require('@redux-saga/symbols').IO]) {
      var effectRunner = effectRunnerMap[effect.type];
      effectRunner(env, effect.payload, currCb, executingContext);
    } else {

      currCb(effect);
    }
  }

  function digestEffect(effect, parentEffectId, cb, label) {
    if (label === void 0) {
      label = '';
    }

    var effectId = nextSagaId();
    env.sagaMonitor && env.sagaMonitor.effectTriggered({
      effectId: effectId,
      parentEffectId: parentEffectId,
      label: label,
      effect: effect });







    var effectSettled;

    function currCb(res, isErr) {
      if (effectSettled) {
        return;
      }

      effectSettled = true;
      cb.cancel = require('./io-1d6eccda.js').noop;

      if (env.sagaMonitor) {
        if (isErr) {
          env.sagaMonitor.effectRejected(effectId, res);
        } else {
          env.sagaMonitor.effectResolved(effectId, res);
        }
      }

      if (isErr) {
        setCrashedEffect(effect);
      }

      cb(res, isErr);
    }


    currCb.cancel = require('./io-1d6eccda.js').noop;

    cb.cancel = function () {

      if (effectSettled) {
        return;
      }

      effectSettled = true;
      currCb.cancel();

      currCb.cancel = require('./io-1d6eccda.js').noop;

      env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId);
    };

    finalRunEffect(effect, effectId, currCb);
  }
}

var RUN_SAGA_SIGNATURE = 'runSaga(options, saga, ...args)';
var NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ": saga argument must be a Generator function!";
function runSaga(_ref, saga) {
  var _ref$channel = _ref.channel,
  channel = _ref$channel === void 0 ? stdChannel() : _ref$channel,
  dispatch = _ref.dispatch,
  getState = _ref.getState,
  _ref$context = _ref.context,
  context = _ref$context === void 0 ? {} : _ref$context,
  sagaMonitor = _ref.sagaMonitor,
  effectMiddlewares = _ref.effectMiddlewares,
  _ref$onError = _ref.onError,
  onError = _ref$onError === void 0 ? require('./io-1d6eccda.js').logError : _ref$onError;

  {
    require('./io-1d6eccda.js').check(saga, require('@redux-saga/is').func, NON_GENERATOR_ERR);
  }

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var iterator = saga.apply(void 0, args);

  {
    require('./io-1d6eccda.js').check(iterator, require('@redux-saga/is').iterator, NON_GENERATOR_ERR);
  }

  var effectId = nextSagaId();

  if (sagaMonitor) {

    sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || require('./io-1d6eccda.js').noop;
    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || require('./io-1d6eccda.js').noop;
    sagaMonitor.effectResolved = sagaMonitor.effectResolved || require('./io-1d6eccda.js').noop;
    sagaMonitor.effectRejected = sagaMonitor.effectRejected || require('./io-1d6eccda.js').noop;
    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || require('./io-1d6eccda.js').noop;
    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || require('./io-1d6eccda.js').noop;
    sagaMonitor.rootSagaStarted({
      effectId: effectId,
      saga: saga,
      args: args });

  }

  {
    if (require('@redux-saga/is').notUndef(dispatch)) {
      require('./io-1d6eccda.js').check(dispatch, require('@redux-saga/is').func, 'dispatch must be a function');
    }

    if (require('@redux-saga/is').notUndef(getState)) {
      require('./io-1d6eccda.js').check(getState, require('@redux-saga/is').func, 'getState must be a function');
    }

    if (require('@redux-saga/is').notUndef(effectMiddlewares)) {
      var MIDDLEWARE_TYPE_ERROR = 'effectMiddlewares must be an array of functions';
      require('./io-1d6eccda.js').check(effectMiddlewares, require('@redux-saga/is').array, MIDDLEWARE_TYPE_ERROR);
      effectMiddlewares.forEach(function (effectMiddleware) {
        return require('./io-1d6eccda.js').check(effectMiddleware, require('@redux-saga/is').func, MIDDLEWARE_TYPE_ERROR);
      });
    }

    require('./io-1d6eccda.js').check(onError, require('@redux-saga/is').func, 'onError passed to the redux-saga is not a function!');
  }

  var finalizeRunEffect;

  if (effectMiddlewares) {
    var middleware = require('redux').compose.apply(void 0, effectMiddlewares);

    finalizeRunEffect = function finalizeRunEffect(runEffect) {
      return function (effect, effectId, currCb) {
        var plainRunEffect = function plainRunEffect(eff) {
          return runEffect(eff, effectId, currCb);
        };

        return middleware(plainRunEffect)(effect);
      };
    };
  } else {
    finalizeRunEffect = require('./io-1d6eccda.js').identity;
  }

  var env = {
    channel: channel,
    dispatch: require('./io-1d6eccda.js').wrapSagaDispatch(dispatch),
    getState: getState,
    sagaMonitor: sagaMonitor,
    onError: onError,
    finalizeRunEffect: finalizeRunEffect };

  return immediately(function () {
    var task = proc(env, iterator, context, effectId, require('./io-1d6eccda.js').getMetaInfo(saga),

    true, undefined);

    if (sagaMonitor) {
      sagaMonitor.effectResolved(effectId, task);
    }

    return task;
  });
}

function sagaMiddlewareFactory(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
  _ref$context = _ref.context,
  context = _ref$context === void 0 ? {} : _ref$context,
  _ref$channel = _ref.channel,
  channel = _ref$channel === void 0 ? stdChannel() : _ref$channel,
  sagaMonitor = _ref.sagaMonitor,
  options = _objectWithoutPropertiesLoose(_ref, ["context", "channel", "sagaMonitor"]);

  var boundRunSaga;

  {
    require('./io-1d6eccda.js').check(channel, require('@redux-saga/is').channel, 'options.channel passed to the Saga middleware is not a channel');
  }

  function sagaMiddleware(_ref2) {
    var getState = _ref2.getState,
    dispatch = _ref2.dispatch;
    boundRunSaga = runSaga.bind(null, _extends({}, options, {
      context: context,
      channel: channel,
      dispatch: dispatch,
      getState: getState,
      sagaMonitor: sagaMonitor }));

    return function (next) {
      return function (action) {
        if (sagaMonitor && sagaMonitor.actionDispatched) {
          sagaMonitor.actionDispatched(action);
        }

        var result = next(action);

        channel.put(action);
        return result;
      };
    };
  }

  sagaMiddleware.run = function () {
    if (!boundRunSaga) {
      throw new Error('Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware');
    }

    return boundRunSaga.apply(void 0, arguments);
  };

  sagaMiddleware.setContext = function (props) {
    {
      require('./io-1d6eccda.js').check(props, require('@redux-saga/is').object, require('./io-1d6eccda.js').createSetContextWarning('sagaMiddleware', props));
    }

    require('./io-1d6eccda.js').assignWithSymbols(context, props);
  };

  return sagaMiddleware;
}

Object.defineProperty(exports, 'CANCEL', {
  enumerable: true,
  get: function get() {
    return require('@redux-saga/symbols').CANCEL;
  } });

Object.defineProperty(exports, 'SAGA_LOCATION', {
  enumerable: true,
  get: function get() {
    return require('@redux-saga/symbols').SAGA_LOCATION;
  } });

exports.buffers = require('./io-1d6eccda.js').buffers;
exports.detach = require('./io-1d6eccda.js').detach;
exports.END = END;
exports.channel = channel;
exports.default = sagaMiddlewareFactory;
exports.eventChannel = eventChannel;
exports.isEnd = isEnd;
exports.multicastChannel = multicastChannel;
exports.runSaga = runSaga;
exports.stdChannel = stdChannel;