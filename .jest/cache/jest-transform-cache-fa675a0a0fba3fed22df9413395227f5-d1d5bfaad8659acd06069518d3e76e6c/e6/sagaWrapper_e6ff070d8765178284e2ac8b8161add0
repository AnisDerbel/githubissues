107bf4bfd8b25649640819361434b303
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSagaWrapper = isSagaWrapper;
exports.default = createSagaWrapper;

var _fsmIterator = _interopRequireDefault(require("fsm-iterator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var INIT = 'INIT';
var REFINE = 'REFINE';
var NEXT = 'NEXT';
var LOOP = 'LOOP';
var FALSY = '@@redux-saga-test-plan/falsy';
var SAGA_WRAPPER = '@@redux-saga-test-plan/saga-wrapper';

function wrapFalsy(value) {
  if (!value && value != null) {
    var _ref;

    return _ref = {}, (0, _defineProperty2.default)(_ref, FALSY, true), (0, _defineProperty2.default)(_ref, "value", value), _ref;
  }

  return value;
}

function unwrapFalsy(value) {
  if (value && typeof value === 'object' && value[FALSY]) {
    return value.value;
  }

  return value;
}

function isSagaWrapper(saga) {
  return saga[SAGA_WRAPPER];
}

function createSagaWrapper() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'sagaWrapper';

  function sagaWrapper(wrappedIterator, refineYieldedValue, onReturn, onError) {
    var _ref2;

    var result;

    function getNext() {
      try {
        return wrappedIterator.next.apply(wrappedIterator, arguments);
      } catch (e) {
        if (typeof onError === 'function') {
          onError(e);
        }

        throw e;
      }
    }

    function complete() {
      if (typeof onReturn === 'function') {
        onReturn(result.value);
      }

      return {
        value: result.value,
        done: true
      };
    }

    return (0, _fsmIterator.default)(INIT, (_ref2 = {}, (0, _defineProperty2.default)(_ref2, INIT, function (_, fsm) {
      result = getNext();
      return fsm[REFINE](undefined, fsm);
    }), (0, _defineProperty2.default)(_ref2, REFINE, function (_, fsm) {
      try {
        if (result.done) {
          return complete();
        }

        var value = refineYieldedValue(result.value);
        value = Array.isArray(value) ? value.map(wrapFalsy) : wrapFalsy(value);
        return {
          value: value,
          next: NEXT
        };
      } catch (e) {
        return fsm.throw(e, fsm);
      }
    }), (0, _defineProperty2.default)(_ref2, NEXT, function (response, fsm) {
      var finalResponse = Array.isArray(response) ? response.map(unwrapFalsy) : unwrapFalsy(response);
      result = getNext(finalResponse);
      return fsm[LOOP](undefined, fsm);
    }), (0, _defineProperty2.default)(_ref2, LOOP, function (_, fsm) {
      if (result.done) {
        return complete();
      }

      return fsm[REFINE](undefined, fsm);
    }), (0, _defineProperty2.default)(_ref2, "return", function _return(value, fsm) {
      result = wrappedIterator.return(value);
      return fsm[LOOP](undefined, fsm);
    }), (0, _defineProperty2.default)(_ref2, "throw", function _throw(e, fsm) {
      try {
        result = wrappedIterator.throw(e);
      } catch (innerError) {
        if (typeof onError === 'function') {
          onError(innerError);
        }

        throw innerError;
      }

      return fsm[LOOP](undefined, fsm);
    }), _ref2));
  }

  sagaWrapper[SAGA_WRAPPER] = true;

  try {
    Object.defineProperty(sagaWrapper, 'name', {
      value: name
    });
  } catch (e) {}

  return sagaWrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,