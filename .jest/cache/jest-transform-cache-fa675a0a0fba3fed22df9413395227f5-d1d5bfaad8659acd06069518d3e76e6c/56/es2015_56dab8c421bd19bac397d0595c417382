e4b4f1906bd136d537a3dcaadd53a9f4
'use strict';

var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

var isDate = require('is-date-object');

var isSymbol = require('is-symbol');

var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
  if (typeof O === 'undefined' || O === null) {
    throw new TypeError('Cannot call method on ' + O);
  }

  if (typeof hint !== 'string' || hint !== 'number' && hint !== 'string') {
    throw new TypeError('hint must be "string" or "number"');
  }

  var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
  var method, result, i;

  for (i = 0; i < methodNames.length; ++i) {
    method = O[methodNames[i]];

    if (isCallable(method)) {
      result = method.call(O);

      if (isPrimitive(result)) {
        return result;
      }
    }
  }

  throw new TypeError('No default value');
};

var GetMethod = function GetMethod(O, P) {
  var func = O[P];

  if (func !== null && typeof func !== 'undefined') {
    if (!isCallable(func)) {
      throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
    }

    return func;
  }

  return void 0;
};

module.exports = function ToPrimitive(input) {
  if (isPrimitive(input)) {
    return input;
  }

  var hint = 'default';

  if (arguments.length > 1) {
    if (arguments[1] === String) {
      hint = 'string';
    } else if (arguments[1] === Number) {
      hint = 'number';
    }
  }

  var exoticToPrim;

  if (hasSymbols) {
    if (Symbol.toPrimitive) {
      exoticToPrim = GetMethod(input, Symbol.toPrimitive);
    } else if (isSymbol(input)) {
      exoticToPrim = Symbol.prototype.valueOf;
    }
  }

  if (typeof exoticToPrim !== 'undefined') {
    var result = exoticToPrim.call(input, hint);

    if (isPrimitive(result)) {
      return result;
    }

    throw new TypeError('unable to convert exotic object to primitive');
  }

  if (hint === 'default' && (isDate(input) || isSymbol(input))) {
    hint = 'string';
  }

  return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzMjAxNS5qcyJdLCJuYW1lcyI6WyJoYXNTeW1ib2xzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpc1ByaW1pdGl2ZSIsInJlcXVpcmUiLCJpc0NhbGxhYmxlIiwiaXNEYXRlIiwiaXNTeW1ib2wiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiT3JkaW5hcnlUb1ByaW1pdGl2ZSIsIk8iLCJoaW50IiwiVHlwZUVycm9yIiwibWV0aG9kTmFtZXMiLCJtZXRob2QiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwiY2FsbCIsIkdldE1ldGhvZCIsIlAiLCJmdW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRvUHJpbWl0aXZlIiwiaW5wdXQiLCJhcmd1bWVudHMiLCJTdHJpbmciLCJOdW1iZXIiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsInByb3RvdHlwZSIsInZhbHVlT2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFVBQVUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9BLE1BQU0sQ0FBQ0MsUUFBZCxLQUEyQixRQUE1RTs7QUFFQSxJQUFJQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyx1QkFBRCxDQUF6Qjs7QUFDQSxJQUFJQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXhCOztBQUNBLElBQUlFLE1BQU0sR0FBR0YsT0FBTyxDQUFDLGdCQUFELENBQXBCOztBQUNBLElBQUlHLFFBQVEsR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBdEI7O0FBRUEsSUFBSUksbUJBQW1CLEdBQUcsU0FBU0MsbUJBQVQsQ0FBNkJDLENBQTdCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUMvRCxNQUFJLE9BQU9ELENBQVAsS0FBYSxXQUFiLElBQTRCQSxDQUFDLEtBQUssSUFBdEMsRUFBNEM7QUFDM0MsVUFBTSxJQUFJRSxTQUFKLENBQWMsMkJBQTJCRixDQUF6QyxDQUFOO0FBQ0E7O0FBQ0QsTUFBSSxPQUFPQyxJQUFQLEtBQWdCLFFBQWhCLElBQTZC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LDhDQUFkLENBQU47QUFDQTs7QUFDRCxNQUFJRCxJQUFJLEtBQUssU0FBVCxLQUF1QkwsTUFBTSxDQUFDbUIsS0FBRCxDQUFOLElBQWlCbEIsUUFBUSxDQUFDa0IsS0FBRCxDQUFoRCxDQUFKLEVBQThEO0FBQzdEZCxJQUFBQSxJQUFJLEdBQUcsUUFBUDtBQUNBOztBQUNELFNBQU9ILG1CQUFtQixDQUFDaUIsS0FBRCxFQUFRZCxJQUFJLEtBQUssU0FBVCxHQUFxQixRQUFyQixHQUFnQ0EsSUFBeEMsQ0FBMUI7QUFDQSxDQWhDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoYXJndW1lbnRzWzFdID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50c1sxXSA9PT0gTnVtYmVyKSB7XG5cdFx0XHRoaW50ID0gJ251bWJlcic7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGV4b3RpY1RvUHJpbTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRpZiAoU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIFN5bWJvbC50b1ByaW1pdGl2ZSk7XG5cdFx0fSBlbHNlIGlmIChpc1N5bWJvbChpbnB1dCkpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZjtcblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBleG90aWNUb1ByaW0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcblx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigndW5hYmxlIHRvIGNvbnZlcnQgZXhvdGljIG9iamVjdCB0byBwcmltaXRpdmUnKTtcblx0fVxuXHRpZiAoaGludCA9PT0gJ2RlZmF1bHQnICYmIChpc0RhdGUoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkpIHtcblx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdH1cblx0cmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09ICdkZWZhdWx0JyA/ICdudW1iZXInIDogaGludCk7XG59O1xuIl19