6625f959073aa812e1a25907dd4d1dc8
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Array = GetIntrinsic('%Array%');
var $species = GetIntrinsic('%Symbol.species%', true);
var $TypeError = GetIntrinsic('%TypeError%');

var Get = require('./Get');

var IsArray = require('./IsArray');

var IsConstructor = require('./IsConstructor');

var IsInteger = require('./IsInteger');

var Type = require('./Type');

module.exports = function ArraySpeciesCreate(originalArray, length) {
  if (!IsInteger(length) || length < 0) {
    throw new $TypeError('Assertion failed: length must be an integer >= 0');
  }

  var len = length === 0 ? 0 : length;
  var C;
  var isArray = IsArray(originalArray);

  if (isArray) {
    C = Get(originalArray, 'constructor');

    if ($species && Type(C) === 'Object') {
      C = Get(C, $species);

      if (C === null) {
        C = void 0;
      }
    }
  }

  if (typeof C === 'undefined') {
    return $Array(len);
  }

  if (!IsConstructor(C)) {
    throw new $TypeError('C must be a constructor');
  }

  return new C(len);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFycmF5U3BlY2llc0NyZWF0ZS5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJEFycmF5IiwiJHNwZWNpZXMiLCIkVHlwZUVycm9yIiwiR2V0IiwiSXNBcnJheSIsIklzQ29uc3RydWN0b3IiLCJJc0ludGVnZXIiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5U3BlY2llc0NyZWF0ZSIsIm9yaWdpbmFsQXJyYXkiLCJsZW5ndGgiLCJsZW4iLCJDIiwiaXNBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdGLFlBQVksQ0FBQyxTQUFELENBQXpCO0FBQ0EsSUFBSUcsUUFBUSxHQUFHSCxZQUFZLENBQUMsa0JBQUQsRUFBcUIsSUFBckIsQ0FBM0I7QUFDQSxJQUFJSSxVQUFVLEdBQUdKLFlBQVksQ0FBQyxhQUFELENBQTdCOztBQUVBLElBQUlLLEdBQUcsR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBakI7O0FBQ0EsSUFBSUssT0FBTyxHQUFHTCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxJQUFJTSxhQUFhLEdBQUdOLE9BQU8sQ0FBQyxpQkFBRCxDQUEzQjs7QUFDQSxJQUFJTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQyxhQUFELENBQXZCOztBQUNBLElBQUlRLElBQUksR0FBR1IsT0FBTyxDQUFDLFFBQUQsQ0FBbEI7O0FBSUFTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxrQkFBVCxDQUE0QkMsYUFBNUIsRUFBMkNDLE1BQTNDLEVBQW1EO0FBQ25FLE1BQUksQ0FBQ04sU0FBUyxDQUFDTSxNQUFELENBQVYsSUFBc0JBLE1BQU0sR0FBRyxDQUFuQyxFQUFzQztBQUNyQyxVQUFNLElBQUlWLFVBQUosQ0FBZSxrREFBZixDQUFOO0FBQ0E7O0FBQ0QsTUFBSVcsR0FBRyxHQUFHRCxNQUFNLEtBQUssQ0FBWCxHQUFlLENBQWYsR0FBbUJBLE1BQTdCO0FBQ0EsTUFBSUUsQ0FBSjtBQUNBLE1BQUlDLE9BQU8sR0FBR1gsT0FBTyxDQUFDTyxhQUFELENBQXJCOztBQUNBLE1BQUlJLE9BQUosRUFBYTtBQUNaRCxJQUFBQSxDQUFDLEdBQUdYLEdBQUcsQ0FBQ1EsYUFBRCxFQUFnQixhQUFoQixDQUFQOztBQU1BLFFBQUlWLFFBQVEsSUFBSU0sSUFBSSxDQUFDTyxDQUFELENBQUosS0FBWSxRQUE1QixFQUFzQztBQUNyQ0EsTUFBQUEsQ0FBQyxHQUFHWCxHQUFHLENBQUNXLENBQUQsRUFBSWIsUUFBSixDQUFQOztBQUNBLFVBQUlhLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2ZBLFFBQUFBLENBQUMsR0FBRyxLQUFLLENBQVQ7QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPQSxDQUFQLEtBQWEsV0FBakIsRUFBOEI7QUFDN0IsV0FBT2QsTUFBTSxDQUFDYSxHQUFELENBQWI7QUFDQTs7QUFDRCxNQUFJLENBQUNSLGFBQWEsQ0FBQ1MsQ0FBRCxDQUFsQixFQUF1QjtBQUN0QixVQUFNLElBQUlaLFVBQUosQ0FBZSx5QkFBZixDQUFOO0FBQ0E7O0FBQ0QsU0FBTyxJQUFJWSxDQUFKLENBQU1ELEdBQU4sQ0FBUDtBQUNBLENBNUJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJEFycmF5ID0gR2V0SW50cmluc2ljKCclQXJyYXklJyk7XG52YXIgJHNwZWNpZXMgPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wuc3BlY2llcyUnLCB0cnVlKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgSXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vSXNDb25zdHJ1Y3RvcicpO1xudmFyIElzSW50ZWdlciA9IHJlcXVpcmUoJy4vSXNJbnRlZ2VyJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuXHRpZiAoIUlzSW50ZWdlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwJyk7XG5cdH1cblx0dmFyIGxlbiA9IGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGg7XG5cdHZhciBDO1xuXHR2YXIgaXNBcnJheSA9IElzQXJyYXkob3JpZ2luYWxBcnJheSk7XG5cdGlmIChpc0FycmF5KSB7XG5cdFx0QyA9IEdldChvcmlnaW5hbEFycmF5LCAnY29uc3RydWN0b3InKTtcblx0XHQvLyBUT0RPOiBmaWd1cmUgb3V0IGhvdyB0byBtYWtlIGEgY3Jvc3MtcmVhbG0gbm9ybWFsIEFycmF5LCBhIHNhbWUtcmVhbG0gQXJyYXlcblx0XHQvLyBpZiAoSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdC8vIFx0aWYgQyBpcyBhbm90aGVyIHJlYWxtJ3MgQXJyYXksIEMgPSB1bmRlZmluZWRcblx0XHQvLyBcdE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKEFycmF5KSkpID09PSBudWxsID9cblx0XHQvLyB9XG5cdFx0aWYgKCRzcGVjaWVzICYmIFR5cGUoQykgPT09ICdPYmplY3QnKSB7XG5cdFx0XHRDID0gR2V0KEMsICRzcGVjaWVzKTtcblx0XHRcdGlmIChDID09PSBudWxsKSB7XG5cdFx0XHRcdEMgPSB2b2lkIDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJEFycmF5KGxlbik7XG5cdH1cblx0aWYgKCFJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0MgbXVzdCBiZSBhIGNvbnN0cnVjdG9yJyk7XG5cdH1cblx0cmV0dXJuIG5ldyBDKGxlbik7IC8vIENvbnN0cnVjdChDLCBsZW4pO1xufTtcblxuIl19