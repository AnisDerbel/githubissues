b4974f248bdbd31f710a26857b636f6d














var slice = Array.prototype.slice;











exports._makeDomArray = function makeDomArray(elem, clone) {
  if (elem == null) {
    return [];
  } else if (elem.cheerio) {
    return clone ? require('../utils').cloneDom(elem.get(), elem.options) : elem.get();
  } else if (Array.isArray(elem)) {
    return elem.reduce(
    function (newElems, el) {
      return newElems.concat(this._makeDomArray(el, clone));
    }.bind(this),
    []);

  } else if (typeof elem === 'string') {
    return require('../parse')(elem, this.options, false).children;
  }
  return clone ? require('../utils').cloneDom([elem]) : [elem];
};

var _insert = function _insert(concatenator) {
  return function () {
    var elems = slice.call(arguments);
    var lastIdx = this.length - 1;

    return require('../utils').domEach(this, function (i, el) {
      var dom;
      var domSrc;

      if (typeof elems[0] === 'function') {
        domSrc = elems[0].call(el, i, require('../static').html(el.children));
      } else {
        domSrc = elems;
      }

      dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
};












var uniqueSplice = function uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {
  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);
  var prev = array[spliceIdx - 1] || null;
  var next = array[spliceIdx + spliceCount] || null;
  var idx;
  var len;
  var prevIdx;
  var node;
  var oldParent;



  for (idx = 0, len = newElems.length; idx < len; ++idx) {
    node = newElems[idx];
    oldParent = node.parent;
    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);

    if (oldParent && prevIdx > -1) {
      oldParent.children.splice(prevIdx, 1);
      if (parent === oldParent && spliceIdx > prevIdx) {
        spliceArgs[0]--;
      }
    }

    node.parent = parent;

    if (node.prev) {
      node.prev.next = node.next || null;
    }

    if (node.next) {
      node.next.prev = node.prev || null;
    }

    node.prev = newElems[idx - 1] || prev;
    node.next = newElems[idx + 1] || next;
  }

  if (prev) {
    prev.next = newElems[0];
  }
  if (next) {
    next.prev = newElems[newElems.length - 1];
  }
  return array.splice.apply(array, spliceArgs);
};




















exports.appendTo = function (target) {
  if (!target.cheerio) {
    target = this.constructor.call(
    this.constructor,
    target,
    null,
    this._originalRoot);

  }

  target.append(this);

  return this;
};




















exports.prependTo = function (target) {
  if (!target.cheerio) {
    target = this.constructor.call(
    this.constructor,
    target,
    null,
    this._originalRoot);

  }

  target.prepend(this);

  return this;
};



















exports.append = _insert(function (dom, children, parent) {
  uniqueSplice(children, children.length, 0, dom, parent);
});



















exports.prepend = _insert(function (dom, children, parent) {
  uniqueSplice(children, 0, 0, dom, parent);
});

function _wrap(insert) {
  return function (wrapper) {
    var wrapperFn = typeof wrapper === 'function' && wrapper;
    var lastIdx = this.length - 1;
    var lastParent = this.parents().last();

    for (var i = 0; i < this.length; i++) {
      var el = this[i];
      var wrapperDom;
      var elInsertLocation;
      var j;

      if (wrapperFn) {
        wrapper = wrapperFn.call(el, i);
      }

      if (typeof wrapper === 'string' && !require('../utils').isHtml(wrapper)) {
        wrapper = lastParent.find(wrapper).clone();
      }

      wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);
      elInsertLocation = wrapperDom[0];


      j = 0;

      while (elInsertLocation && elInsertLocation.children) {
        if (j >= elInsertLocation.children.length) {
          break;
        }

        if (elInsertLocation.children[j].type === 'tag') {
          elInsertLocation = elInsertLocation.children[j];
          j = 0;
        } else {
          j++;
        }
      }

      insert(el, elInsertLocation, wrapperDom);
    }

    return this;
  };
}









































exports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {
  var parent = el.parent;
  var siblings = parent.children;
  var index = siblings.indexOf(el);

  require('../parse').update([el], elInsertLocation);



  uniqueSplice(siblings, index, 0, wrapperDom, parent);
});








































exports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {
  require('../parse').update(el.children, elInsertLocation);
  require('../parse').update(wrapperDom, el);
});

















exports.after = function () {
  var elems = slice.call(arguments);
  var lastIdx = this.length - 1;

  require('../utils').domEach(this, function (i, el) {
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);
    var domSrc;
    var dom;


    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, require('../static').html(el.children));
    } else {
      domSrc = elems;
    }
    dom = this._makeDomArray(domSrc, i < lastIdx);


    uniqueSplice(siblings, index + 1, 0, dom, parent);
  });

  return this;
};



















exports.insertAfter = function (target) {
  var clones = [];
  var self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(
    this.constructor,
    target,
    null,
    this._originalRoot);

  }
  target = this._makeDomArray(target);
  self.remove();
  require('../utils').domEach(target, function (i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);


    if (index < 0) return;


    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

















exports.before = function () {
  var elems = slice.call(arguments);
  var lastIdx = this.length - 1;

  require('../utils').domEach(this, function (i, el) {
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);
    var domSrc;
    var dom;


    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, require('../static').html(el.children));
    } else {
      domSrc = elems;
    }

    dom = this._makeDomArray(domSrc, i < lastIdx);


    uniqueSplice(siblings, index, 0, dom, parent);
  });

  return this;
};



















exports.insertBefore = function (target) {
  var clones = [];
  var self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(
    this.constructor,
    target,
    null,
    this._originalRoot);

  }
  target = this._makeDomArray(target);
  self.remove();
  require('../utils').domEach(target, function (i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var index = siblings.indexOf(el);


    if (index < 0) return;


    uniqueSplice(siblings, index, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};


















exports.remove = function (selector) {
  var elems = this;


  if (selector) elems = elems.filter(selector);

  require('../utils').domEach(elems, function (i, el) {
    require('htmlparser2').DomUtils.removeElement(el);
    el.prev = el.next = el.parent = null;
  });

  return this;
};



















exports.replaceWith = function (content) {
  var self = this;

  require('../utils').domEach(this, function (i, el) {
    var parent = el.parent;
    if (!parent) {
      return;
    }

    var siblings = parent.children;
    var dom = self._makeDomArray(
    typeof content === 'function' ? content.call(el, i, el) : content);

    var index;



    require('../parse').update(dom, null);

    index = siblings.indexOf(el);


    uniqueSplice(siblings, index, 1, dom, parent);
    el.parent = el.prev = el.next = null;
  });

  return this;
};












exports.empty = function () {
  require('../utils').domEach(this, function (i, el) {
    el.children.forEach(function (child) {
      child.next = child.prev = child.parent = null;
    });

    el.children.length = 0;
  });
  return this;
};


















exports.html = function (str) {
  if (str === undefined) {
    if (!this[0] || !this[0].children) return null;
    return require('../static').html(this[0].children, this.options);
  }

  var opts = this.options;

  require('../utils').domEach(this, function (i, el) {
    el.children.forEach(function (child) {
      child.next = child.prev = child.parent = null;
    });

    var content = str.cheerio ?
    str.clone().get() :
    require('../parse')('' + str, opts, false).children;

    require('../parse').update(content, el);
  });

  return this;
};

exports.toString = function () {
  return require('../static').html(this, this.options);
};




















exports.text = function (str) {

  if (str === undefined) {
    return require('../static').text(this);
  } else if (typeof str === 'function') {

    var self = this;
    return require('../utils').domEach(this, function (i, el) {
      return exports.text.call(self._make(el), str.call(el, i, require('../static').text([el])));
    });
  }


  require('../utils').domEach(this, function (i, el) {
    el.children.forEach(function (child) {
      child.next = child.prev = child.parent = null;
    });

    var textNode = new (require('domhandler').Text)(str);

    require('../parse').update(textNode, el);
  });

  return this;
};










exports.clone = function () {
  return this._make(require('../utils').cloneDom(this.get(), this.options));
};