971ea0d05aff8a62acf8da61a09bda71
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

var ES5internalSlots = {
  '[[DefaultValue]]': function DefaultValue(O) {
    var actualHint;

    if (arguments.length > 1) {
      actualHint = arguments[1];
    } else {
      actualHint = toStr.call(O) === '[object Date]' ? String : Number;
    }

    if (actualHint === String || actualHint === Number) {
      var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
      var value, i;

      for (i = 0; i < methods.length; ++i) {
        if (isCallable(O[methods[i]])) {
          value = O[methods[i]]();

          if (isPrimitive(value)) {
            return value;
          }
        }
      }

      throw new TypeError('No default value');
    }

    throw new TypeError('invalid [[DefaultValue]] hint supplied');
  }
};

module.exports = function ToPrimitive(input) {
  if (isPrimitive(input)) {
    return input;
  }

  if (arguments.length > 1) {
    return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
  }

  return ES5internalSlots['[[DefaultValue]]'](input);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNS5qcyJdLCJuYW1lcyI6WyJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaXNQcmltaXRpdmUiLCJyZXF1aXJlIiwiaXNDYWxsYWJsZSIsIkVTNWludGVybmFsU2xvdHMiLCJPIiwiYWN0dWFsSGludCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGwiLCJTdHJpbmciLCJOdW1iZXIiLCJtZXRob2RzIiwidmFsdWUiLCJpIiwiVHlwZUVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRvUHJpbWl0aXZlIiwiaW5wdXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUE3Qjs7QUFFQSxJQUFJQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyx1QkFBRCxDQUF6Qjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXhCOztBQUdBLElBQUlFLGdCQUFnQixHQUFHO0FBQ3RCLHNCQUFvQixzQkFBVUMsQ0FBVixFQUFhO0FBQ2hDLFFBQUlDLFVBQUo7O0FBQ0EsUUFBSUMsU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3pCRixNQUFBQSxVQUFVLEdBQUdDLFNBQVMsQ0FBQyxDQUFELENBQXRCO0FBQ0EsS0FGRCxNQUVPO0FBQ05ELE1BQUFBLFVBQVUsR0FBR1QsS0FBSyxDQUFDWSxJQUFOLENBQVdKLENBQVgsTUFBa0IsZUFBbEIsR0FBb0NLLE1BQXBDLEdBQTZDQyxNQUExRDtBQUNBOztBQUVELFFBQUlMLFVBQVUsS0FBS0ksTUFBZixJQUF5QkosVUFBVSxLQUFLSyxNQUE1QyxFQUFvRDtBQUNuRCxVQUFJQyxPQUFPLEdBQUdOLFVBQVUsS0FBS0ksTUFBZixHQUF3QixDQUFDLFVBQUQsRUFBYSxTQUFiLENBQXhCLEdBQWtELENBQUMsU0FBRCxFQUFZLFVBQVosQ0FBaEU7QUFDQSxVQUFJRyxLQUFKLEVBQVdDLENBQVg7O0FBQ0EsV0FBS0EsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHRixPQUFPLENBQUNKLE1BQXhCLEVBQWdDLEVBQUVNLENBQWxDLEVBQXFDO0FBQ3BDLFlBQUlYLFVBQVUsQ0FBQ0UsQ0FBQyxDQUFDTyxPQUFPLENBQUNFLENBQUQsQ0FBUixDQUFGLENBQWQsRUFBK0I7QUFDOUJELFVBQUFBLEtBQUssR0FBR1IsQ0FBQyxDQUFDTyxPQUFPLENBQUNFLENBQUQsQ0FBUixDQUFELEVBQVI7O0FBQ0EsY0FBSWIsV0FBVyxDQUFDWSxLQUFELENBQWYsRUFBd0I7QUFDdkIsbUJBQU9BLEtBQVA7QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsWUFBTSxJQUFJRSxTQUFKLENBQWMsa0JBQWQsQ0FBTjtBQUNBOztBQUNELFVBQU0sSUFBSUEsU0FBSixDQUFjLHdDQUFkLENBQU47QUFDQTtBQXZCcUIsQ0FBdkI7O0FBMkJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDNUMsTUFBSWxCLFdBQVcsQ0FBQ2tCLEtBQUQsQ0FBZixFQUF3QjtBQUN2QixXQUFPQSxLQUFQO0FBQ0E7O0FBQ0QsTUFBSVosU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3pCLFdBQU9KLGdCQUFnQixDQUFDLGtCQUFELENBQWhCLENBQXFDZSxLQUFyQyxFQUE0Q1osU0FBUyxDQUFDLENBQUQsQ0FBckQsQ0FBUDtBQUNBOztBQUNELFNBQU9ILGdCQUFnQixDQUFDLGtCQUFELENBQWhCLENBQXFDZSxLQUFyQyxDQUFQO0FBQ0EsQ0FSRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG5cbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcblxuLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMi44XG52YXIgRVM1aW50ZXJuYWxTbG90cyA9IHtcblx0J1tbRGVmYXVsdFZhbHVlXV0nOiBmdW5jdGlvbiAoTykge1xuXHRcdHZhciBhY3R1YWxIaW50O1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YWN0dWFsSGludCA9IGFyZ3VtZW50c1sxXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWN0dWFsSGludCA9IHRvU3RyLmNhbGwoTykgPT09ICdbb2JqZWN0IERhdGVdJyA/IFN0cmluZyA6IE51bWJlcjtcblx0XHR9XG5cblx0XHRpZiAoYWN0dWFsSGludCA9PT0gU3RyaW5nIHx8IGFjdHVhbEhpbnQgPT09IE51bWJlcikge1xuXHRcdFx0dmFyIG1ldGhvZHMgPSBhY3R1YWxIaW50ID09PSBTdHJpbmcgPyBbJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXSA6IFsndmFsdWVPZicsICd0b1N0cmluZyddO1xuXHRcdFx0dmFyIHZhbHVlLCBpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IG1ldGhvZHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0aWYgKGlzQ2FsbGFibGUoT1ttZXRob2RzW2ldXSkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IE9bbWV0aG9kc1tpXV0oKTtcblx0XHRcdFx0XHRpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBkZWZhdWx0IHZhbHVlJyk7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgW1tEZWZhdWx0VmFsdWVdXSBoaW50IHN1cHBsaWVkJyk7XG5cdH1cbn07XG5cbi8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiBFUzVpbnRlcm5hbFNsb3RzWydbW0RlZmF1bHRWYWx1ZV1dJ10oaW5wdXQsIGFyZ3VtZW50c1sxXSk7XG5cdH1cblx0cmV0dXJuIEVTNWludGVybmFsU2xvdHNbJ1tbRGVmYXVsdFZhbHVlXV0nXShpbnB1dCk7XG59O1xuIl19