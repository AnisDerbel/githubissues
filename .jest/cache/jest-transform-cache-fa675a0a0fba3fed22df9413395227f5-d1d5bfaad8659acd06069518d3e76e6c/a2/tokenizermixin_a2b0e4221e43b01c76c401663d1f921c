12429ad432f905dfad993ee595de8e71
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Mixin = require('../../utils/mixin');

var Tokenizer = require('../../tokenizer');

var PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');

var LocationInfoTokenizerMixin = function (_Mixin) {
  (0, _inherits2.default)(LocationInfoTokenizerMixin, _Mixin);

  var _super = _createSuper(LocationInfoTokenizerMixin);

  function LocationInfoTokenizerMixin(tokenizer) {
    var _this;

    (0, _classCallCheck2.default)(this, LocationInfoTokenizerMixin);
    _this = _super.call(this, tokenizer);
    _this.tokenizer = tokenizer;
    _this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
    _this.currentAttrLocation = null;
    _this.ctLoc = null;
    return _this;
  }

  (0, _createClass2.default)(LocationInfoTokenizerMixin, [{
    key: "_getCurrentLocation",
    value: function _getCurrentLocation() {
      return {
        startLine: this.posTracker.line,
        startCol: this.posTracker.col,
        startOffset: this.posTracker.offset,
        endLine: -1,
        endCol: -1,
        endOffset: -1
      };
    }
  }, {
    key: "_attachCurrentAttrLocationInfo",
    value: function _attachCurrentAttrLocationInfo() {
      this.currentAttrLocation.endLine = this.posTracker.line;
      this.currentAttrLocation.endCol = this.posTracker.col;
      this.currentAttrLocation.endOffset = this.posTracker.offset;
      var currentToken = this.tokenizer.currentToken;
      var currentAttr = this.tokenizer.currentAttr;

      if (!currentToken.location.attrs) {
        currentToken.location.attrs = Object.create(null);
      }

      currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
    }
  }, {
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      var methods = {
        _createStartTagToken: function _createStartTagToken() {
          orig._createStartTagToken.call(this);

          this.currentToken.location = mxn.ctLoc;
        },
        _createEndTagToken: function _createEndTagToken() {
          orig._createEndTagToken.call(this);

          this.currentToken.location = mxn.ctLoc;
        },
        _createCommentToken: function _createCommentToken() {
          orig._createCommentToken.call(this);

          this.currentToken.location = mxn.ctLoc;
        },
        _createDoctypeToken: function _createDoctypeToken(initialName) {
          orig._createDoctypeToken.call(this, initialName);

          this.currentToken.location = mxn.ctLoc;
        },
        _createCharacterToken: function _createCharacterToken(type, ch) {
          orig._createCharacterToken.call(this, type, ch);

          this.currentCharacterToken.location = mxn.ctLoc;
        },
        _createEOFToken: function _createEOFToken() {
          orig._createEOFToken.call(this);

          this.currentToken.location = mxn._getCurrentLocation();
        },
        _createAttr: function _createAttr(attrNameFirstCh) {
          orig._createAttr.call(this, attrNameFirstCh);

          mxn.currentAttrLocation = mxn._getCurrentLocation();
        },
        _leaveAttrName: function _leaveAttrName(toState) {
          orig._leaveAttrName.call(this, toState);

          mxn._attachCurrentAttrLocationInfo();
        },
        _leaveAttrValue: function _leaveAttrValue(toState) {
          orig._leaveAttrValue.call(this, toState);

          mxn._attachCurrentAttrLocationInfo();
        },
        _emitCurrentToken: function _emitCurrentToken() {
          var ctLoc = this.currentToken.location;

          if (this.currentCharacterToken) {
            this.currentCharacterToken.location.endLine = ctLoc.startLine;
            this.currentCharacterToken.location.endCol = ctLoc.startCol;
            this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
          }

          if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
            ctLoc.endLine = ctLoc.startLine;
            ctLoc.endCol = ctLoc.startCol;
            ctLoc.endOffset = ctLoc.startOffset;
          } else {
            ctLoc.endLine = mxn.posTracker.line;
            ctLoc.endCol = mxn.posTracker.col + 1;
            ctLoc.endOffset = mxn.posTracker.offset + 1;
          }

          orig._emitCurrentToken.call(this);
        },
        _emitCurrentCharacterToken: function _emitCurrentCharacterToken() {
          var ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;

          if (ctLoc && ctLoc.endOffset === -1) {
            ctLoc.endLine = mxn.posTracker.line;
            ctLoc.endCol = mxn.posTracker.col;
            ctLoc.endOffset = mxn.posTracker.offset;
          }

          orig._emitCurrentCharacterToken.call(this);
        }
      };
      Object.keys(Tokenizer.MODE).forEach(function (modeName) {
        var state = Tokenizer.MODE[modeName];

        methods[state] = function (cp) {
          mxn.ctLoc = mxn._getCurrentLocation();
          orig[state].call(this, cp);
        };
      });
      return methods;
    }
  }]);
  return LocationInfoTokenizerMixin;
}(Mixin);

module.exports = LocationInfoTokenizerMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,