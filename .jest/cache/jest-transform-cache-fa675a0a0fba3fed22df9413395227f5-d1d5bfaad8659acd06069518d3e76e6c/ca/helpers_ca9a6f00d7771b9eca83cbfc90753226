9e134de5d77df2ce352da43331f64beb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;

var tagtypes_1 = require("./tagtypes");

function removeSubsets(nodes) {
  var idx = nodes.length;

  while (--idx >= 0) {
    var node = nodes[idx];

    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }

    for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }

  return nodes;
}

exports.removeSubsets = removeSubsets;

function compareDocumentPosition(nodeA, nodeB) {
  var aParents = [];
  var bParents = [];

  if (nodeA === nodeB) {
    return 0;
  }

  var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent;

  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }

  current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent;

  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }

  var maxIdx = Math.min(aParents.length, bParents.length);
  var idx = 0;

  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }

  if (idx === 0) {
    return 1;
  }

  var sharedParent = aParents[idx - 1];
  var siblings = sharedParent.children;
  var aSibling = aParents[idx];
  var bSibling = bParents[idx];

  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return 4 | 16;
    }

    return 4;
  }

  if (sharedParent === nodeA) {
    return 2 | 8;
  }

  return 2;
}

exports.compareDocumentPosition = compareDocumentPosition;

function uniqueSort(nodes) {
  nodes = nodes.filter(function (node, i, arr) {
    return !arr.includes(node, i + 1);
  });
  nodes.sort(function (a, b) {
    var relative = compareDocumentPosition(a, b);

    if (relative & 2) {
        return -1;
      } else if (relative & 4) {
        return 1;
      }

    return 0;
  });
  return nodes;
}

exports.uniqueSort = uniqueSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1bmlxdWVTb3J0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyZW1vdmVTdWJzZXRzIiwidGFndHlwZXNfMSIsInJlcXVpcmUiLCJub2RlcyIsImlkeCIsImxlbmd0aCIsIm5vZGUiLCJsYXN0SW5kZXhPZiIsInNwbGljZSIsImFuY2VzdG9yIiwicGFyZW50IiwiaW5jbHVkZXMiLCJub2RlQSIsIm5vZGVCIiwiYVBhcmVudHMiLCJiUGFyZW50cyIsImN1cnJlbnQiLCJoYXNDaGlsZHJlbiIsInVuc2hpZnQiLCJtYXhJZHgiLCJNYXRoIiwibWluIiwic2hhcmVkUGFyZW50Iiwic2libGluZ3MiLCJjaGlsZHJlbiIsImFTaWJsaW5nIiwiYlNpYmxpbmciLCJpbmRleE9mIiwiZmlsdGVyIiwiaSIsImFyciIsInNvcnQiLCJhIiwiYiIsInJlbGF0aXZlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3QztBQUNBRCxPQUFPLENBQUNFLFVBQVIsR0FBcUJGLE9BQU8sQ0FBQ0csdUJBQVIsR0FBa0NILE9BQU8sQ0FBQ0ksYUFBUixHQUF3QixLQUFLLENBQXBGOztBQUNBLElBQUlDLFVBQVUsR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBT0EsU0FBU0YsYUFBVCxDQUF1QkcsS0FBdkIsRUFBOEI7QUFDMUIsTUFBSUMsR0FBRyxHQUFHRCxLQUFLLENBQUNFLE1BQWhCOztBQUtBLFNBQU8sRUFBRUQsR0FBRixJQUFTLENBQWhCLEVBQW1CO0FBQ2YsUUFBSUUsSUFBSSxHQUFHSCxLQUFLLENBQUNDLEdBQUQsQ0FBaEI7O0FBTUEsUUFBSUEsR0FBRyxHQUFHLENBQU4sSUFBV0QsS0FBSyxDQUFDSSxX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QUFhLFVBQVV0QixJQUFWLEVBQWdCdUIsQ0FBaEIsRUFBbUJDLEdBQW5CLEVBQXdCO0FBQUUsV0FBTyxDQUFDQSxHQUFHLENBQUNuQixRQUFKLENBQWFMLElBQWIsRUFBbUJ1QixDQUFDLEdBQUcsQ0FBdkIsQ0FBUjtBQUFvQyxHQUEzRSxDQUFSO0FBQ0ExQixFQUFBQSxLQUFLLENBQUM0QixJQUFOLENBQVcsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ3ZCLFFBQUlDLFFBQVEsR0FBR25DLHVCQUF1QixDQUFDaUMsQ0FBRCxFQUFJQyxDQUFKLENBQXRDOztBQUNBLFFBQUlDLFFBQVEsR0FBRyxDQUFmLEVBQWtDO0FBQzlCLGVBQU8sQ0FBQyxDQUFSO0FBQ0gsT0FGRCxNQUdLLElBQUlBLFFBQVEsR0FBRyxDQUFmLEVBQWtDO0FBQ25DLGVBQU8sQ0FBUDtBQUNIOztBQUNELFdBQU8sQ0FBUDtBQUNILEdBVEQ7QUFVQSxTQUFPL0IsS0FBUDtBQUNIOztBQUNEUCxPQUFPLENBQUNFLFVBQVIsR0FBcUJBLFVBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVuaXF1ZVNvcnQgPSBleHBvcnRzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID0gZXhwb3J0cy5yZW1vdmVTdWJzZXRzID0gdm9pZCAwO1xudmFyIHRhZ3R5cGVzXzEgPSByZXF1aXJlKFwiLi90YWd0eXBlc1wiKTtcbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2Ygbm9kZXMsIHJlbW92ZSBhbnkgbWVtYmVyIHRoYXQgaXMgY29udGFpbmVkIGJ5IGFub3RoZXIuXG4gKlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIGZpbHRlci5cbiAqIEByZXR1cm5zIFJlbWFpbmluZyBub2RlcyB0aGF0IGFyZW4ndCBzdWJ0cmVlcyBvZiBlYWNoIG90aGVyLlxuICovXG5mdW5jdGlvbiByZW1vdmVTdWJzZXRzKG5vZGVzKSB7XG4gICAgdmFyIGlkeCA9IG5vZGVzLmxlbmd0aDtcbiAgICAvKlxuICAgICAqIENoZWNrIGlmIGVhY2ggbm9kZSAob3Igb25lIG9mIGl0cyBhbmNlc3RvcnMpIGlzIGFscmVhZHkgY29udGFpbmVkIGluIHRoZVxuICAgICAqIGFycmF5LlxuICAgICAqL1xuICAgIHdoaWxlICgtLWlkeCA+PSAwKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaWR4XTtcbiAgICAgICAgLypcbiAgICAgICAgICogUmVtb3ZlIHRoZSBub2RlIGlmIGl0IGlzIG5vdCB1bmlxdWUuXG4gICAgICAgICAqIFdlIGFyZSBnb2luZyB0aHJvdWdoIHRoZSBhcnJheSBmcm9tIHRoZSBlbmQsIHNvIHdlIG9ubHlcbiAgICAgICAgICogaGF2ZSB0byBjaGVjayBub2RlcyB0aGF0IHByZWNlZWQgdGhlIG5vZGUgdW5kZXIgY29uc2lkZXJhdGlvbiBpbiB0aGUgYXJyYXkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaWR4ID4gMCAmJiBub2Rlcy5sYXN0SW5kZXhPZihub2RlLCBpZHggLSAxKSA+PSAwKSB7XG4gICAgICAgICAgICBub2Rlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGFuY2VzdG9yID0gbm9kZS5wYXJlbnQ7IGFuY2VzdG9yOyBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudCkge1xuICAgICAgICAgICAgaWYgKG5vZGVzLmluY2x1ZGVzKGFuY2VzdG9yKSkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2Rlcztcbn1cbmV4cG9ydHMucmVtb3ZlU3Vic2V0cyA9IHJlbW92ZVN1YnNldHM7XG4vKipcbiAqIENvbXBhcmUgdGhlIHBvc2l0aW9uIG9mIG9uZSBub2RlIGFnYWluc3QgYW5vdGhlciBub2RlIGluIGFueSBvdGhlciBkb2N1bWVudC5cbiAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYSBiaXRtYXNrIHdpdGggdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4gKlxuICogRG9jdW1lbnQgb3JkZXI6XG4gKiA+IFRoZXJlIGlzIGFuIG9yZGVyaW5nLCBkb2N1bWVudCBvcmRlciwgZGVmaW5lZCBvbiBhbGwgdGhlIG5vZGVzIGluIHRoZVxuICogPiBkb2N1bWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZVxuICogPiBYTUwgcmVwcmVzZW50YXRpb24gb2YgZWFjaCBub2RlIG9jY3VycyBpbiB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICogPiBkb2N1bWVudCBhZnRlciBleHBhbnNpb24gb2YgZ2VuZXJhbCBlbnRpdGllcy4gVGh1cywgdGhlIGRvY3VtZW50IGVsZW1lbnRcbiAqID4gbm9kZSB3aWxsIGJlIHRoZSBmaXJzdCBub2RlLiBFbGVtZW50IG5vZGVzIG9jY3VyIGJlZm9yZSB0aGVpciBjaGlsZHJlbi5cbiAqID4gVGh1cywgZG9jdW1lbnQgb3JkZXIgb3JkZXJzIGVsZW1lbnQgbm9kZXMgaW4gb3JkZXIgb2YgdGhlIG9jY3VycmVuY2Ugb2ZcbiAqID4gdGhlaXIgc3RhcnQtdGFnIGluIHRoZSBYTUwgKGFmdGVyIGV4cGFuc2lvbiBvZiBlbnRpdGllcykuIFRoZSBhdHRyaWJ1dGVcbiAqID4gbm9kZXMgb2YgYW4gZWxlbWVudCBvY2N1ciBhZnRlciB0aGUgZWxlbWVudCBhbmQgYmVmb3JlIGl0cyBjaGlsZHJlbi4gVGhlXG4gKiA+IHJlbGF0aXZlIG9yZGVyIG9mIGF0dHJpYnV0ZSBub2RlcyBpcyBpbXBsZW1lbnRhdGlvbi1kZXBlbmRlbnQuL1xuICpcbiAqIFNvdXJjZTpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUNvcmUvZ2xvc3NhcnkuaHRtbCNkdC1kb2N1bWVudC1vcmRlclxuICpcbiAqIEBwYXJhbSBub2RlQSBUaGUgZmlyc3Qgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbiAqIEBwYXJhbSBub2RlQiBUaGUgc2Vjb25kIG5vZGUgdG8gdXNlIGluIHRoZSBjb21wYXJpc29uXG4gKiBAcmV0dXJucyBBIGJpdG1hc2sgZGVzY3JpYmluZyB0aGUgaW5wdXQgbm9kZXMnIHJlbGF0aXZlIHBvc2l0aW9uLlxuICpcbiAqIFNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLW5vZGUtY29tcGFyZWRvY3VtZW50cG9zaXRpb24gZm9yXG4gKiBhIGRlc2NyaXB0aW9uIG9mIHRoZXNlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZUEsIG5vZGVCKSB7XG4gICAgdmFyIGFQYXJlbnRzID0gW107XG4gICAgdmFyIGJQYXJlbnRzID0gW107XG4gICAgaWYgKG5vZGVBID09PSBub2RlQikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnQgPSB0YWd0eXBlc18xLmhhc0NoaWxkcmVuKG5vZGVBKSA/IG5vZGVBIDogbm9kZUEucGFyZW50O1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgIGFQYXJlbnRzLnVuc2hpZnQoY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICB9XG4gICAgY3VycmVudCA9IHRhZ3R5cGVzXzEuaGFzQ2hpbGRyZW4obm9kZUIpID8gbm9kZUIgOiBub2RlQi5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYlBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICB2YXIgbWF4SWR4ID0gTWF0aC5taW4oYVBhcmVudHMubGVuZ3RoLCBiUGFyZW50cy5sZW5ndGgpO1xuICAgIHZhciBpZHggPSAwO1xuICAgIHdoaWxlIChpZHggPCBtYXhJZHggJiYgYVBhcmVudHNbaWR4XSA9PT0gYlBhcmVudHNbaWR4XSkge1xuICAgICAgICBpZHgrKztcbiAgICB9XG4gICAgaWYgKGlkeCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMSAvKiBESVNDT05ORUNURUQgKi87XG4gICAgfVxuICAgIHZhciBzaGFyZWRQYXJlbnQgPSBhUGFyZW50c1tpZHggLSAxXTtcbiAgICB2YXIgc2libGluZ3MgPSBzaGFyZWRQYXJlbnQuY2hpbGRyZW47XG4gICAgdmFyIGFTaWJsaW5nID0gYVBhcmVudHNbaWR4XTtcbiAgICB2YXIgYlNpYmxpbmcgPSBiUGFyZW50c1tpZHhdO1xuICAgIGlmIChzaWJsaW5ncy5pbmRleE9mKGFTaWJsaW5nKSA+IHNpYmxpbmdzLmluZGV4T2YoYlNpYmxpbmcpKSB7XG4gICAgICAgIGlmIChzaGFyZWRQYXJlbnQgPT09IG5vZGVCKSB7XG4gICAgICAgICAgICByZXR1cm4gNCAvKiBGT0xMT1dJTkcgKi8gfCAxNiAvKiBDT05UQUlORURfQlkgKi87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDQgLyogRk9MTE9XSU5HICovO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuICAgICAgICByZXR1cm4gMiAvKiBQUkVDRURJTkcgKi8gfCA4IC8qIENPTlRBSU5TICovO1xuICAgIH1cbiAgICByZXR1cm4gMiAvKiBQUkVDRURJTkcgKi87XG59XG5leHBvcnRzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID0gY29tcGFyZURvY3VtZW50UG9zaXRpb247XG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgb2Ygbm9kZXMgYmFzZWQgb24gdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50IGFuZFxuICogcmVtb3ZlIGFueSBkdXBsaWNhdGUgbm9kZXMuIElmIHRoZSBhcnJheSBjb250YWlucyBub2RlcyB0aGF0IGRvIG5vdCBiZWxvbmdcbiAqIHRvIHRoZSBzYW1lIGRvY3VtZW50LCBzb3J0IG9yZGVyIGlzIHVuc3BlY2lmaWVkLlxuICpcbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBET00gbm9kZXMuXG4gKiBAcmV0dXJucyBDb2xsZWN0aW9uIG9mIHVuaXF1ZSBub2Rlcywgc29ydGVkIGluIGRvY3VtZW50IG9yZGVyLlxuICovXG5mdW5jdGlvbiB1bmlxdWVTb3J0KG5vZGVzKSB7XG4gICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUsIGksIGFycikgeyByZXR1cm4gIWFyci5pbmNsdWRlcyhub2RlLCBpICsgMSk7IH0pO1xuICAgIG5vZGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSwgYik7XG4gICAgICAgIGlmIChyZWxhdGl2ZSAmIDIgLyogUFJFQ0VESU5HICovKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVsYXRpdmUgJiA0IC8qIEZPTExPV0lORyAqLykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0cy51bmlxdWVTb3J0ID0gdW5pcXVlU29ydDtcbiJdfQ==