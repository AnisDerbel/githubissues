32469e25f1b21afd78e85733013f450b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _name = _interopRequireDefault(require("../utils/name"));

var _single = _interopRequireDefault(require("../utils/single"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function toHaveHTML(enzymeWrapper, html) {
  var wrapperHTML = enzymeWrapper.html();
  var useSingleQuotes = html.search("'") !== -1;
  var actualHTML = wrapperHTML.replace(/("|')/g, useSingleQuotes ? "'" : '"');
  var expectedHTML = html.replace(/("|')/g, useSingleQuotes ? "'" : '"').replace(/>[\n\t ]+</g, '><');
  var pass = actualHTML === expectedHTML;
  return {
    pass: pass,
    message: "Expected <" + (0, _name.default)(enzymeWrapper) + "> html to match the expected, but it didn't.",
    negatedMessage: "Expected <" + (0, _name.default)(enzymeWrapper) + "> html not to match the expected, but it did.",
    contextualInformation: {
      actual: "Actual HTML: " + actualHTML,
      expected: "Expected HTML: " + expectedHTML
    }
  };
}

var _default = (0, _single.default)(toHaveHTML);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvSGF2ZUhUTUwuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX25hbWUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zaW5nbGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwidG9IYXZlSFRNTCIsImVuenltZVdyYXBwZXIiLCJodG1sIiwid3JhcHBlckhUTUwiLCJ1c2VTaW5nbGVRdW90ZXMiLCJzZWFyY2giLCJhY3R1YWxIVE1MIiwicmVwbGFjZSIsImV4cGVjdGVkSFRNTCIsInBhc3MiLCJtZXNzYWdlIiwibmVnYXRlZE1lc3NhZ2UiLCJjb250ZXh0dWFsSW5mb3JtYXRpb24iLCJhY3R1YWwiLCJleHBlY3RlZCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxlQUFELENBQVIsQ0FBbEM7O0FBRUEsSUFBSUMsT0FBTyxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGlCQUFELENBQVIsQ0FBcEM7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVMLElBQUFBLE9BQU8sRUFBRUs7QUFBWCxHQUFyQztBQUF3RDs7QUFTL0YsU0FBU0UsVUFBVCxDQUFvQkMsYUFBcEIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ3ZDLE1BQU1DLFdBQVcsR0FBR0YsYUFBYSxDQUFDQyxJQUFkLEVBQXBCO0FBRUEsTUFBTUUsZUFBZSxHQUFHRixJQUFJLENBQUNHLE1BQUwsQ0FBWSxHQUFaLE1BQXFCLENBQUMsQ0FBOUM7QUFDQSxNQUFNQyxVQUFVLEdBQUdILFdBQVcsQ0FBQ0ksT0FBWixDQUFvQixRQUFwQixFQUE4QkgsZUFBZSxHQUFHLEdBQUgsR0FBUyxHQUF0RCxDQUFuQjtBQUNBLE1BQU1JLFlBQVksR0FBR04sSUFBSSxDQUFDSyxPQUFMLENBQWEsUUFBYixFQUF1QkgsZUFBZSxHQUFHLEdBQUgsR0FBUyxHQUEvQyxFQUFvREcsT0FBcEQsQ0FBNEQsYUFBNUQsRUFBMkUsSUFBM0UsQ0FBckI7QUFDQSxNQUFNRSxJQUFJLEdBQUdILFVBQVUsS0FBS0UsWUFBNUI7QUFDQSxTQUFPO0FBQ0xDLElBQUFBLElBQUksRUFBSkEsSUFESztBQUVMQyxJQUFBQSxPQUFPLGlCQUFlLENBQUMsR0FBR2hCLEtBQUssQ0FBQ0QsT0FBVixFQUFtQlEsYUFBbkIsQ0FBZixpREFGRjtBQUdMVSxJQUFBQSxjQUFjLGlCQUFlLENBQUMsR0FBR2pCLEtBQUssQ0FBQ0QsT0FBVixFQUFtQlEsYUFBbkIsQ0FBZixrREFIVDtBQUlMVyxJQUFBQSxxQkFBcUIsRUFBRTtBQUNyQkMsTUFBQUEsTUFBTSxvQkFBa0JQLFVBREg7QUFFckJRLE1BQUFBLFFBQVEsc0JBQW9CTjtBQUZQO0FBSmxCLEdBQVA7QUFTRDs7QUFFRCxJQUFJTyxRQUFRLEdBQUcsQ0FBQyxHQUFHbEIsT0FBTyxDQUFDSixPQUFaLEVBQXFCTyxVQUFyQixDQUFmOztBQUVBVCxPQUFPLENBQUNFLE9BQVIsR0FBa0JzQixRQUFsQjtBQUNBQyxNQUFNLENBQUN6QixPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25hbWVcIikpO1xuXG52YXIgX3NpbmdsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3NpbmdsZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlULXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuICpcbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9IYXZlSFRNTEFzc2VydGlvblxuICogXG4gKi9cbmZ1bmN0aW9uIHRvSGF2ZUhUTUwoZW56eW1lV3JhcHBlciwgaHRtbCkge1xuICBjb25zdCB3cmFwcGVySFRNTCA9IGVuenltZVdyYXBwZXIuaHRtbCgpOyAvLyBub3JtYWxpemUgcXVvdGVzXG5cbiAgY29uc3QgdXNlU2luZ2xlUXVvdGVzID0gaHRtbC5zZWFyY2goXCInXCIpICE9PSAtMTtcbiAgY29uc3QgYWN0dWFsSFRNTCA9IHdyYXBwZXJIVE1MLnJlcGxhY2UoLyhcInwnKS9nLCB1c2VTaW5nbGVRdW90ZXMgPyBcIidcIiA6ICdcIicpO1xuICBjb25zdCBleHBlY3RlZEhUTUwgPSBodG1sLnJlcGxhY2UoLyhcInwnKS9nLCB1c2VTaW5nbGVRdW90ZXMgPyBcIidcIiA6ICdcIicpLnJlcGxhY2UoLz5bXFxuXFx0IF0rPC9nLCAnPjwnKTtcbiAgY29uc3QgcGFzcyA9IGFjdHVhbEhUTUwgPT09IGV4cGVjdGVkSFRNTDtcbiAgcmV0dXJuIHtcbiAgICBwYXNzLFxuICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCA8JHsoMCwgX25hbWUuZGVmYXVsdCkoZW56eW1lV3JhcHBlcil9PiBodG1sIHRvIG1hdGNoIHRoZSBleHBlY3RlZCwgYnV0IGl0IGRpZG4ndC5gLFxuICAgIG5lZ2F0ZWRNZXNzYWdlOiBgRXhwZWN0ZWQgPCR7KDAsIF9uYW1lLmRlZmF1bHQpKGVuenltZVdyYXBwZXIpfT4gaHRtbCBub3QgdG8gbWF0Y2ggdGhlIGV4cGVjdGVkLCBidXQgaXQgZGlkLmAsXG4gICAgY29udGV4dHVhbEluZm9ybWF0aW9uOiB7XG4gICAgICBhY3R1YWw6IGBBY3R1YWwgSFRNTDogJHthY3R1YWxIVE1MfWAsXG4gICAgICBleHBlY3RlZDogYEV4cGVjdGVkIEhUTUw6ICR7ZXhwZWN0ZWRIVE1MfWBcbiAgICB9XG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfc2luZ2xlLmRlZmF1bHQpKHRvSGF2ZUhUTUwpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==