cff9ede1f676fb5e84a4d6ffead1e2f2
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;

var Parser_1 = require("./Parser");

Object.defineProperty(exports, "Parser", {
  enumerable: true,
  get: function get() {
    return Parser_1.Parser;
  }
});

var domhandler_1 = require("domhandler");

Object.defineProperty(exports, "DomHandler", {
  enumerable: true,
  get: function get() {
    return domhandler_1.DomHandler;
  }
});
Object.defineProperty(exports, "DefaultHandler", {
  enumerable: true,
  get: function get() {
    return domhandler_1.DomHandler;
  }
});

function parseDocument(data, options) {
  var handler = new domhandler_1.DomHandler(undefined, options);
  new Parser_1.Parser(handler, options).end(data);
  return handler.root;
}

exports.parseDocument = parseDocument;

function parseDOM(data, options) {
  return parseDocument(data, options).children;
}

exports.parseDOM = parseDOM;

function createDomStream(cb, options, elementCb) {
  var handler = new domhandler_1.DomHandler(cb, options, elementCb);
  return new Parser_1.Parser(handler, options);
}

exports.createDomStream = createDomStream;

var Tokenizer_1 = require("./Tokenizer");

Object.defineProperty(exports, "Tokenizer", {
  enumerable: true,
  get: function get() {
    return __importDefault(Tokenizer_1).default;
  }
});

var ElementType = __importStar(require("domelementtype"));

exports.ElementType = ElementType;

__exportStar(require("./FeedHandler"), exports);

exports.DomUtils = __importStar(require("domutils"));

var FeedHandler_1 = require("./FeedHandler");

Object.defineProperty(exports, "RssHandler", {
  enumerable: true,
  get: function get() {
    return FeedHandler_1.FeedHandler;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,