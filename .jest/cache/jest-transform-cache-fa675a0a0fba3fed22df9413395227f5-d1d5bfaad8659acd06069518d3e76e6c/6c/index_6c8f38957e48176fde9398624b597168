fab2c79007104d3ffda01dc710eeffd0
var getNative = require('lodash._getnative'),
    isArguments = require('lodash.isarguments'),
    isArray = require('lodash.isarray');

var reIsUint = /^\d+$/;
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeKeys = getNative(Object, 'keys');
var MAX_SAFE_INTEGER = 9007199254740991;

function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

var getLength = baseProperty('length');

function isArrayLike(value) {
  return value != null && isLength(getLength(value));
}

function isIndex(value, length) {
  value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

function shimKeys(object) {
  var props = keysIn(object),
      propsLength = props.length,
      length = propsLength && object.length;
  var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
  var index = -1,
      result = [];

  while (++index < propsLength) {
    var key = props[index];

    if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
      result.push(key);
    }
  }

  return result;
}

function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

var keys = !nativeKeys ? shimKeys : function (object) {
  var Ctor = object == null ? undefined : object.constructor;

  if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && isArrayLike(object)) {
    return shimKeys(object);
  }

  return isObject(object) ? nativeKeys(object) : [];
};

function keysIn(object) {
  if (object == null) {
    return [];
  }

  if (!isObject(object)) {
    object = Object(object);
  }

  var length = object.length;
  length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
  var Ctor = object.constructor,
      index = -1,
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
      result = Array(length),
      skipIndexes = length > 0;

  while (++index < length) {
    result[index] = index + '';
  }

  for (var key in object) {
    if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = keys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,