21175d731a117960b823c4e3b0194ab6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = exports.fieldArrayPropTypes = exports.fieldPropTypes = exports.fieldArrayFieldsPropTypes = exports.fieldArrayMetaPropTypes = exports.fieldMetaPropTypes = exports.fieldInputPropTypes = exports.formPropTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var any = _propTypes["default"].any,
    bool = _propTypes["default"].bool,
    func = _propTypes["default"].func,
    shape = _propTypes["default"].shape,
    string = _propTypes["default"].string,
    oneOfType = _propTypes["default"].oneOfType,
    object = _propTypes["default"].object,
    number = _propTypes["default"].number;
var formPropTypes = {
  anyTouched: bool.isRequired,
  asyncValidating: oneOfType([bool, string]).isRequired,
  dirty: bool.isRequired,
  error: any,
  form: string.isRequired,
  invalid: bool.isRequired,
  initialized: bool.isRequired,
  initialValues: object,
  pristine: bool.isRequired,
  pure: bool.isRequired,
  submitting: bool.isRequired,
  submitAsSideEffect: bool.isRequired,
  submitFailed: bool.isRequired,
  submitSucceeded: bool.isRequired,
  valid: bool.isRequired,
  warning: any,
  array: shape({
    insert: func.isRequired,
    move: func.isRequired,
    pop: func.isRequired,
    push: func.isRequired,
    remove: func.isRequired,
    removeAll: func.isRequired,
    shift: func.isRequired,
    splice: func.isRequired,
    swap: func.isRequired,
    unshift: func.isRequired
  }),
  asyncValidate: func.isRequired,
  autofill: func.isRequired,
  blur: func.isRequired,
  change: func.isRequired,
  clearAsyncError: func.isRequired,
  clearFields: func.isRequired,
  clearSubmitErrors: func.isRequired,
  destroy: func.isRequired,
  dispatch: func.isRequired,
  handleSubmit: func.isRequired,
  initialize: func.isRequired,
  reset: func.isRequired,
  resetSection: func.isRequired,
  touch: func.isRequired,
  submit: func.isRequired,
  untouch: func.isRequired,
  triggerSubmit: bool,
  clearSubmit: func.isRequired
};
exports.formPropTypes = formPropTypes;
var fieldInputPropTypes = {
  checked: bool,
  name: string.isRequired,
  onBlur: func.isRequired,
  onChange: func.isRequired,
  onDragStart: func.isRequired,
  onDrop: func.isRequired,
  onFocus: func.isRequired,
  value: any
};
exports.fieldInputPropTypes = fieldInputPropTypes;
var fieldMetaPropTypes = {
  active: bool.isRequired,
  asyncValidating: bool.isRequired,
  autofilled: bool.isRequired,
  dirty: bool.isRequired,
  dispatch: func.isRequired,
  error: any,
  form: string.isRequired,
  invalid: bool.isRequired,
  pristine: bool.isRequired,
  submitting: bool.isRequired,
  submitFailed: bool.isRequired,
  touched: bool.isRequired,
  valid: bool.isRequired,
  visited: bool.isRequired,
  warning: string
};
exports.fieldMetaPropTypes = fieldMetaPropTypes;
var fieldArrayMetaPropTypes = {
  dirty: bool.isRequired,
  error: any,
  form: string.isRequired,
  invalid: bool.isRequired,
  pristine: bool.isRequired,
  submitFailed: bool,
  submitting: bool,
  valid: bool.isRequired,
  warning: string
};
exports.fieldArrayMetaPropTypes = fieldArrayMetaPropTypes;
var fieldArrayFieldsPropTypes = {
  name: string.isRequired,
  forEach: func.isRequired,
  get: func.isRequired,
  getAll: func.isRequired,
  insert: func.isRequired,
  length: number.isRequired,
  map: func.isRequired,
  move: func.isRequired,
  pop: func.isRequired,
  push: func.isRequired,
  reduce: func.isRequired,
  remove: func.isRequired,
  removeAll: func.isRequired,
  shift: func.isRequired,
  swap: func.isRequired,
  unshift: func.isRequired
};
exports.fieldArrayFieldsPropTypes = fieldArrayFieldsPropTypes;
var fieldPropTypes = {
  input: shape(fieldInputPropTypes).isRequired,
  meta: shape(fieldMetaPropTypes).isRequired
};
exports.fieldPropTypes = fieldPropTypes;
var fieldArrayPropTypes = {
  fields: shape(fieldArrayFieldsPropTypes).isRequired,
  meta: shape(fieldArrayMetaPropTypes).isRequired
};
exports.fieldArrayPropTypes = fieldArrayPropTypes;
var _default = formPropTypes;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,