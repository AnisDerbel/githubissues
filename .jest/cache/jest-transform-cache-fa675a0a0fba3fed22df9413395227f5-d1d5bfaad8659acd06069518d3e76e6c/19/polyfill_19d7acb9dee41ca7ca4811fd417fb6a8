e4960317e252e0b414ae965182e73ddd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var implementation = require('./implementation');

var lacksProperEnumerationOrder = function lacksProperEnumerationOrder() {
  if (!Object.assign) {
    return false;
  }

  var str = 'abcdefghijklmnopqrst';
  var letters = str.split('');
  var map = {};

  for (var i = 0; i < letters.length; ++i) {
    map[letters[i]] = letters[i];
  }

  var obj = (0, _extends2.default)({}, map);
  var actual = '';

  for (var k in obj) {
    actual += k;
  }

  return str !== actual;
};

var assignHasPendingExceptions = function assignHasPendingExceptions() {
  if (!Object.assign || !Object.preventExtensions) {
    return false;
  }

  var thrower = Object.preventExtensions({
    1: 2
  });

  try {
    (0, _extends2.default)(thrower, 'xy');
  } catch (e) {
    return thrower[1] === 'y';
  }

  return false;
};

module.exports = function getPolyfill() {
  if (!Object.assign) {
    return implementation;
  }

  if (lacksProperEnumerationOrder()) {
    return implementation;
  }

  if (assignHasPendingExceptions()) {
    return implementation;
  }

  return Object.assign;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvbHlmaWxsLmpzIl0sIm5hbWVzIjpbImltcGxlbWVudGF0aW9uIiwicmVxdWlyZSIsImxhY2tzUHJvcGVyRW51bWVyYXRpb25PcmRlciIsIk9iamVjdCIsImFzc2lnbiIsInN0ciIsImxldHRlcnMiLCJzcGxpdCIsIm1hcCIsImkiLCJsZW5ndGgiLCJvYmoiLCJhY3R1YWwiLCJrIiwiYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInRocm93ZXIiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldFBvbHlmaWxsIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBSUEsY0FBYyxHQUFHQyxPQUFPLENBQUMsa0JBQUQsQ0FBNUI7O0FBRUEsSUFBSUMsMkJBQTJCLEdBQUcsU0FBOUJBLDJCQUE4QixHQUFZO0FBQzdDLE1BQUksQ0FBQ0MsTUFBTSxDQUFDQyxNQUFaLEVBQW9CO0FBQ25CLFdBQU8sS0FBUDtBQUNBOztBQUtELE1BQUlDLEdBQUcsR0FBRyxzQkFBVjtBQUNBLE1BQUlDLE9BQU8sR0FBR0QsR0FBRyxDQUFDRSxLQUFKLENBQVUsRUFBVixDQUFkO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxPQUFPLENBQUNJLE1BQTVCLEVBQW9DLEVBQUVELENBQXRDLEVBQXlDO0FBQ3hDRCxJQUFBQSxHQUFHLENBQUNGLE9BQU8sQ0FBQ0csQ0FBRCxDQUFSLENBQUgsR0FBa0JILE9BQU8sQ0FBQ0csQ0FBRCxDQUF6QjtBQUNBOztBQUNELE1BQUlFLEdBQUcsR0FBRyx1QkFBYyxFQUFkLEVBQWtCSCxHQUFsQixDQUFWO0FBQ0EsTUFBSUksTUFBTSxHQUFHLEVBQWI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFULElBQWNGLEdBQWQsRUFBbUI7QUFDbEJDLElBQUFBLE1BQU0sSUFBSUMsQ0FBVjtBQUNBOztBQUNELFNBQU9SLEdBQUcsS0FBS08sTUFBZjtBQUNBLENBcEJEOztBQXNCQSxJQUFJRSwwQkFBMEIsR0FBRyxTQUE3QkEsMEJBQTZCLEdBQVk7QUFDNUMsTUFBSSxDQUFDWCxNQUFNLENBQUNDLE1BQVIsSUFBa0IsQ0FBQ0QsTUFBTSxDQUFDWSxpQkFBOUIsRUFBaUQ7QUFDaEQsV0FBTyxLQUFQO0FBQ0E7O0FBS0QsTUFBSUMsT0FBTyxHQUFHYixNQUFNLENBQUNZLGlCQUFQLENBQXlCO0FBQUUsT0FBRztBQUFMLEdBQXpCLENBQWQ7O0FBQ0EsTUFBSTtBQUNILDJCQUFjQyxPQUFkLEVBQXVCLElBQXZCO0FBQ0EsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNYLFdBQU9ELE9BQU8sQ0FBQyxDQUFELENBQVAsS0FBZSxHQUF0QjtBQUNBOztBQUNELFNBQU8sS0FBUDtBQUNBLENBZkQ7O0FBaUJBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxHQUF1QjtBQUN2QyxNQUFJLENBQUNqQixNQUFNLENBQUNDLE1BQVosRUFBb0I7QUFDbkIsV0FBT0osY0FBUDtBQUNBOztBQUNELE1BQUlFLDJCQUEyQixFQUEvQixFQUFtQztBQUNsQyxXQUFPRixjQUFQO0FBQ0E7O0FBQ0QsTUFBSWMsMEJBQTBCLEVBQTlCLEVBQWtDO0FBQ2pDLFdBQU9kLGNBQVA7QUFDQTs7QUFDRCxTQUFPRyxNQUFNLENBQUNDLE1BQWQ7QUFDQSxDQVhEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBsYWNrc1Byb3BlckVudW1lcmF0aW9uT3JkZXIgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHQvKlxuXHQgKiB2OCwgc3BlY2lmaWNhbGx5IGluIG5vZGUgNC54LCBoYXMgYSBidWcgd2l0aCBpbmNvcnJlY3QgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXJcblx0ICogbm90ZTogdGhpcyBkb2VzIG5vdCBkZXRlY3QgdGhlIGJ1ZyB1bmxlc3MgdGhlcmUncyAyMCBjaGFyYWN0ZXJzXG5cdCAqL1xuXHR2YXIgc3RyID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jztcblx0dmFyIGxldHRlcnMgPSBzdHIuc3BsaXQoJycpO1xuXHR2YXIgbWFwID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGV0dGVycy5sZW5ndGg7ICsraSkge1xuXHRcdG1hcFtsZXR0ZXJzW2ldXSA9IGxldHRlcnNbaV07XG5cdH1cblx0dmFyIG9iaiA9IE9iamVjdC5hc3NpZ24oe30sIG1hcCk7XG5cdHZhciBhY3R1YWwgPSAnJztcblx0Zm9yICh2YXIgayBpbiBvYmopIHtcblx0XHRhY3R1YWwgKz0gaztcblx0fVxuXHRyZXR1cm4gc3RyICE9PSBhY3R1YWw7XG59O1xuXG52YXIgYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbiB8fCAhT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8qXG5cdCAqIEZpcmVmb3ggMzcgc3RpbGwgaGFzIFwicGVuZGluZyBleGNlcHRpb25cIiBsb2dpYyBpbiBpdHMgT2JqZWN0LmFzc2lnbiBpbXBsZW1lbnRhdGlvbixcblx0ICogd2hpY2ggaXMgNzIlIHNsb3dlciB0aGFuIG91ciBzaGltLCBhbmQgRmlyZWZveCA0MCdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cblx0ICovXG5cdHZhciB0aHJvd2VyID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHsgMTogMiB9KTtcblx0dHJ5IHtcblx0XHRPYmplY3QuYXNzaWduKHRocm93ZXIsICd4eScpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIHRocm93ZXJbMV0gPT09ICd5Jztcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0aWYgKGxhY2tzUHJvcGVyRW51bWVyYXRpb25PcmRlcigpKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cdGlmIChhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucygpKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cdHJldHVybiBPYmplY3QuYXNzaWduO1xufTtcbiJdfQ==