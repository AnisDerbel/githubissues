d8e566eb34cd18b084639466102dc32e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');

var serialize = require('dom-serializer').default;

var defaultOptions = require('./options').default;

var flattenOptions = require('./options').flatten;

var select = require('cheerio-select-tmp').select;

var parse5 = require('parse5');

var parse = require('./parse');

exports.load = function (content, options, isDocument) {
  if (content === null || content === undefined) {
    throw new Error('cheerio.load() expects a string');
  }

  var Cheerio = require('./cheerio');

  options = (0, _extends2.default)({}, defaultOptions, flattenOptions(options));
  if (isDocument === void 0) isDocument = true;
  var root = parse(content, options, isDocument);

  var initialize = function initialize(selector, context, r, opts) {
    if (!(this instanceof initialize)) {
      return new initialize(selector, context, r, opts);
    }

    opts = (0, _extends2.default)({}, options, opts);
    return Cheerio.call(this, selector, context, r || root, opts);
  };

  initialize.prototype = Object.create(Cheerio.prototype);
  initialize.prototype.constructor = initialize;
  initialize.fn = initialize.prototype;
  initialize.prototype._originalRoot = root;
  (0, _extends2.default)(initialize, exports);
  initialize._root = root;
  initialize._options = options;
  return initialize;
};

function render(that, dom, options) {
  if (!dom) {
    if (that._root && that._root.children) {
      dom = that._root.children;
    } else {
      return '';
    }
  } else if (typeof dom === 'string') {
    dom = select(dom, that._root, options);
  }

  if (options.xmlMode || options._useHtmlParser2) {
    return serialize(dom, options);
  }

  var nodes = 'length' in dom ? dom : [dom];

  for (var index = 0; index < nodes.length; index += 1) {
    if (nodes[index].type === 'root') {
      nodes.splice.apply(nodes, [index, 1].concat(nodes[index].children));
    }
  }

  return parse5.serialize({
    children: nodes
  }, {
    treeAdapter: htmlparser2Adapter
  });
}

exports.html = function (dom, options) {
  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom)) {
    options = dom;
    dom = undefined;
  }

  options = (0, _extends2.default)({}, defaultOptions, this._options, flattenOptions(options || {}));
  return render(this, dom, options);
};

exports.xml = function (dom) {
  var options = (0, _extends2.default)({}, this._options, {
    xmlMode: true
  });
  return render(this, dom, options);
};

exports.text = function (elems) {
  if (!elems) {
    elems = this.root();
  }

  var ret = '';
  var len = elems.length;
  var elem;

  for (var i = 0; i < len; i++) {
    elem = elems[i];
    if (elem.type === 'text') ret += elem.data;else if (elem.children && elem.type !== 'comment' && elem.tagName !== 'script' && elem.tagName !== 'style') {
      ret += exports.text(elem.children);
    }
  }

  return ret;
};

exports.parseHTML = function (data, context, keepScripts) {
  var parsed;

  if (!data || typeof data !== 'string') {
    return null;
  }

  if (typeof context === 'boolean') {
    keepScripts = context;
  }

  parsed = this.load(data, defaultOptions, false);

  if (!keepScripts) {
    parsed('script').remove();
  }

  return parsed.root()[0].children.slice();
};

exports.root = function () {
  return this(this._root);
};

exports.contains = function (container, contained) {
  if (contained === container) {
    return false;
  }

  while (contained && contained !== contained.parent) {
    contained = contained.parent;

    if (contained === container) {
      return true;
    }
  }

  return false;
};

exports.merge = function (arr1, arr2) {
  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {
    return;
  }

  var newLength = arr1.length + arr2.length;

  for (var i = 0; i < arr2.length; i++) {
    arr1[i + arr1.length] = arr2[i];
  }

  arr1.length = newLength;
  return arr1;
};

function isArrayLike(item) {
  if (Array.isArray(item)) {
    return true;
  }

  if (typeof item !== 'object' || !Object.prototype.hasOwnProperty.call(item, 'length') || typeof item.length !== 'number' || item.length < 0) {
    return false;
  }

  for (var i = 0; i < item.length; i++) {
    if (!(i in item)) {
      return false;
    }
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,