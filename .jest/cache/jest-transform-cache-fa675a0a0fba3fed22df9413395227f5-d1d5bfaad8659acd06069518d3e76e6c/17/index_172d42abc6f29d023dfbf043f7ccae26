9b3288c07f9d3a03d2ec964cc5176697
'use strict';

var callBound = require('call-bind/callBound');

var hasSymbols = require('has-symbols')();

var hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';
var has;
var $exec;
var isRegexMarker;
var badStringifier;

if (hasToStringTag) {
  has = callBound('Object.prototype.hasOwnProperty');
  $exec = callBound('RegExp.prototype.exec');
  isRegexMarker = {};

  var throwRegexMarker = function throwRegexMarker() {
    throw isRegexMarker;
  };

  badStringifier = {
    toString: throwRegexMarker,
    valueOf: throwRegexMarker
  };

  if (typeof Symbol.toPrimitive === 'symbol') {
    badStringifier[Symbol.toPrimitive] = throwRegexMarker;
  }
}

var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';
module.exports = hasToStringTag ? function isRegex(value) {
  if (!value || typeof value !== 'object') {
    return false;
  }

  var descriptor = gOPD(value, 'lastIndex');
  var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');

  if (!hasLastIndexDataProperty) {
    return false;
  }

  try {
    $exec(value, badStringifier);
  } catch (e) {
    return e === isRegexMarker;
  }
} : function isRegex(value) {
  if (!value || typeof value !== 'object' && typeof value !== 'function') {
    return false;
  }

  return $toString(value) === regexClass;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNhbGxCb3VuZCIsInJlcXVpcmUiLCJoYXNTeW1ib2xzIiwiaGFzVG9TdHJpbmdUYWciLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImhhcyIsIiRleGVjIiwiaXNSZWdleE1hcmtlciIsImJhZFN0cmluZ2lmaWVyIiwidGhyb3dSZWdleE1hcmtlciIsInRvU3RyaW5nIiwidmFsdWVPZiIsInRvUHJpbWl0aXZlIiwiJHRvU3RyaW5nIiwiZ09QRCIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJlZ2V4Q2xhc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNSZWdleCIsInZhbHVlIiwiZGVzY3JpcHRvciIsImhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSIsImUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLHFCQUFELENBQXZCOztBQUNBLElBQUlDLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBUCxFQUFqQjs7QUFDQSxJQUFJRSxjQUFjLEdBQUdELFVBQVUsSUFBSSxPQUFPRSxNQUFNLENBQUNDLFdBQWQsS0FBOEIsUUFBakU7QUFDQSxJQUFJQyxHQUFKO0FBQ0EsSUFBSUMsS0FBSjtBQUNBLElBQUlDLGFBQUo7QUFDQSxJQUFJQyxjQUFKOztBQUVBLElBQUlOLGNBQUosRUFBb0I7QUFDbkJHLEVBQUFBLEdBQUcsR0FBR04sU0FBUyxDQUFDLGlDQUFELENBQWY7QUFDQU8sRUFBQUEsS0FBSyxHQUFHUCxTQUFTLENBQUMsdUJBQUQsQ0FBakI7QUFDQVEsRUFBQUEsYUFBYSxHQUFHLEVBQWhCOztBQUVBLE1BQUlFLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsR0FBWTtBQUNsQyxVQUFNRixhQUFOO0FBQ0EsR0FGRDs7QUFHQUMsRUFBQUEsY0FBYyxHQUFHO0FBQ2hCRSxJQUFBQSxRQUFRLEVBQUVELGdCQURNO0FBRWhCRSxJQUFBQSxPQUFPLEVBQUVGO0FBRk8sR0FBakI7O0FBS0EsTUFBSSxPQUFPTixNQUFNLENBQUNTLFdBQWQsS0FBOEIsUUFBbEMsRUFBNEM7QUFDM0NKLElBQUFBLGNBQWMsQ0FBQ0wsTUFBTSxDQUFDUyxXQUFSLENBQWQsR0FBcUNILGdCQUFyQztBQUNBO0FBQ0Q7O0FBRUQsSUFBSUksU0FBUyxHQUFHZCxTQUFTLENBQUMsMkJBQUQsQ0FBekI7QUFDQSxJQUFJZSxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0Msd0JBQWxCO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLGlCQUFqQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixjQUFjLEdBRTVCLFNBQVNrQixPQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUN6QixNQUFJLENBQUNBLEtBQUQsSUFBVSxPQUFPQSxLQUFQLEtBQWlCLFFBQS9CLEVBQXlDO0FBQ3hDLFdBQU8sS0FBUDtBQUNBOztBQUVELE1BQUlDLFVBQVUsR0FBR1IsSUFBSSxDQUFDTyxLQUFELEVBQVEsV0FBUixDQUFyQjtBQUNBLE1BQUlFLHdCQUF3QixHQUFHRCxVQUFVLElBQUlqQixHQUFHLENBQUNpQixVQUFELEVBQWEsT0FBYixDQUFoRDs7QUFDQSxNQUFJLENBQUNDLHdCQUFMLEVBQStCO0FBQzlCLFdBQU8sS0FBUDtBQUNBOztBQUVELE1BQUk7QUFDSGpCLElBQUFBLEtBQUssQ0FBQ2UsS0FBRCxFQUFRYixjQUFSLENBQUw7QUFDQSxHQUZELENBRUUsT0FBT2dCLENBQVAsRUFBVTtBQUNYLFdBQU9BLENBQUMsS0FBS2pCLGFBQWI7QUFDQTtBQUNELENBbEI2QixHQW1CNUIsU0FBU2EsT0FBVCxDQUFpQkMsS0FBakIsRUFBd0I7QUFFekIsTUFBSSxDQUFDQSxLQUFELElBQVcsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QixPQUFPQSxLQUFQLEtBQWlCLFVBQTdELEVBQTBFO0FBQ3pFLFdBQU8sS0FBUDtBQUNBOztBQUVELFNBQU9SLFNBQVMsQ0FBQ1EsS0FBRCxDQUFULEtBQXFCSixVQUE1QjtBQUNBLENBMUJGIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSBoYXNTeW1ib2xzICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIGhhcztcbnZhciAkZXhlYztcbnZhciBpc1JlZ2V4TWFya2VyO1xudmFyIGJhZFN0cmluZ2lmaWVyO1xuXG5pZiAoaGFzVG9TdHJpbmdUYWcpIHtcblx0aGFzID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5Jyk7XG5cdCRleGVjID0gY2FsbEJvdW5kKCdSZWdFeHAucHJvdG90eXBlLmV4ZWMnKTtcblx0aXNSZWdleE1hcmtlciA9IHt9O1xuXG5cdHZhciB0aHJvd1JlZ2V4TWFya2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdHRocm93IGlzUmVnZXhNYXJrZXI7XG5cdH07XG5cdGJhZFN0cmluZ2lmaWVyID0ge1xuXHRcdHRvU3RyaW5nOiB0aHJvd1JlZ2V4TWFya2VyLFxuXHRcdHZhbHVlT2Y6IHRocm93UmVnZXhNYXJrZXJcblx0fTtcblxuXHRpZiAodHlwZW9mIFN5bWJvbC50b1ByaW1pdGl2ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHRiYWRTdHJpbmdpZmllcltTeW1ib2wudG9QcmltaXRpdmVdID0gdGhyb3dSZWdleE1hcmtlcjtcblx0fVxufVxuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1RvU3RyaW5nVGFnXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHQ/IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0XHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQodmFsdWUsICdsYXN0SW5kZXgnKTtcblx0XHR2YXIgaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJyk7XG5cdFx0aWYgKCFoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0JGV4ZWModmFsdWUsIGJhZFN0cmluZ2lmaWVyKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZSA9PT0gaXNSZWdleE1hcmtlcjtcblx0XHR9XG5cdH1cblx0OiBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdFx0Ly8gSW4gb2xkZXIgYnJvd3NlcnMsIHR5cGVvZiByZWdleCBpbmNvcnJlY3RseSByZXR1cm5zICdmdW5jdGlvbidcblx0XHRpZiAoIXZhbHVlIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gJHRvU3RyaW5nKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fTtcbiJdfQ==