26fb2adde378d98e5f6b0d5dcb0b03e2
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isPrototype = require('./_isPrototype'),
    isTypedArray = require('./isTypedArray');

var mapTag = '[object Map]',
    setTag = '[object Set]';
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;

function isEmpty(value) {
  if (value == null) {
    return true;
  }

  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }

  var tag = getTag(value);

  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }

  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }

  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }

  return true;
}

module.exports = isEmpty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzRW1wdHkuanMiXSwibmFtZXMiOlsiYmFzZUtleXMiLCJyZXF1aXJlIiwiZ2V0VGFnIiwiaXNBcmd1bWVudHMiLCJpc0FycmF5IiwiaXNBcnJheUxpa2UiLCJpc0J1ZmZlciIsImlzUHJvdG90eXBlIiwiaXNUeXBlZEFycmF5IiwibWFwVGFnIiwic2V0VGFnIiwib2JqZWN0UHJvdG8iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImlzRW1wdHkiLCJ2YWx1ZSIsInNwbGljZSIsImxlbmd0aCIsInRhZyIsInNpemUiLCJrZXkiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF0QjtBQUFBLElBQ0lDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FEcEI7QUFBQSxJQUVJRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBRnpCO0FBQUEsSUFHSUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsV0FBRCxDQUhyQjtBQUFBLElBSUlJLFdBQVcsR0FBR0osT0FBTyxDQUFDLGVBQUQsQ0FKekI7QUFBQSxJQUtJSyxRQUFRLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBTHRCO0FBQUEsSUFNSU0sV0FBVyxHQUFHTixPQUFPLENBQUMsZ0JBQUQsQ0FOekI7QUFBQSxJQU9JTyxZQUFZLEdBQUdQLE9BQU8sQ0FBQyxnQkFBRCxDQVAxQjs7QUFVQSxJQUFJUSxNQUFNLEdBQUcsY0FBYjtBQUFBLElBQ0lDLE1BQU0sR0FBRyxjQURiO0FBSUEsSUFBSUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLFNBQXpCO0FBR0EsSUFBSUMsY0FBYyxHQUFHSCxXQUFXLENBQUNHLGNBQWpDOztBQW1DQSxTQUFTQyxPQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUN0QixNQUFJQSxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNqQixXQUFPLElBQVA7QUFDRDs7QUFDRCxNQUFJWCxXQUFXLENBQUNXLEtBQUQsQ0FBWCxLQUNDWixPQUFPLENBQUNZLEtBQUQsQ0FBUCxJQUFrQixPQUFPQSxLQUFQLElBQWdCLFFBQWxDLElBQThDLE9BQU9BLEtBQUssQ0FBQ0MsTUFBYixJQUF1QixVQUFyRSxJQUNDWCxRQUFRLENBQUNVLEtBQUQsQ0FEVCxJQUNvQlIsWUFBWSxDQUFDUSxLQUFELENBRGhDLElBQzJDYixXQUFXLENBQUNhLEtBQUQsQ0FGdkQsQ0FBSixFQUVxRTtBQUNuRSxXQUFPLENBQUNBLEtBQUssQ0FBQ0UsTUFBZDtBQUNEOztBQUNELE1BQUlDLEdBQUcsR0FBR2pCLE1BQU0sQ0FBQ2MsS0FBRCxDQUFoQjs7QUFDQSxNQUFJRyxHQUFHLElBQUlWLE1BQVAsSUFBaUJVLEdBQUcsSUFBSVQsTUFBNUIsRUFBb0M7QUFDbEMsV0FBTyxDQUFDTSxLQUFLLENBQUNJLElBQWQ7QUFDRDs7QUFDRCxNQUFJYixXQUFXLENBQUNTLEtBQUQsQ0FBZixFQUF3QjtBQUN0QixXQUFPLENBQUNoQixRQUFRLENBQUNnQixLQUFELENBQVIsQ0FBZ0JFLE1BQXhCO0FBQ0Q7O0FBQ0QsT0FBSyxJQUFJRyxHQUFULElBQWdCTCxLQUFoQixFQUF1QjtBQUNyQixRQUFJRixjQUFjLENBQUNRLElBQWYsQ0FBb0JOLEtBQXBCLEVBQTJCSyxHQUEzQixDQUFKLEVBQXFDO0FBQ25DLGFBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTyxJQUFQO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlQsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gKlxuICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gKiBwcm9wZXJ0aWVzLlxuICpcbiAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0VtcHR5KG51bGwpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSh0cnVlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gIH1cbiAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VtcHR5O1xuIl19