{"version":3,"sources":["protectAssertion.js"],"names":["Object","defineProperty","exports","value","default","heuristicCheck","arg","shouldBeEmptyEnzyme","find","length","e","ERROR_MESSAGE","assertion","name","protectAssertion","assertionWrapper","enzymeWrapper","Error","args","call","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAWA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAI;AACF,QAAMC,mBAAmB,GAAGD,GAAG,CAACE,IAAJ,CAAS,UAAT,CAA5B;AACA,WAAOD,mBAAmB,CAACE,MAApB,KAA+B,CAAtC;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,SAAS;AAAA,iCAA0BA,SAAS,CAACC,IAApC;AAAA,CAA/B;;AAKA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAF,SAAS;AAAA,SAAI,SAASG,gBAAT,CAA0BC,aAA1B,EAAkD;AACtF,QAAIX,cAAc,CAACW,aAAD,CAAd,KAAkC,KAAtC,EAA6C;AAC3C,YAAM,IAAIC,KAAJ,CAAUN,aAAa,CAACC,SAAD,CAAvB,CAAN;AACD;;AAHqF,sCAANM,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAOtF,WAAON,SAAS,CAACO,IAAV,OAAAP,SAAS,GAAM,IAAN,EAAYI,aAAZ,SAA8BE,IAA9B,EAAhB;AACD,GARiC;AAAA,CAAlC;;AAUA,IAAIE,QAAQ,GAAGN,gBAAf;AACAZ,OAAO,CAACE,OAAR,GAAkBgB,QAAlB;AACAC,MAAM,CAACnB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * @function protectAssertion\n *\n * This should wrap every assertion this library outputs.\n * It is intended to help with developers to understand errors\n * when an enzyme-matchers assertion is used with a non-enzyme object.\n *\n * \n */\nfunction heuristicCheck(arg) {\n  try {\n    const shouldBeEmptyEnzyme = arg.find('asjdfsaf');\n    return shouldBeEmptyEnzyme.length === 0;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst ERROR_MESSAGE = assertion => `The test assertion ${assertion.name} is part of the enzyme-matcher suite.\nIt appears you tried calling this matcher with a non-enzyme object.\nThis assertion must be called against a shallow, mount, or render-ed react component.\n`;\n\nconst protectAssertion = assertion => function assertionWrapper(enzymeWrapper, ...args) {\n  if (heuristicCheck(enzymeWrapper) === false) {\n    throw new Error(ERROR_MESSAGE(assertion));\n  } // Using `.call` to make sure we bind the runtime environment into the Matcher\n  // so we can use asymmetric equalities.\n\n\n  return assertion.call(this, enzymeWrapper, ...args);\n};\n\nvar _default = protectAssertion;\nexports.default = _default;\nmodule.exports = exports.default;"]}