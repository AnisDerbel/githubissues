c3ff4b690c29474c0581d8bf3f9f4307
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.takeMaybe = exports.take = exports.spawn = exports.setContext = exports.select = exports.race = exports.putResolve = exports.put = exports.join = exports.fork = exports.getContext = exports.flush = exports.cps = exports.cancelled = exports.cancel = exports.call = exports.apply = exports.actionChannel = void 0;

var effects = _interopRequireWildcard(require("redux-saga/effects"));



function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

var actionChannel = (0, require("./helpers").wrapEffectCreator)(effects.actionChannel);
exports.actionChannel = actionChannel;
var apply = (0, require("./helpers").wrapEffectCreator)(effects.apply);
exports.apply = apply;
var call = (0, require("./helpers").wrapEffectCreator)(effects.call);
exports.call = call;
var cancel = (0, require("./helpers").wrapEffectCreator)(effects.cancel);
exports.cancel = cancel;
var cancelled = (0, require("./helpers").wrapEffectCreator)(effects.cancelled);
exports.cancelled = cancelled;
var cps = (0, require("./helpers").wrapEffectCreator)(effects.cps);
exports.cps = cps;
var flush = (0, require("./helpers").wrapEffectCreator)(effects.flush);
exports.flush = flush;
var getContext = (0, require("./helpers").wrapEffectCreator)(effects.getContext);
exports.getContext = getContext;
var fork = (0, require("./helpers").wrapEffectCreator)(effects.fork);
exports.fork = fork;
var join = (0, require("./helpers").wrapEffectCreator)(effects.join);
exports.join = join;
var put = (0, require("./helpers").wrapEffectCreator)(effects.put);
exports.put = put;
var putResolve = (0, require("./helpers").wrapEffectCreator)(effects.putResolve);
exports.putResolve = putResolve;
var race = (0, require("./helpers").wrapEffectCreator)(effects.race);
exports.race = race;
var select = (0, require("./helpers").wrapEffectCreator)(effects.select);
exports.select = select;
var setContext = (0, require("./helpers").wrapEffectCreator)(effects.setContext);
exports.setContext = setContext;
var spawn = (0, require("./helpers").wrapEffectCreator)(effects.spawn);
exports.spawn = spawn;
var take = (0, require("./helpers").wrapEffectCreator)(effects.take);
exports.take = take;
var takeMaybe = (0, require("./helpers").wrapEffectCreator)(effects.takeMaybe);
exports.takeMaybe = takeMaybe;
actionChannel.like = (0, require("./helpers").like)('actionChannel');

actionChannel.pattern = function (pattern) {return actionChannel.like({
    pattern: pattern });};


apply.like = (0, require("./helpers").like)('call');

apply.fn = function (fn) {return apply.like({
    fn: fn });};


call.like = (0, require("./helpers").like)('call');

call.fn = function (fn) {return call.like({
    fn: fn });};


cps.like = (0, require("./helpers").like)('cps');

cps.fn = function (fn) {return cps.like({
    fn: fn });};


fork.like = (0, require("./helpers").like)('fork');

fork.fn = function (fn) {return fork.like({
    fn: fn });};


put.like = (0, require("./helpers").like)('put');

put.actionType = function (type) {return put.like({
    action: {
      type: type } });};



putResolve.like = (0, require("./helpers").like)('put', {
  resolve: true });


putResolve.actionType = function (type) {return putResolve.like({
    action: {
      type: type } });};



select.like = (0, require("./helpers").like)('select');

select.selector = function (selector) {return select.like({
    selector: selector });};


spawn.like = (0, require("./helpers").like)('spawn', {
  detached: true });


spawn.fn = function (fn) {return spawn.like({
    fn: fn });};