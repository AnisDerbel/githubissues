e1862551b7fe8911cac95905c9d50adc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileGeneralSelector = void 0;

var attributes_1 = require("./attributes");

var pseudo_selectors_1 = require("./pseudo-selectors");

function compileGeneralSelector(next, selector, options, context, compileToken) {
  var adapter = options.adapter,
      equals = options.equals;

  switch (selector.type) {
    case "pseudo-element":
      throw new Error("Pseudo-elements are not supported by css-select");

    case "attribute":
      if (options.strict && (selector.ignoreCase || selector.action === "not")) {
        throw new Error("Unsupported attribute selector");
      }

      return attributes_1.attributeRules[selector.action](next, selector, options);

    case "pseudo":
      return pseudo_selectors_1.compilePseudoSelector(next, selector, options, context, compileToken);

    case "tag":
      return function tag(elem) {
        return adapter.getName(elem) === selector.name && next(elem);
      };

    case "descendant":
      if (options.cacheResults === false || typeof WeakSet === "undefined") {
        return function descendant(elem) {
          var current = elem;

          while (current = adapter.getParent(current)) {
            if (adapter.isTag(current) && next(current)) {
              return true;
            }
          }

          return false;
        };
      }

      var isFalseCache_1 = new WeakSet();
      return function cachedDescendant(elem) {
        var current = elem;

        while (current = adapter.getParent(current)) {
          if (!isFalseCache_1.has(current)) {
            if (adapter.isTag(current) && next(current)) {
              return true;
            }

            isFalseCache_1.add(current);
          }
        }

        return false;
      };

    case "_flexibleDescendant":
      return function flexibleDescendant(elem) {
        var current = elem;

        do {
          if (adapter.isTag(current) && next(current)) return true;
        } while (current = adapter.getParent(current));

        return false;
      };

    case "parent":
      if (options.strict) {
        throw new Error("Parent selector isn't part of CSS3");
      }

      return function parent(elem) {
        return adapter.getChildren(elem).some(function (elem) {
          return adapter.isTag(elem) && next(elem);
        });
      };

    case "child":
      return function child(elem) {
        var parent = adapter.getParent(elem);
        return !!parent && adapter.isTag(parent) && next(parent);
      };

    case "sibling":
      return function sibling(elem) {
        var siblings = adapter.getSiblings(elem);

        for (var i = 0; i < siblings.length; i++) {
          var currentSibling = siblings[i];
          if (equals(elem, currentSibling)) break;

          if (adapter.isTag(currentSibling) && next(currentSibling)) {
            return true;
          }
        }

        return false;
      };

    case "adjacent":
      return function adjacent(elem) {
        var siblings = adapter.getSiblings(elem);
        var lastElement;

        for (var i = 0; i < siblings.length; i++) {
          var currentSibling = siblings[i];
          if (equals(elem, currentSibling)) break;

          if (adapter.isTag(currentSibling)) {
            lastElement = currentSibling;
          }
        }

        return !!lastElement && next(lastElement);
      };

    case "universal":
      return next;
  }
}

exports.compileGeneralSelector = compileGeneralSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYWwuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21waWxlR2VuZXJhbFNlbGVjdG9yIiwiYXR0cmlidXRlc18xIiwicmVxdWlyZSIsInBzZXVkb19zZWxlY3RvcnNfMSIsIm5leHQiLCJzZWxlY3RvciIsIm9wdGlvbnMiLCJjb250ZXh0IiwiY29tcGlsZVRva2VuIiwiYWRhcHRlciIsImVxdWFscyIsInR5cGUiLCJFcnJvciIsInN0cmljdCIsImlnbm9yZUNhc2UiLCJhY3Rpb24iLCJhdHRyaWJ1dGVSdWxlcyIsImNvbXBpbGVQc2V1ZG9TZWxlY3RvciIsInRhZyIsImVsZW0iLCJnZXROYW1lIiwibmFtZSIsImNhY2hlUmVzdWx0cyIsIldlYWtTZXQiLCJkZXNjZW5kYW50IiwiY3VycmVudCIsImdldFBhcmVudCIsImlzVGFnIiwiaXNGYWxzZUNhY2hlXzEiLCJjYWNoZWREZXNjZW5kYW50IiwiaGFzIiwiYWRkIiwiZmxleGlibGVEZXNjZW5kYW50IiwicGFyZW50IiwiZ2V0Q2hpbGRyZW4iLCJzb21lIiwiY2hpbGQiLCJzaWJsaW5nIiwic2libGluZ3MiLCJnZXRTaWJsaW5ncyIsImkiLCJsZW5ndGgiLCJjdXJyZW50U2libGluZyIsImFkamFjZW50IiwibGFzdEVsZW1lbnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDO0FBQ0FELE9BQU8sQ0FBQ0Usc0JBQVIsR0FBaUMsS0FBSyxDQUF0Qzs7QUFDQSxJQUFJQyxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQTFCOztBQUNBLElBQUlDLGtCQUFrQixHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FBaEM7O0FBSUEsU0FBU0Ysc0JBQVQsQ0FBZ0NJLElBQWhDLEVBQXNDQyxRQUF0QyxFQUFn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QUFQO0FBQ0g7QUFDSjs7QUFDRCxlQUFPLEtBQVA7QUFDSCxPQVhEOztBQVlKLFNBQUssVUFBTDtBQUNJLGFBQU8sU0FBU0MsUUFBVCxDQUFrQnhCLElBQWxCLEVBQXdCO0FBQzNCLFlBQUltQixRQUFRLEdBQUc3QixPQUFPLENBQUM4QixXQUFSLENBQW9CcEIsSUFBcEIsQ0FBZjtBQUNBLFlBQUl5QixXQUFKOztBQUNBLGFBQUssSUFBSUosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsUUFBUSxDQUFDRyxNQUE3QixFQUFxQ0QsQ0FBQyxFQUF0QyxFQUEwQztBQUN0QyxjQUFJRSxjQUFjLEdBQUdKLFFBQVEsQ0FBQ0UsQ0FBRCxDQUE3QjtBQUNBLGNBQUk5QixNQUFNLENBQUNTLElBQUQsRUFBT3VCLGNBQVAsQ0FBVixFQUNJOztBQUNKLGNBQUlqQyxPQUFPLENBQUNrQixLQUFSLENBQWNlLGNBQWQsQ0FBSixFQUFtQztBQUMvQkUsWUFBQUEsV0FBVyxHQUFHRixjQUFkO0FBQ0g7QUFDSjs7QUFDRCxlQUFPLENBQUMsQ0FBQ0UsV0FBRixJQUFpQnhDLElBQUksQ0FBQ3dDLFdBQUQsQ0FBNUI7QUFDSCxPQVpEOztBQWFKLFNBQUssV0FBTDtBQUNJLGFBQU94QyxJQUFQO0FBakdSO0FBbUdIOztBQUNETixPQUFPLENBQUNFLHNCQUFSLEdBQWlDQSxzQkFBakMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcGlsZUdlbmVyYWxTZWxlY3RvciA9IHZvaWQgMDtcbnZhciBhdHRyaWJ1dGVzXzEgPSByZXF1aXJlKFwiLi9hdHRyaWJ1dGVzXCIpO1xudmFyIHBzZXVkb19zZWxlY3RvcnNfMSA9IHJlcXVpcmUoXCIuL3BzZXVkby1zZWxlY3RvcnNcIik7XG4vKlxuICogQWxsIGF2YWlsYWJsZSBydWxlc1xuICovXG5mdW5jdGlvbiBjb21waWxlR2VuZXJhbFNlbGVjdG9yKG5leHQsIHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pIHtcbiAgICB2YXIgYWRhcHRlciA9IG9wdGlvbnMuYWRhcHRlciwgZXF1YWxzID0gb3B0aW9ucy5lcXVhbHM7XG4gICAgc3dpdGNoIChzZWxlY3Rvci50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJwc2V1ZG8tZWxlbWVudFwiOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHNldWRvLWVsZW1lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IGNzcy1zZWxlY3RcIik7XG4gICAgICAgIGNhc2UgXCJhdHRyaWJ1dGVcIjpcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0cmljdCAmJlxuICAgICAgICAgICAgICAgIChzZWxlY3Rvci5pZ25vcmVDYXNlIHx8IHNlbGVjdG9yLmFjdGlvbiA9PT0gXCJub3RcIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhdHRyaWJ1dGUgc2VsZWN0b3JcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlc18xLmF0dHJpYnV0ZVJ1bGVzW3NlbGVjdG9yLmFjdGlvbl0obmV4dCwgc2VsZWN0b3IsIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwicHNldWRvXCI6XG4gICAgICAgICAgICByZXR1cm4gcHNldWRvX3NlbGVjdG9yc18xLmNvbXBpbGVQc2V1ZG9TZWxlY3RvcihuZXh0LCBzZWxlY3Rvciwgb3B0aW9ucywgY29udGV4dCwgY29tcGlsZVRva2VuKTtcbiAgICAgICAgLy8gVGFnc1xuICAgICAgICBjYXNlIFwidGFnXCI6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGFnKGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRhcHRlci5nZXROYW1lKGVsZW0pID09PSBzZWxlY3Rvci5uYW1lICYmIG5leHQoZWxlbSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAvLyBUcmF2ZXJzYWxcbiAgICAgICAgY2FzZSBcImRlc2NlbmRhbnRcIjpcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNhY2hlUmVzdWx0cyA9PT0gZmFsc2UgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgV2Vha1NldCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXNjZW5kYW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBlbGVtO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChjdXJyZW50KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnQpICYmIG5leHQoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYEVsZW1lbnROb2RlYCBpcyBub3QgZXh0ZW5kaW5nIG9iamVjdFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgICB2YXIgaXNGYWxzZUNhY2hlXzEgPSBuZXcgV2Vha1NldCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZERlc2NlbmRhbnQoZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gZWxlbTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChjdXJyZW50KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0ZhbHNlQ2FjaGVfMS5oYXMoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnQpICYmIG5leHQoY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRmFsc2VDYWNoZV8xLmFkZChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwiX2ZsZXhpYmxlRGVzY2VuZGFudFwiOlxuICAgICAgICAgICAgLy8gSW5jbHVkZSBlbGVtZW50IGl0c2VsZiwgb25seSB1c2VkIHdoaWxlIHF1ZXJ5aW5nIGFuIGFycmF5XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZmxleGlibGVEZXNjZW5kYW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IGVsZW07XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhjdXJyZW50KSAmJiBuZXh0KGN1cnJlbnQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChjdXJyZW50KSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJwYXJlbnRcIjpcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0cmljdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcmVudCBzZWxlY3RvciBpc24ndCBwYXJ0IG9mIENTUzNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGFyZW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRhcHRlclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Q2hpbGRyZW4oZWxlbSlcbiAgICAgICAgICAgICAgICAgICAgLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGFkYXB0ZXIuaXNUYWcoZWxlbSkgJiYgbmV4dChlbGVtKTsgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwiY2hpbGRcIjpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBjaGlsZChlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGFkYXB0ZXIuZ2V0UGFyZW50KGVsZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXBhcmVudCAmJiBhZGFwdGVyLmlzVGFnKHBhcmVudCkgJiYgbmV4dChwYXJlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcInNpYmxpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBzaWJsaW5nKGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2libGluZ3MgPSBhZGFwdGVyLmdldFNpYmxpbmdzKGVsZW0pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgY3VycmVudFNpYmxpbmcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnRTaWJsaW5nKSAmJiBuZXh0KGN1cnJlbnRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImFkamFjZW50XCI6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gYWRqYWNlbnQoZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RFbGVtZW50O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgY3VycmVudFNpYmxpbmcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBjdXJyZW50U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISFsYXN0RWxlbWVudCAmJiBuZXh0KGxhc3RFbGVtZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJ1bml2ZXJzYWxcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbn1cbmV4cG9ydHMuY29tcGlsZUdlbmVyYWxTZWxlY3RvciA9IGNvbXBpbGVHZW5lcmFsU2VsZWN0b3I7XG4iXX0=