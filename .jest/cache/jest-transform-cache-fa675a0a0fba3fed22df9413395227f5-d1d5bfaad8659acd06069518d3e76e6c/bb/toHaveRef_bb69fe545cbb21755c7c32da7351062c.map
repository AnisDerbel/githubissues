{"version":3,"sources":["toHaveRef.js"],"names":["Object","defineProperty","exports","value","default","_name","_interopRequireDefault","require","_single","obj","__esModule","toHaveRef","enzymeWrapper","refName","ref","Error","node","pass","message","negatedMessage","contextualInformation","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAlC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAS/F,SAASE,SAAT,CAAmBC,aAAnB,EAAkCC,OAAlC,EAA2C;AACzC,MAAI,OAAOD,aAAa,CAACE,GAArB,KAA6B,UAAjC,EAA6C;AAC3C,UAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAED,MAAMC,IAAI,GAAGJ,aAAa,CAACE,GAAd,CAAkBD,OAAlB,CAAb;AACA,MAAMI,IAAI,GAAG,CAAC,CAACD,IAAf;AACA,SAAO;AACLC,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,OAAO,sCAAmCL,OAAnC,eAAmD,CAAC,GAAGR,KAAK,CAACD,OAAV,EAAmBQ,aAAnB,CAAnD,mBAFF;AAGLO,IAAAA,cAAc,0CAAuCN,OAAvC,eAAuD,CAAC,GAAGR,KAAK,CAACD,OAAV,EAAmBQ,aAAnB,CAAvD,gBAHT;AAILQ,IAAAA,qBAAqB,EAAE;AAJlB,GAAP;AAMD;;AAED,IAAIC,QAAQ,GAAG,CAAC,GAAGb,OAAO,CAACJ,OAAZ,EAAqBO,SAArB,CAAf;;AAEAT,OAAO,CAACE,OAAR,GAAkBiB,QAAlB;AACAC,MAAM,CAACpB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _name = _interopRequireDefault(require(\"../utils/name\"));\n\nvar _single = _interopRequireDefault(require(\"../utils/single\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This source code is licensed under the MIT-style license found in the\n * LICENSE file in the root directory of this source tree. *\n *\n * @providesModule toHaveRefAssertion\n * \n */\nfunction toHaveRef(enzymeWrapper, refName) {\n  if (typeof enzymeWrapper.ref !== 'function') {\n    throw new Error('EnzymeMatchers::toHaveRef can not be called on a shallow wrapper');\n  }\n\n  const node = enzymeWrapper.ref(refName);\n  const pass = !!node;\n  return {\n    pass,\n    message: `Expected to find a ref named \"${refName}\" on <${(0, _name.default)(enzymeWrapper)}>, but didn't.`,\n    negatedMessage: `Expected not to find a ref named \"${refName}\" on <${(0, _name.default)(enzymeWrapper)}>, but did.`,\n    contextualInformation: {}\n  };\n}\n\nvar _default = (0, _single.default)(toHaveRef);\n\nexports.default = _default;\nmodule.exports = exports.default;"]}