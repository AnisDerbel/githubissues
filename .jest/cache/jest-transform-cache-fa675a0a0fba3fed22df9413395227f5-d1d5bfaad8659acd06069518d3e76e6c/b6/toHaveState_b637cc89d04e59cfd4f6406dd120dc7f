652764e11c259abf6f8baed03857c1b4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _name = _interopRequireDefault(require("../utils/name"));

var _reduceAssertionObject = _interopRequireDefault(require("../utils/reduceAssertionObject"));

var _stringify = _interopRequireDefault(require("../utils/stringify"));

var _single = _interopRequireDefault(require("../utils/single"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function toHaveState(enzymeWrapper, stateKey, stateValue) {
  var state = enzymeWrapper.state();
  var wrapperName = (0, _name.default)(enzymeWrapper);

  if (stateValue === undefined && arguments.length === 2 && typeof stateKey !== 'object' && Array.isArray(stateKey) === false) {
    return {
      pass: state.hasOwnProperty(stateKey),
      message: "Expected the state for <" + wrapperName + "> to contain the key \"" + stateKey + "\", but it did not.",
      negatedMessage: "Expected the state for <" + wrapperName + "> to not contain the key \"" + stateKey + "\", but it did.",
      contextualInformation: {
        actual: "Actual state: " + (0, _stringify.default)((0, _defineProperty2.default)({}, stateKey, state[stateKey]))
      }
    };
  }

  var results = _reduceAssertionObject.default.call(this, state, stateKey, stateValue);

  var contextualInformation = {
    actual: "Actual state: " + (0, _stringify.default)(results.actual),
    expected: "Expected state: " + (0, _stringify.default)(results.expected)
  };

  if (results.missingKeys.length) {
    var missingKeys = results.missingKeys.join(', ');

    var _key_2 = results.missingKeys.length === 1 ? 'key' : 'keys';

    return {
      pass: false,
      message: "Expected the state for <" + wrapperName + "> to contain the " + _key_2 + " \"" + missingKeys + "\", but it did not.",
      negatedMessage: "Expected the state for <" + wrapperName + "> to not contain the " + _key_2 + " \"" + missingKeys + "\", but it did.",
      contextualInformation: contextualInformation
    };
  }

  var unmatchedKeys = results.unmatchedKeys.join(', ');

  var _key_ = results.unmatchedKeys.length === 1 ? 'key' : 'keys';

  return {
    pass: results.pass,
    message: "Expected the state for <" + wrapperName + "> to match for " + _key_ + " \"" + unmatchedKeys + "\", but it did not.",
    negatedMessage: "Expected the state for <" + wrapperName + "> to not match for " + _key_ + " \"" + unmatchedKeys + "\", but it did.",
    contextualInformation: contextualInformation
  };
}

var _default = (0, _single.default)(toHaveState);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvSGF2ZVN0YXRlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9uYW1lIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVkdWNlQXNzZXJ0aW9uT2JqZWN0IiwiX3N0cmluZ2lmeSIsIl9zaW5nbGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwidG9IYXZlU3RhdGUiLCJlbnp5bWVXcmFwcGVyIiwic3RhdGVLZXkiLCJzdGF0ZVZhbHVlIiwic3RhdGUiLCJ3cmFwcGVyTmFtZSIsInVuZGVmaW5lZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsInBhc3MiLCJoYXNPd25Qcm9wZXJ0eSIsIm1lc3NhZ2UiLCJuZWdhdGVkTWVzc2FnZSIsImNvbnRleHR1YWxJbmZvcm1hdGlvbiIsImFjdHVhbCIsInJlc3VsdHMiLCJjYWxsIiwiZXhwZWN0ZWQiLCJtaXNzaW5nS2V5cyIsImpvaW4iLCJfa2V5XyIsInVubWF0Y2hlZEtleXMiLCJfZGVmYXVsdCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGVBQUQsQ0FBUixDQUFsQzs7QUFFQSxJQUFJQyxzQkFBc0IsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBRCxDQUFSLENBQW5EOztBQUVBLElBQUlFLFVBQVUsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxvQkFBRCxDQUFSLENBQXZDOztBQUVBLElBQUlHLE9BQU8sR0FBR0osc0JBQXNCLENBQUNDLE9BQU8s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QTZCVCxXQUE3QiwyQkFBOERpQixLQUE5RCxXQUF3RUMsYUFBeEUsb0JBSFQ7QUFJTFIsSUFBQUEscUJBQXFCLEVBQXJCQTtBQUpLLEdBQVA7QUFNRDs7QUFFRCxJQUFJUyxRQUFRLEdBQUcsQ0FBQyxHQUFHM0IsT0FBTyxDQUFDTixPQUFaLEVBQXFCUyxXQUFyQixDQUFmOztBQUVBWCxPQUFPLENBQUNFLE9BQVIsR0FBa0JpQyxRQUFsQjtBQUNBQyxNQUFNLENBQUNwQyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25hbWVcIikpO1xuXG52YXIgX3JlZHVjZUFzc2VydGlvbk9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3JlZHVjZUFzc2VydGlvbk9iamVjdFwiKSk7XG5cbnZhciBfc3RyaW5naWZ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvc3RyaW5naWZ5XCIpKTtcblxudmFyIF9zaW5nbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9zaW5nbGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiAqXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHRvSGF2ZVN0YXRlQXNzZXJ0aW9uXG4gKiBcbiAqL1xuZnVuY3Rpb24gdG9IYXZlU3RhdGUoZW56eW1lV3JhcHBlciwgc3RhdGVLZXksIHN0YXRlVmFsdWUpIHtcbiAgY29uc3Qgc3RhdGUgPSBlbnp5bWVXcmFwcGVyLnN0YXRlKCk7XG4gIGNvbnN0IHdyYXBwZXJOYW1lID0gKDAsIF9uYW1lLmRlZmF1bHQpKGVuenltZVdyYXBwZXIpOyAvLyBUaGUgQVBJIGFsbG93cyBjaGVja2luZyBpZiBhIGNvbXBvbmVudCBoYXMgYSB2YWx1ZSBmb3IgYSBnaXZlbiBrZXkgYnkgZHJvcHBpbmcgdGhlIHRoaXJkXG4gIC8vIGFyZ3VtZW50LlxuXG4gIGlmIChzdGF0ZVZhbHVlID09PSB1bmRlZmluZWQgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2Ygc3RhdGVLZXkgIT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoc3RhdGVLZXkpID09PSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzOiBzdGF0ZS5oYXNPd25Qcm9wZXJ0eShzdGF0ZUtleSksXG4gICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgdGhlIHN0YXRlIGZvciA8JHt3cmFwcGVyTmFtZX0+IHRvIGNvbnRhaW4gdGhlIGtleSBcIiR7c3RhdGVLZXl9XCIsIGJ1dCBpdCBkaWQgbm90LmAsXG4gICAgICBuZWdhdGVkTWVzc2FnZTogYEV4cGVjdGVkIHRoZSBzdGF0ZSBmb3IgPCR7d3JhcHBlck5hbWV9PiB0byBub3QgY29udGFpbiB0aGUga2V5IFwiJHtzdGF0ZUtleX1cIiwgYnV0IGl0IGRpZC5gLFxuICAgICAgY29udGV4dHVhbEluZm9ybWF0aW9uOiB7XG4gICAgICAgIGFjdHVhbDogYEFjdHVhbCBzdGF0ZTogJHsoMCwgX3N0cmluZ2lmeS5kZWZhdWx0KSh7XG4gICAgICAgICAgW3N0YXRlS2V5XTogc3RhdGVbc3RhdGVLZXldXG4gICAgICAgIH0pfWBcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgY29uc3QgcmVzdWx0cyA9IF9yZWR1Y2VBc3NlcnRpb25PYmplY3QuZGVmYXVsdC5jYWxsKHRoaXMsIHN0YXRlLCBzdGF0ZUtleSwgc3RhdGVWYWx1ZSk7XG5cbiAgY29uc3QgY29udGV4dHVhbEluZm9ybWF0aW9uID0ge1xuICAgIGFjdHVhbDogYEFjdHVhbCBzdGF0ZTogJHsoMCwgX3N0cmluZ2lmeS5kZWZhdWx0KShyZXN1bHRzLmFjdHVhbCl9YCxcbiAgICBleHBlY3RlZDogYEV4cGVjdGVkIHN0YXRlOiAkeygwLCBfc3RyaW5naWZ5LmRlZmF1bHQpKHJlc3VsdHMuZXhwZWN0ZWQpfWBcbiAgfTsgLy8gZXJyb3IgaWYgc29tZSBzdGF0ZSBkb2Vzbid0IGV4aXN0XG5cbiAgaWYgKHJlc3VsdHMubWlzc2luZ0tleXMubGVuZ3RoKSB7XG4gICAgY29uc3QgbWlzc2luZ0tleXMgPSByZXN1bHRzLm1pc3NpbmdLZXlzLmpvaW4oJywgJyk7XG5cbiAgICBjb25zdCBfa2V5XyA9IHJlc3VsdHMubWlzc2luZ0tleXMubGVuZ3RoID09PSAxID8gJ2tleScgOiAna2V5cyc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgdGhlIHN0YXRlIGZvciA8JHt3cmFwcGVyTmFtZX0+IHRvIGNvbnRhaW4gdGhlICR7X2tleV99IFwiJHttaXNzaW5nS2V5c31cIiwgYnV0IGl0IGRpZCBub3QuYCxcbiAgICAgIG5lZ2F0ZWRNZXNzYWdlOiBgRXhwZWN0ZWQgdGhlIHN0YXRlIGZvciA8JHt3cmFwcGVyTmFtZX0+IHRvIG5vdCBjb250YWluIHRoZSAke19rZXlffSBcIiR7bWlzc2luZ0tleXN9XCIsIGJ1dCBpdCBkaWQuYCxcbiAgICAgIGNvbnRleHR1YWxJbmZvcm1hdGlvblxuICAgIH07XG4gIH1cblxuICBjb25zdCB1bm1hdGNoZWRLZXlzID0gcmVzdWx0cy51bm1hdGNoZWRLZXlzLmpvaW4oJywgJyk7XG5cbiAgY29uc3QgX2tleV8gPSByZXN1bHRzLnVubWF0Y2hlZEtleXMubGVuZ3RoID09PSAxID8gJ2tleScgOiAna2V5cyc7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiByZXN1bHRzLnBhc3MsXG4gICAgbWVzc2FnZTogYEV4cGVjdGVkIHRoZSBzdGF0ZSBmb3IgPCR7d3JhcHBlck5hbWV9PiB0byBtYXRjaCBmb3IgJHtfa2V5X30gXCIke3VubWF0Y2hlZEtleXN9XCIsIGJ1dCBpdCBkaWQgbm90LmAsXG4gICAgbmVnYXRlZE1lc3NhZ2U6IGBFeHBlY3RlZCB0aGUgc3RhdGUgZm9yIDwke3dyYXBwZXJOYW1lfT4gdG8gbm90IG1hdGNoIGZvciAke19rZXlffSBcIiR7dW5tYXRjaGVkS2V5c31cIiwgYnV0IGl0IGRpZC5gLFxuICAgIGNvbnRleHR1YWxJbmZvcm1hdGlvblxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3NpbmdsZS5kZWZhdWx0KSh0b0hhdmVTdGF0ZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19