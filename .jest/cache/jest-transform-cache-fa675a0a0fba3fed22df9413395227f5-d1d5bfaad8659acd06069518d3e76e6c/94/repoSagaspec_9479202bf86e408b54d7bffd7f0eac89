0db2f787f1ec52f8f7c22951e157f81d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reduxSagaTestPlan = require("redux-saga-test-plan");

var _reduxForm = require("redux-form");

var matchers = _interopRequireWildcard(require("redux-saga-test-plan/matchers"));

var _redux = require("redux");

var _response = require("../../../__mocks__/response");

var _reducer = _interopRequireWildcard(require("../reducer"));

var _axios = _interopRequireDefault(require("../../axios"));

var _saga = _interopRequireDefault(require("../saga"));

var _form = _interopRequireDefault(require("../../../__mocks__/form"));

var _actions = require("../actions");

var _repo = require("../../../__mocks__/repo");

var setupTest = function setupTest(storeInitialState) {
  return (0, _reduxSagaTestPlan.expectSaga)(_saga.default).withReducer((0, _redux.combineReducers)({
    form: _reduxForm.reducer,
    repo: _reducer.default
  }), storeInitialState);
};

describe('repoSaga', function () {
  var page = 1;
  describe('get github issues', function () {
    var storeInitialState = {
      form: _form.default,
      repo: _reducer.initialState
    };
    it('should fetch github issues from api successfully', function _callee() {
      var response, _await$setupTest$prov, storeState;

      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              response = (0, _response.createSuccessfulResponse)(_repo.repoIssuesMock);
              _context.next = 3;
              return _regenerator.default.awrap(setupTest(storeInitialState).provide([[matchers.call.fn(_axios.default.get), response]]).dispatch(_actions.repoActions.getRepoIssues({
                page: page
              })).put(_actions.repoActions.getRepoIssuesSuccess({
                issues: response.data,
                page: page,
                hasMoreIssues: true
              })).silentRun());

            case 3:
              _await$setupTest$prov = _context.sent;
              storeState = _await$setupTest$prov.storeState;
              expect(storeState.repo).toEqual((0, _extends3.default)((0, _extends3.default)({}, storeState.repo), {
                issues: (0, _extends3.default)((0, _extends3.default)({}, storeState.repo.issues), (0, _defineProperty2.default)({}, page, response.data)),
                page: page,
                error: false,
                isLoading: false,
                hasMoreIssues: true
              }));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    });
    it('should set current page if it is fetched before', function _callee2() {
      var _await$setupTest$disp, storeState;

      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _regenerator.default.awrap(setupTest((0, _extends3.default)((0, _extends3.default)({}, storeInitialState), {
                repo: (0, _extends3.default)((0, _extends3.default)({}, storeInitialState.repo), {
                  issues: (0, _defineProperty2.default)({}, page, _repo.repoIssuesMock.data)
                })
              })).dispatch(_actions.repoActions.getRepoIssues({
                page: page
              })).put(_actions.repoActions.setCurrentPage({
                page: page,
                hasMoreIssues: false
              })).silentRun());

            case 2:
              _await$setupTest$disp = _context2.sent;
              storeState = _await$setupTest$disp.storeState;
              expect(storeState.repo).toEqual((0, _extends3.default)((0, _extends3.default)({}, storeState.repo), {
                page: page,
                error: false,
                isLoading: false,
                hasMoreIssues: false
              }));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, null, Promise);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmlzZGVyYmVsL0RvY3VtZW50cy9hcGNnaXRodWJpc3N1ZXMvc3JjL3JlZHV4L3JlcG8vX190ZXN0c19fL3JlcG9TYWdhLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQU0sU0FBUyxHQUFHLFNBQVosU0FBWSxDQUFDLGlCQUFEO0FBQUEsU0FDaEIsbUNBQVcsYUFBWCxFQUFxQixXQUFyQixDQUNFLDRCQUFnQjtBQUNkLElBQUEsSUFBSSxFQUFFLGtCQURRO0FBRWQsSUFBQSxJQUFJLEVBQUU7QUFGUSxHQUFoQixDQURGLEVBS0UsaUJBTEYsQ0FEZ0I7QUFBQSxDQUFsQjs7QUFTQSxRQUFRLENBQUMsVUFBRCxFQUFhLFlBQUs7QUFDeEIsTUFBTSxJQUFJLEdBQUcsQ0FBYjtBQUNBLEVBQUEsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQUs7QUFDakMsUUFBTSxpQkFBaUIsR0FBc0I7QUFDM0MsTUFBQSxJQUFJLEVBQUUsYUFEcUM7QUFFM0MsTUFBQSxJQUFJLEVBQUU7QUFGcUMsS0FBN0M7QUFJQSxJQUFBLEVBQUUsQ0FBQyxrREFBRCxFQUFxRDtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQy9DLGNBQUEsUUFEK0MsR0FDcEMsd0NBQXlCLG9CQUF6QixDQURvQztBQUFBO0FBQUEsZ0RBRTFCLFNBQVMsQ0FBQyxpQkFBRCxDQUFULENBQ3hCLE9BRHdCLENBQ2hCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBVCxDQUFjLEVBQWQsQ0FBaUIsZUFBTSxHQUF2QixDQUFELEVBQThCLFFBQTlCLENBQUQsQ0FEZ0IsRUFFeEIsUUFGd0IsQ0FFZixxQkFBWSxhQUFaLENBQTBCO0FBQUMsZ0JBQUEsSUFBSSxFQUFKO0FBQUQsZUFBMUIsQ0FGZSxFQUd4QixHQUh3QixDQUl2QixxQkFBWSxvQkFBWixDQUFpQztBQUMvQixnQkFBQSxNQUFNLEVBQUUsUUFBUSxDQUFDLElBRGM7QUFFL0IsZ0JBQUEsSUFBSSxFQUFKLElBRitCO0FBRy9CLGdCQUFBLGFBQWEsRUFBRTtBQUhnQixlQUFqQyxDQUp1QixFQVV4QixTQVZ3QixFQUYwQjs7QUFBQTtBQUFBO0FBRTlDLGNBQUEsVUFGOEMseUJBRTlDLFVBRjhDO0FBYXJELGNBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFaLENBQU4sQ0FBd0IsT0FBeEIsQ0FBK0IsdUJBQUEsdUJBQUEsRUFBQSxFQUMxQixVQUFVLENBQUMsSUFEZSxDQUFBLEVBQ1g7QUFDbEIsZ0JBQUEsTUFBTSxFQUFBLHVCQUFBLHVCQUFBLEVBQUEsRUFDRCxVQUFVLENBQUMsSUFBWCxDQUFnQixNQURmLENBQUEsb0NBRUgsSUFGRyxFQUVJLFFBQVEsQ0FBQyxJQUZiLEVBRFk7QUFLbEIsZ0JBQUEsSUFBSSxFQUFKLElBTGtCO0FBTWxCLGdCQUFBLEtBQUssRUFBRSxLQU5XO0FBT2xCLGdCQUFBLFNBQVMsRUFBRSxLQVBPO0FBUWxCLGdCQUFBLGFBQWEsRUFBRTtBQVJHLGVBRFcsQ0FBL0I7O0FBYnFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQXJELENBQUY7QUF5QkEsSUFBQSxFQUFFLENBQUMsaURBQUQsRUFBb0Q7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0RBQ3pCLFNBQVMsQ0FBQSx1QkFBQSx1QkFBQSxFQUFBLEVBQy9CLGlCQUQrQixDQUFBLEVBQ2Q7QUFDcEIsZ0JBQUEsSUFBSSxFQUFBLHVCQUFBLHVCQUFBLEVBQUEsRUFDQyxpQkFBaUIsQ0FBQyxJQURuQixDQUFBLEVBQ3VCO0FBQ3pCLGtCQUFBLE1BQU0sb0NBQUksSUFBSixFQUFXLHFCQUFlLElBQTFCO0FBRG1CLGlCQUR2QjtBQURnQixlQURjLENBQUEsQ0FBVCxDQU94QixRQVB3QixDQU9mLHFCQUFZLGFBQVosQ0FBMEI7QUFBQyxnQkFBQSxJQUFJLEVBQUo7QUFBRCxlQUExQixDQVBlLEVBUXhCLEdBUndCLENBU3ZCLHFCQUFZLGNBQVosQ0FBMkI7QUFDekIsZ0JBQUEsSUFBSSxFQUFKLElBRHlCO0FBRXpCLGdCQUFBLGFBQWEsRUFBRTtBQUZVLGVBQTNCLENBVHVCLEVBY3hCLFNBZHdCLEVBRHlCOztBQUFBO0FBQUE7QUFDN0MsY0FBQSxVQUQ2Qyx5QkFDN0MsVUFENkM7QUFnQnBELGNBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFaLENBQU4sQ0FBd0IsT0FBeEIsQ0FBK0IsdUJBQUEsdUJBQUEsRUFBQSxFQUMxQixVQUFVLENBQUMsSUFEZSxDQUFBLEVBQ1g7QUFDbEIsZ0JBQUEsSUFBSSxFQUFKLElBRGtCO0FBRWxCLGdCQUFBLEtBQUssRUFBRSxLQUZXO0FBR2xCLGdCQUFBLFNBQVMsRUFBRSxLQUhPO0FBSWxCLGdCQUFBLGFBQWEsRUFBRTtBQUpHLGVBRFcsQ0FBL0I7O0FBaEJvRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUFwRCxDQUFGO0FBd0JELEdBdERPLENBQVI7QUF1REQsQ0F6RE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXhwZWN0U2FnYX0gZnJvbSAncmVkdXgtc2FnYS10ZXN0LXBsYW4nO1xuaW1wb3J0IHtyZWR1Y2VyIGFzIGZvcm1SZWR1Y2VyfSBmcm9tICdyZWR1eC1mb3JtJztcbmltcG9ydCB7QWN0aW9ufSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgKiBhcyBtYXRjaGVycyBmcm9tICdyZWR1eC1zYWdhLXRlc3QtcGxhbi9tYXRjaGVycyc7XG5pbXBvcnQge2NvbWJpbmVSZWR1Y2Vyc30gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHtjcmVhdGVTdWNjZXNzZnVsUmVzcG9uc2V9IGZyb20gJy4uLy4uLy4uL19fbW9ja3NfXy9yZXNwb25zZSc7XG5pbXBvcnQgcmVwb1JlZHVjZXIsIHtpbml0aWFsU3RhdGUsIElSZXBvU3RhdGV9IGZyb20gJy4uL3JlZHVjZXInO1xuaW1wb3J0IGF4aW9zIGZyb20gJy4uLy4uL2F4aW9zJztcbmltcG9ydCByZXBvU2FnYSBmcm9tICcuLi9zYWdhJztcbmltcG9ydCBmb3JtTW9jayBmcm9tICcuLi8uLi8uLi9fX21vY2tzX18vZm9ybSc7XG5pbXBvcnQge3JlcG9BY3Rpb25zfSBmcm9tICcuLi9hY3Rpb25zJztcbmltcG9ydCB7cmVwb0lzc3Vlc01vY2t9IGZyb20gJy4uLy4uLy4uL19fbW9ja3NfXy9yZXBvJztcbmltcG9ydCB7SUFwcGxpY2F0aW9uU3RhdGV9IGZyb20gJy4uLy4uL2FwcFJlZHVjZXInO1xuXG5jb25zdCBzZXR1cFRlc3QgPSAoc3RvcmVJbml0aWFsU3RhdGU6IElBcHBsaWNhdGlvblN0YXRlKSA9PlxuICBleHBlY3RTYWdhKHJlcG9TYWdhKS53aXRoUmVkdWNlcjxJQXBwbGljYXRpb25TdGF0ZSwgQWN0aW9uPGFueT4+KFxuICAgIGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgICBmb3JtOiBmb3JtUmVkdWNlcixcbiAgICAgIHJlcG86IHJlcG9SZWR1Y2VyLFxuICAgIH0pLFxuICAgIHN0b3JlSW5pdGlhbFN0YXRlLFxuICApO1xuXG5kZXNjcmliZSgncmVwb1NhZ2EnLCAoKSA9PiB7XG4gIGNvbnN0IHBhZ2UgPSAxO1xuICBkZXNjcmliZSgnZ2V0IGdpdGh1YiBpc3N1ZXMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmVJbml0aWFsU3RhdGU6IElBcHBsaWNhdGlvblN0YXRlID0ge1xuICAgICAgZm9ybTogZm9ybU1vY2ssXG4gICAgICByZXBvOiBpbml0aWFsU3RhdGUsXG4gICAgfTtcbiAgICBpdCgnc2hvdWxkIGZldGNoIGdpdGh1YiBpc3N1ZXMgZnJvbSBhcGkgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBjcmVhdGVTdWNjZXNzZnVsUmVzcG9uc2UocmVwb0lzc3Vlc01vY2spO1xuICAgICAgY29uc3Qge3N0b3JlU3RhdGV9ID0gYXdhaXQgc2V0dXBUZXN0KHN0b3JlSW5pdGlhbFN0YXRlKVxuICAgICAgICAucHJvdmlkZShbW21hdGNoZXJzLmNhbGwuZm4oYXhpb3MuZ2V0KSwgcmVzcG9uc2VdXSlcbiAgICAgICAgLmRpc3BhdGNoKHJlcG9BY3Rpb25zLmdldFJlcG9Jc3N1ZXMoe3BhZ2V9KSlcbiAgICAgICAgLnB1dChcbiAgICAgICAgICByZXBvQWN0aW9ucy5nZXRSZXBvSXNzdWVzU3VjY2Vzcyh7XG4gICAgICAgICAgICBpc3N1ZXM6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgICBwYWdlLFxuICAgICAgICAgICAgaGFzTW9yZUlzc3VlczogdHJ1ZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgICAgICAuc2lsZW50UnVuKCk7XG4gICAgICBleHBlY3Qoc3RvcmVTdGF0ZS5yZXBvKS50b0VxdWFsKHtcbiAgICAgICAgLi4uc3RvcmVTdGF0ZS5yZXBvLFxuICAgICAgICBpc3N1ZXM6IHtcbiAgICAgICAgICAuLi5zdG9yZVN0YXRlLnJlcG8uaXNzdWVzLFxuICAgICAgICAgIFtwYWdlXTogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgfSxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBoYXNNb3JlSXNzdWVzOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzZXQgY3VycmVudCBwYWdlIGlmIGl0IGlzIGZldGNoZWQgYmVmb3JlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qge3N0b3JlU3RhdGV9ID0gYXdhaXQgc2V0dXBUZXN0KHtcbiAgICAgICAgLi4uc3RvcmVJbml0aWFsU3RhdGUsXG4gICAgICAgIHJlcG86IHtcbiAgICAgICAgICAuLi5zdG9yZUluaXRpYWxTdGF0ZS5yZXBvLFxuICAgICAgICAgIGlzc3Vlczoge1twYWdlXTogcmVwb0lzc3Vlc01vY2suZGF0YX0sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgICAuZGlzcGF0Y2gocmVwb0FjdGlvbnMuZ2V0UmVwb0lzc3Vlcyh7cGFnZX0pKVxuICAgICAgICAucHV0KFxuICAgICAgICAgIHJlcG9BY3Rpb25zLnNldEN1cnJlbnRQYWdlKHtcbiAgICAgICAgICAgIHBhZ2UsXG4gICAgICAgICAgICBoYXNNb3JlSXNzdWVzOiBmYWxzZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgICAgICAuc2lsZW50UnVuKCk7XG4gICAgICBleHBlY3Qoc3RvcmVTdGF0ZS5yZXBvKS50b0VxdWFsKHtcbiAgICAgICAgLi4uc3RvcmVTdGF0ZS5yZXBvLFxuICAgICAgICBwYWdlLFxuICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGhhc01vcmVJc3N1ZXM6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=