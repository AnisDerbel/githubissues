2da851b8adfa1ae38ba049fe1432b743
"use strict";

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;

var boolbase_1 = require("boolbase");

var procedure_1 = require("../procedure");

exports.PLACEHOLDER_ELEMENT = {};

function containsTraversal(t) {
  return t.some(procedure_1.isTraversal);
}

function ensureIsTag(next, adapter) {
  if (next === boolbase_1.falseFunc) return next;
  return function (elem) {
    return adapter.isTag(elem) && next(elem);
  };
}

exports.ensureIsTag = ensureIsTag;

function getNextSiblings(elem, adapter) {
  var siblings = adapter.getSiblings(elem);
  if (siblings.length <= 1) return [];
  var elemIndex = siblings.indexOf(elem);
  if (elemIndex < 0 || elemIndex === siblings.length - 1) return [];
  return siblings.slice(elemIndex + 1).filter(adapter.isTag);
}

exports.getNextSiblings = getNextSiblings;
exports.subselects = {
  is: function is(next, token, options, context, compileToken) {
    return exports.subselects.matches(next, token, options, context, compileToken);
  },
  matches: function matches(next, token, options, context, compileToken) {
    var opts = {
      xmlMode: !!options.xmlMode,
      strict: !!options.strict,
      adapter: options.adapter,
      equals: options.equals,
      rootFunc: next
    };
    return compileToken(token, opts, context);
  },
  not: function not(next, token, options, context, compileToken) {
    var opts = {
      xmlMode: !!options.xmlMode,
      strict: !!options.strict,
      adapter: options.adapter,
      equals: options.equals
    };

    if (opts.strict) {
      if (token.length > 1 || token.some(containsTraversal)) {
        throw new Error("complex selectors in :not aren't allowed in strict mode");
      }
    }

    var func = compileToken(token, opts, context);
    if (func === boolbase_1.falseFunc) return next;
    if (func === boolbase_1.trueFunc) return boolbase_1.falseFunc;
    return function not(elem) {
      return !func(elem) && next(elem);
    };
  },
  has: function has(next, subselect, options, _context, compileToken) {
    var adapter = options.adapter;
    var opts = {
      xmlMode: !!options.xmlMode,
      strict: !!options.strict,
      adapter: adapter,
      equals: options.equals
    };
    var context = subselect.some(containsTraversal) ? [exports.PLACEHOLDER_ELEMENT] : undefined;
    var compiled = compileToken(subselect, opts, context);
    if (compiled === boolbase_1.falseFunc) return boolbase_1.falseFunc;

    if (compiled === boolbase_1.trueFunc) {
      return function (elem) {
        return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
      };
    }

    var hasElement = ensureIsTag(compiled, adapter);
    var _a = compiled.shouldTestNextSiblings,
        shouldTestNextSiblings = _a === void 0 ? false : _a;

    if (context) {
      return function (elem) {
        context[0] = elem;
        var childs = adapter.getChildren(elem);
        var nextElements = shouldTestNextSiblings ? __spreadArrays(childs, getNextSiblings(elem, adapter)) : childs;
        return next(elem) && adapter.existsOne(hasElement, nextElements);
      };
    }

    return function (elem) {
      return next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,