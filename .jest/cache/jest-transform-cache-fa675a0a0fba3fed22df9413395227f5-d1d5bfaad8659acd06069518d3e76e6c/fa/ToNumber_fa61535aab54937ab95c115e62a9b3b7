ba3c6495e9dae1680028e287f59241c2
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $Number = GetIntrinsic('%Number%');
var $RegExp = GetIntrinsic('%RegExp%');
var $parseInteger = GetIntrinsic('%parseInt%');

var callBound = require('call-bind/callBound');

var regexTester = require('../helpers/regexTester');

var isPrimitive = require('../helpers/isPrimitive');

var $strSlice = callBound('String.prototype.slice');
var isBinary = regexTester(/^0b[01]+$/i);
var isOctal = regexTester(/^0o[0-7]+$/i);
var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
var nonWS = ["\x85", "\u200B", "\uFFFE"].join('');
var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
var hasNonWS = regexTester(nonWSregex);
var ws = ["\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003", "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028", "\u2029\uFEFF"].join('');
var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
var $replace = callBound('String.prototype.replace');

var $trim = function $trim(value) {
  return $replace(value, trimRegex, '');
};

var ToPrimitive = require('./ToPrimitive');

module.exports = function ToNumber(argument) {
  var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);

  if (typeof value === 'symbol') {
    throw new $TypeError('Cannot convert a Symbol value to a number');
  }

  if (typeof value === 'string') {
    if (isBinary(value)) {
      return ToNumber($parseInteger($strSlice(value, 2), 2));
    } else if (isOctal(value)) {
      return ToNumber($parseInteger($strSlice(value, 2), 8));
    } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
      return NaN;
    } else {
      var trimmed = $trim(value);

      if (trimmed !== value) {
        return ToNumber(trimmed);
      }
    }
  }

  return $Number(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvTnVtYmVyLmpzIl0sIm5hbWVzIjpbIkdldEludHJpbnNpYyIsInJlcXVpcmUiLCIkVHlwZUVycm9yIiwiJE51bWJlciIsIiRSZWdFeHAiLCIkcGFyc2VJbnRlZ2VyIiwiY2FsbEJvdW5kIiwicmVnZXhUZXN0ZXIiLCJpc1ByaW1pdGl2ZSIsIiRzdHJTbGljZSIsImlzQmluYXJ5IiwiaXNPY3RhbCIsImlzSW52YWxpZEhleExpdGVyYWwiLCJub25XUyIsImpvaW4iLCJub25XU3JlZ2V4IiwiaGFzTm9uV1MiLCJ3cyIsInRyaW1SZWdleCIsIlJlZ0V4cCIsIiRyZXBsYWNlIiwiJHRyaW0iLCJ2YWx1ZSIsIlRvUHJpbWl0aXZlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRvTnVtYmVyIiwiYXJndW1lbnQiLCJOYU4iLCJ0cmltbWVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQUQsQ0FBN0I7QUFDQSxJQUFJRyxPQUFPLEdBQUdILFlBQVksQ0FBQyxVQUFELENBQTFCO0FBQ0EsSUFBSUksT0FBTyxHQUFHSixZQUFZLENBQUMsVUFBRCxDQUExQjtBQUNBLElBQUlLLGFBQWEsR0FBR0wsWUFBWSxDQUFDLFlBQUQsQ0FBaEM7O0FBRUEsSUFBSU0sU0FBUyxHQUFHTCxPQUFPLENBQUMscUJBQUQsQ0FBdkI7O0FBQ0EsSUFBSU0sV0FBVyxHQUFHTixPQUFPLENBQUMsd0JBQUQsQ0FBekI7O0FBQ0EsSUFBSU8sV0FBVyxHQUFHUCxPQUFPLENBQUMsd0JBQUQsQ0FBekI7O0FBRUEsSUFBSVEsU0FBUyxHQUFHSCxTQUFTLENBQUMsd0JBQUQsQ0FBekI7QUFDQSxJQUFJSSxRQUFRLEdBQUdILFdBQVcsQ0FBQyxZQUFELENBQTFCO0FBQ0EsSUFBSUksT0FBTyxHQUFHSixXQUFXLENBQUMsYUFBRCxDQUF6QjtBQUNBLElBQUlLLG1CQUFtQixHQUFHTCxXQUFXLENBQUMsb0JBQUQsQ0FBckM7QUFDQSxJQUFJTSxLQUFLLEdBQUcsQ0FBQyxNQUFELEVBQVcsUUFBWCxFQUFxQixRQUFyQixFQUErQkMsSUFBL0IsQ0FBb0MsRUFBcEMsQ0FBWjtBQUNBLElBQUlDLFVBQVUsR0FBRyxJQUFJWCxPQUFKLENBQVksTUFBTVMsS0FBTixHQUFjLEdBQTFCLEVBQStCLEdBQS9CLENBQWpCO0FBQ0EsSUFBSUcsUUFBUSxHQUFHVCxXQUFXLENBQUNRLFVBQUQsQ0FBMUI7QUFJQSxJQUFJRSxFQUFFLEdBQUcsQ0FDUix1REFEUSxFQUVSLG9FQUZRLEVBR1IsY0FIUSxFQUlQSCxJQUpPLENBSUYsRUFKRSxDQUFUO0FBS0EsSUFBSUksU0FBUyxHQUFHLElBQUlDLE1BQUosQ0FBVyxRQUFRRixFQUFSLEdBQWEsUUFBYixHQUF3QkEsRUFBeEIsR0FBNkIsTUFBeEMsRUFBZ0QsR0FBaEQsQ0FBaEI7QUFDQSxJQUFJRyxRQUFRLEdBQUdkLFNBQVMsQ0FBQywwQkFBRCxDQUF4Qjs7QUFDQSxJQUFJZSxLQUFLLEdBQUcsU0FBUkEsS0FBUSxDQUFVQyxLQUFWLEVBQWlCO0FBQzVCLFNBQU9GLFFBQVEsQ0FBQ0UsS0FBRCxFQUFRSixTQUFSLEVBQW1CLEVBQW5CLENBQWY7QUFDQSxDQUZEOztBQUlBLElBQUlLLFdBQVcsR0FBR3RCLE9BQU8sQ0FBQyxlQUFELENBQXpCOztBQUlBdUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCO0FBQzVDLE1BQUlMLEtBQUssR0FBR2QsV0FBVyxDQUFDbUIsUUFBRCxDQUFYLEdBQXdCQSxRQUF4QixHQUFtQ0osV0FBVyxDQUFDSSxRQUFELEVBQVd4QixPQUFYLENBQTFEOztBQUNBLE1BQUksT0FBT21CLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDOUIsVUFBTSxJQUFJcEIsVUFBSixDQUFlLDJDQUFmLENBQU47QUFDQTs7QUFDRCxNQUFJLE9BQU9vQixLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzlCLFFBQUlaLFFBQVEsQ0FBQ1ksS0FBRCxDQUFaLEVBQXFCO0FBQ3BCLGFBQU9JLFFBQVEsQ0FBQ3JCLGFBQWEsQ0FBQ0ksU0FBUyxDQUFDYSxLQUFELEVBQVEsQ0FBUixDQUFWLEVBQXNCLENBQXRCLENBQWQsQ0FBZjtBQUNBLEtBRkQsTUFFTyxJQUFJWCxPQUFPLENBQUNXLEtBQUQsQ0FBWCxFQUFvQjtBQUMxQixhQUFPSSxRQUFRLENBQUNyQixhQUFhLENBQUNJLFNBQVMsQ0FBQ2EsS0FBRCxFQUFRLENBQVIsQ0FBVixFQUFzQixDQUF0QixDQUFkLENBQWY7QUFDQSxLQUZNLE1BRUEsSUFBSU4sUUFBUSxDQUFDTSxLQUFELENBQVIsSUFBbUJWLG1CQUFtQixDQUFDVSxLQUFELENBQTFDLEVBQW1EO0FBQ3pELGFBQU9NLEdBQVA7QUFDQSxLQUZNLE1BRUE7QUFDTixVQUFJQyxPQUFPLEdBQUdSLEtBQUssQ0FBQ0MsS0FBRCxDQUFuQjs7QUFDQSxVQUFJTyxPQUFPLEtBQUtQLEtBQWhCLEVBQXVCO0FBQ3RCLGVBQU9JLFFBQVEsQ0FBQ0csT0FBRCxDQUFmO0FBQ0E7QUFDRDtBQUNEOztBQUNELFNBQU8xQixPQUFPLENBQUNtQixLQUFELENBQWQ7QUFDQSxDQXBCRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcbnZhciAkUmVnRXhwID0gR2V0SW50cmluc2ljKCclUmVnRXhwJScpO1xudmFyICRwYXJzZUludGVnZXIgPSBHZXRJbnRyaW5zaWMoJyVwYXJzZUludCUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciByZWdleFRlc3RlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVnZXhUZXN0ZXInKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRzdHJTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGlzQmluYXJ5ID0gcmVnZXhUZXN0ZXIoL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gcmVnZXhUZXN0ZXIoL14wb1swLTddKyQvaSk7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IHJlZ2V4VGVzdGVyKC9eWy0rXTB4WzAtOWEtZl0rJC9pKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3ICRSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSByZWdleFRlc3Rlcihub25XU3JlZ2V4KTtcblxuLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbi8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG52YXIgd3MgPSBbXG5cdCdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG5cdCdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG5cdCdcXHUyMDI5XFx1RkVGRidcbl0uam9pbignJyk7XG52YXIgdHJpbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbnZhciAkcmVwbGFjZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlJyk7XG52YXIgJHRyaW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuICRyZXBsYWNlKHZhbHVlLCB0cmltUmVnZXgsICcnKTtcbn07XG5cbnZhciBUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vVG9QcmltaXRpdmUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvbnVtYmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0dmFyIHZhbHVlID0gaXNQcmltaXRpdmUoYXJndW1lbnQpID8gYXJndW1lbnQgOiBUb1ByaW1pdGl2ZShhcmd1bWVudCwgJE51bWJlcik7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRpZiAoaXNCaW5hcnkodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gVG9OdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UodmFsdWUsIDIpLCAyKSk7XG5cdFx0fSBlbHNlIGlmIChpc09jdGFsKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIFRvTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKHZhbHVlLCAyKSwgOCkpO1xuXHRcdH0gZWxzZSBpZiAoaGFzTm9uV1ModmFsdWUpIHx8IGlzSW52YWxpZEhleExpdGVyYWwodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdHJpbW1lZCA9ICR0cmltKHZhbHVlKTtcblx0XHRcdGlmICh0cmltbWVkICE9PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gVG9OdW1iZXIodHJpbW1lZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiAkTnVtYmVyKHZhbHVlKTtcbn07XG4iXX0=