{"version":3,"sources":["/Users/anisderbel/Documents/apcgithubissues/src/screens/__tests__/githubissuesscreen.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import 'jest';\nimport React from 'react';\nimport { perf, wait } from 'react-performance-testing';\nimport { render } from '@testing-library/react-native';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { mount, ReactWrapper, configure } from 'enzyme';\nimport Adapter from '@wojtekmaj/enzyme-adapter-react-17';\nconfigure({ adapter: new Adapter() });\nimport { Provider } from 'react-redux';\nimport configureMockStore, { MockStoreEnhanced } from 'redux-mock-store';\nimport formMock from '../../__mocks__/form';\nimport { repoIssuesMock } from '../../__mocks__/repo';\nimport { initialState } from '../../redux/repo/reducer';\nimport theme from '../../theme';\nimport { Store } from 'redux';\nimport GithubIssuesScreen from '../GithubIssuesScreen';\nimport { FlatList } from 'react-native';\nimport IssueItem from '../../components/IssueItem';\nconst mockStore = configureMockStore();\nlet mockedStore: MockStoreEnhanced;\ntype ComponentWrapper = ReactWrapper<void, void, React.Component>;\nlet component: ComponentWrapper;\n\nconst getTitle = () => component.find({ testID: 'repo_title' }).first();\n\ndescribe('GithubIssuesScreen', () => {\n  const { renderCount } = perf(React);\n\n  const renderComponent = (store: Store): ComponentWrapper =>\n    mount(\n      <Provider store={store}>\n        <PaperProvider theme={theme}>\n          <GithubIssuesScreen />\n        </PaperProvider>\n      </Provider>,\n    );\n\n  describe('render first page', async () => {\n    const repoState = {\n      ...initialState,\n      page: 1,\n      issues: { 1: repoIssuesMock.data },\n    };\n    beforeEach(() => {\n      mockedStore = mockStore({ repo: repoState, form: formMock }) as MockStoreEnhanced;\n      component = renderComponent(mockedStore);\n    });\n\n    it('should render screen one time only', async () => {\n      render(\n        <Provider store={mockedStore}>\n          <PaperProvider theme={theme}>\n            <GithubIssuesScreen />\n          </PaperProvider>\n        </Provider>,\n      );\n      await wait(() => {\n        expect((renderCount.current.GithubIssuesScreen as any)[0].value).toBe(1);\n      });\n    });\n    it('should render title correctly', () => {\n      expect(getTitle().text()).toEqual(\n        `${formMock.form.values?.organization}/${formMock.form.values?.repository}`,\n      );\n    });\n\n    it('should render rows based on issues returned per page', () => {\n      expect(component.find(FlatList).length).toBe(1);\n      expect(component.find(IssueItem).length).toBe(repoIssuesMock.data.length);\n    });\n  });\n});\n"]}