4caa9e7773477929201d31dc6756b673
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = StackRouter;
exports.StackActions = void 0;



var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var StackActions = {
  replace: function replace(name, params) {
    return {
      type: 'REPLACE',
      payload: {
        name: name,
        params: params } };


  },

  push: function push(name, params) {
    return {
      type: 'PUSH',
      payload: {
        name: name,
        params: params } };


  },

  pop: function pop() {var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: 'POP',
      payload: {
        count: count } };


  },

  popToTop: function popToTop() {
    return {
      type: 'POP_TO_TOP' };

  } };


exports.StackActions = StackActions;

function StackRouter(options) {
  var router = _objectSpread(_objectSpread({}, _BaseRouter.default), {}, {
    type: 'stack',

    getInitialState: function getInitialState(_ref)


    {var routeNames = _ref.routeNames,routeParamList = _ref.routeParamList;
      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: 'stack',
        key: "stack-".concat((0, require("nanoid/non-secure").nanoid)()),
        index: 0,
        routeNames: routeNames,
        routes: [{
          key: "".concat(initialRouteName, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName] }] };


    },

    getRehydratedState: function getRehydratedState(partialState, _ref2)


    {var routeNames = _ref2.routeNames,routeParamList = _ref2.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = state.routes.filter(function (route) {return routeNames.includes(route.name);}).map(function (route) {return _objectSpread(_objectSpread({}, route), {}, {
          key: route.key || "".concat(route.name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]),
          route.params) :
          route.params });});


      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];
        routes.push({
          key: "".concat(initialRouteName, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName] });

      }

      return {
        stale: false,
        type: 'stack',
        key: "stack-".concat((0, require("nanoid/non-secure").nanoid)()),
        index: routes.length - 1,
        routeNames: routeNames,
        routes: routes };

    },

    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3)


    {var routeNames = _ref3.routeNames,routeParamList = _ref3.routeParamList;
      var routes = state.routes.filter(function (route) {return routeNames.includes(route.name);});

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes.push({
          key: "".concat(initialRouteName, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          name: initialRouteName,
          params: routeParamList[initialRouteName] });

      }

      return _objectSpread(_objectSpread({}, state), {}, {
        routeNames: routeNames,
        routes: routes,
        index: Math.min(state.index, routes.length - 1) });

    },

    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {return r.key === key;});

      if (index === -1 || index === state.index) {
        return state;
      }

      return _objectSpread(_objectSpread({}, state), {}, {
        index: index,
        routes: state.routes.slice(0, index + 1) });

    },

    getStateForAction: function getStateForAction(state, action, options) {var

      routeParamList =
      options.routeParamList;

      switch (action.type) {
        case 'REPLACE':
          {
            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {return r.key === action.source;}) : state.index;

            if (index === -1) {
              return null;
            }var _action$payload =





            action.payload,name = _action$payload.name,key = _action$payload.key,params = _action$payload.params;

            if (!state.routeNames.includes(name)) {
              return null;
            }

            return _objectSpread(_objectSpread({}, state), {}, {
              routes: state.routes.map(function (route, i) {return i === index ? {
                  key: key !== undefined ? key : "".concat(name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
                  name: name,
                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]),
                  params) :
                  params } :
                route;}) });

          }

        case 'PUSH':
          if (state.routeNames.includes(action.payload.name)) {
            var getId = options.routeGetIdList[action.payload.name];
            var id = getId === null || getId === void 0 ? void 0 : getId({
              params: action.payload.params });

            var route = action.payload.name && action.payload.key ? state.routes.find(function (route) {return route.name === action.payload.name && route.key === action.payload.key;}) : id ? state.routes.find(function (route) {return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({
                params: route.params }));}) :
            undefined;
            var routes;

            if (route) {
              routes = state.routes.filter(function (r) {return r.key !== route.key;});
              routes.push(_objectSpread(_objectSpread({}, route), {}, {
                params: action.payload.params !== undefined ? _objectSpread(_objectSpread({}, route.params),
                action.payload.params) :
                route.params }));

            } else {
              var _action$payload$key;

              routes = [].concat(require("@babel/runtime/helpers/toConsumableArray")(state.routes), [{
                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : "".concat(action.payload.name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]),
                action.payload.params) :
                action.payload.params }]);

            }

            return _objectSpread(_objectSpread({}, state), {}, {
              index: routes.length - 1,
              routes: routes });

          }

          return null;

        case 'POP':
          {
            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {return r.key === action.source;}) : state.index;

            if (_index > 0) {
              var count = Math.max(_index - action.payload.count + 1, 1);
              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));
              return _objectSpread(_objectSpread({}, state), {}, {
                index: _routes.length - 1,
                routes: _routes });

            }

            return null;
          }

        case 'POP_TO_TOP':
          return router.getStateForAction(state, {
            type: 'POP',
            payload: {
              count: state.routes.length - 1 } },

          options);

        case 'NAVIGATE':
          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {
            return null;
          }

          if (action.payload.key || action.payload.name) {

            var _index2 = -1;
            var _getId =
            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;
            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({
              params: action.payload.params });


            if (_id) {
              _index2 = state.routes.findIndex(function (route) {return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({
                  params: route.params }));});

            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {
              _index2 = state.index;
            } else {
              for (var i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {
                  _index2 = i;
                  break;
                }
              }
            }

            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {
              return null;
            }

            if (_index2 === -1 && action.payload.name !== undefined) {
              var _action$payload$key2;

              var _routes2 = [].concat(require("@babel/runtime/helpers/toConsumableArray")(state.routes), [{
                key: (_action$payload$key2 = action.payload.key) !== null && _action$payload$key2 !== void 0 ? _action$payload$key2 : "".concat(action.payload.name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]),
                action.payload.params) :
                action.payload.params }]);

              return _objectSpread(_objectSpread({}, state), {}, {
                routes: _routes2,
                index: _routes2.length - 1 });

            }

            var _route = state.routes[_index2];
            var _params;

            if (action.payload.merge === false) {
              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]),
              action.payload.params) :
              action.payload.params;
            } else {
              _params = action.payload.params ? _objectSpread(_objectSpread({}, _route.params),
              action.payload.params) :
              _route.params;
            }

            return _objectSpread(_objectSpread({}, state), {}, {
              index: _index2,
              routes: [].concat(require("@babel/runtime/helpers/toConsumableArray")(state.routes.slice(0, _index2)), [_params !== _route.params ? _objectSpread(_objectSpread({}, _route), {}, {
                params: _params }) :
              state.routes[_index2]]) });

          }

          return null;

        case 'GO_BACK':
          if (state.index > 0) {
            return router.getStateForAction(state, {
              type: 'POP',
              payload: {
                count: 1 },

              target: action.target,
              source: action.source },
            options);
          }

          return null;

        default:
          return _BaseRouter.default.getStateForAction(state, action);}

    },

    actionCreators: StackActions });

  return router;
}