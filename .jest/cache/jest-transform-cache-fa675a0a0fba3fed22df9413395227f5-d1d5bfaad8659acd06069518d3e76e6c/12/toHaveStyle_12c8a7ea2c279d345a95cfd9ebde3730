d23145eacf6143b065c081650b2983c5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _name = _interopRequireDefault(require("../utils/name"));

var _stringify = _interopRequireDefault(require("../utils/stringify"));

var _reduceAssertionObject = _interopRequireDefault(require("../utils/reduceAssertionObject"));

var _html = _interopRequireDefault(require("../utils/html"));

var _single = _interopRequireDefault(require("../utils/single"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function flattenStyle(style) {
  if (!style) {
    return undefined;
  }

  if (!Array.isArray(style)) {
    return style;
  }

  return style.reduce(function (computedStyle, currentStyle) {
    return (0, _extends2.default)({}, computedStyle, flattenStyle(currentStyle));
  }, undefined);
}

function toHaveStyle(enzymeWrapper, styleKey, styleValue) {
  var style = flattenStyle(enzymeWrapper.prop('style'));
  var wrapperName = (0, _name.default)(enzymeWrapper);

  if (!style) {
    return {
      pass: false,
      message: "Expected <" + wrapperName + "> component to have a style prop but it did not.",
      negatedMessage: "Expected <" + wrapperName + "> component not to have a style prop but it did.",
      contextualInformation: {
        actual: (0, _html.default)(enzymeWrapper)
      }
    };
  }

  if (styleKey === undefined && arguments.length === 2 && typeof styleKey !== 'object' && Array.isArray(styleKey) === false) {
    return {
      pass: style.hasOwnProperty(styleKey),
      message: "Expected <" + wrapperName + "> to have any value for the prop \"" + styleKey + "\"",
      negatedMessage: "Expected <" + wrapperName + "> not to receive the prop \"" + styleKey + "\"",
      contextualInformation: {
        actual: "Actual props: " + (0, _stringify.default)((0, _defineProperty2.default)({}, styleKey, style[styleKey])),
        expected: "Expected props: " + (0, _stringify.default)((0, _defineProperty2.default)({}, styleKey, styleValue))
      }
    };
  }

  var results = _reduceAssertionObject.default.call(this, style, styleKey, styleValue);

  var unmatchedKeys = results.unmatchedKeys.join(', ');
  var contextualInformation = {
    actual: "Actual style: " + (0, _stringify.default)(results.actual),
    expected: "Expected style: " + (0, _stringify.default)(results.expected)
  };

  if (results.missingKeys.length) {
    var missingKeys = results.missingKeys.join(', ');
    return {
      pass: false,
      message: "Expected <" + wrapperName + "> component to have a style keys of \"" + missingKeys + "\" but it did not.",
      negatedMessage: "Expected <" + wrapperName + "> component not to have a style key of \"" + missingKeys + "\" but it did.",
      contextualInformation: {
        actual: (0, _html.default)(enzymeWrapper)
      }
    };
  }

  return {
    pass: results.pass,
    message: "Expected <" + wrapperName + "> component style values to match for key \"" + unmatchedKeys + "\", but they didn't",
    negatedMessage: "Expected <" + wrapperName + "> component style values to be different for key \"" + unmatchedKeys + "\", but they weren't",
    contextualInformation: contextualInformation
  };
}

var _default = (0, _single.default)(toHaveStyle);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,