280fd665f409fb88e5a75e71932f1e58
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var unicode = require('../common/unicode');

var ERR = require('../common/error-codes');

var $ = unicode.CODE_POINTS;
var DEFAULT_BUFFER_WATERLINE = 1 << 16;

var Preprocessor = function () {
  function Preprocessor() {
    (0, _classCallCheck2.default)(this, Preprocessor);
    this.html = null;
    this.pos = -1;
    this.lastGapPos = -1;
    this.lastCharPos = -1;
    this.gapStack = [];
    this.skipNextNewLine = false;
    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
  }

  (0, _createClass2.default)(Preprocessor, [{
    key: "_err",
    value: function _err() {}
  }, {
    key: "_addGap",
    value: function _addGap() {
      this.gapStack.push(this.lastGapPos);
      this.lastGapPos = this.pos;
    }
  }, {
    key: "_processSurrogate",
    value: function _processSurrogate(cp) {
      if (this.pos !== this.lastCharPos) {
        var nextCp = this.html.charCodeAt(this.pos + 1);

        if (unicode.isSurrogatePair(nextCp)) {
          this.pos++;

          this._addGap();

          return unicode.getSurrogatePairCodePoint(cp, nextCp);
        }
      } else if (!this.lastChunkWritten) {
          this.endOfChunkHit = true;
          return $.EOF;
        }

      this._err(ERR.surrogateInInputStream);

      return cp;
    }
  }, {
    key: "dropParsedChunk",
    value: function dropParsedChunk() {
      if (this.pos > this.bufferWaterline) {
        this.lastCharPos -= this.pos;
        this.html = this.html.substring(this.pos);
        this.pos = 0;
        this.lastGapPos = -1;
        this.gapStack = [];
      }
    }
  }, {
    key: "write",
    value: function write(chunk, isLastChunk) {
      if (this.html) {
        this.html += chunk;
      } else {
        this.html = chunk;
      }

      this.lastCharPos = this.html.length - 1;
      this.endOfChunkHit = false;
      this.lastChunkWritten = isLastChunk;
    }
  }, {
    key: "insertHtmlAtCurrentPos",
    value: function insertHtmlAtCurrentPos(chunk) {
      this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
      this.lastCharPos = this.html.length - 1;
      this.endOfChunkHit = false;
    }
  }, {
    key: "advance",
    value: function advance() {
      this.pos++;

      if (this.pos > this.lastCharPos) {
        this.endOfChunkHit = !this.lastChunkWritten;
        return $.EOF;
      }

      var cp = this.html.charCodeAt(this.pos);

      if (this.skipNextNewLine && cp === $.LINE_FEED) {
        this.skipNextNewLine = false;

        this._addGap();

        return this.advance();
      }

      if (cp === $.CARRIAGE_RETURN) {
        this.skipNextNewLine = true;
        return $.LINE_FEED;
      }

      this.skipNextNewLine = false;

      if (unicode.isSurrogate(cp)) {
        cp = this._processSurrogate(cp);
      }

      var isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;

      if (!isCommonValidRange) {
        this._checkForProblematicCharacters(cp);
      }

      return cp;
    }
  }, {
    key: "_checkForProblematicCharacters",
    value: function _checkForProblematicCharacters(cp) {
      if (unicode.isControlCodePoint(cp)) {
        this._err(ERR.controlCharacterInInputStream);
      } else if (unicode.isUndefinedCodePoint(cp)) {
        this._err(ERR.noncharacterInInputStream);
      }
    }
  }, {
    key: "retreat",
    value: function retreat() {
      if (this.pos === this.lastGapPos) {
        this.lastGapPos = this.gapStack.pop();
        this.pos--;
      }

      this.pos--;
    }
  }]);
  return Preprocessor;
}();

module.exports = Preprocessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,