{"version":3,"sources":["name.js"],"names":["Object","defineProperty","exports","value","default","getNameFromArbitraryWrapper","_instance","_interopRequireDefault","require","obj","__esModule","getNameFromRoot","root","unrendered","type","name","inst","_tag","wrapper","nodeCount","getElements","length","nodeTypeMap","forEach","node","nodeTypeList","keys","nodeTypes","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,2BAAlB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;;AAY/F,SAASE,eAAT,CAAyBC,IAAzB,EAA+B;AAE7B,MAAIA,IAAI,CAACC,UAAT,EAAqB;AAAA,QAEjBC,IAFiB,GAGfF,IAAI,CAACC,UAHU,CAEjBC,IAFiB;AAInB,WAAOA,IAAI,CAACC,IAAL,IAAaD,IAApB;AACD;;AAED,MAAME,IAAI,GAAG,CAAC,GAAGV,SAAS,CAACF,OAAd,EAAuBQ,IAAvB,CAAb;;AAEA,MAAII,IAAJ,EAAU;AACR,WAAOA,IAAI,CAACC,IAAZ;AACD;;AAGD,MAAI,OAAOL,IAAI,CAACE,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,WAAOF,IAAI,CAACE,IAAZ;AACD;;AAED,SAAO,OAAOF,IAAI,CAACG,IAAZ,KAAqB,UAArB,GAAkCH,IAAI,CAACG,IAAL,EAAlC,GAAgD,aAAvD;AACD;;AAsBD,SAASV,2BAAT,CAAqCa,OAArC,EAA8C;AAC5C,MAAMC,SAAS,GAAG,OAAOD,OAAO,CAACE,WAAf,KAA+B,UAA/B,GAA4CF,OAAO,CAACE,WAAR,GAAsBC,MAAlE,GAA2E,CAA7F;;AAEA,UAAQF,SAAR;AACE,SAAK,CAAL;AACE;AACE,eAAO,aAAP;AACD;;AAEH,SAAK,CAAL;AACE;AACE,eAAOR,eAAe,CAACO,OAAD,CAAtB;AACD;;AAEH;AACE;AACE,YAAMI,WAAW,GAAG,EAApB;AAEAJ,QAAAA,OAAO,CAACE,WAAR,GAAsBG,OAAtB,CAA8B,UAAAC,IAAI,EAAI;AACpC,cAAMT,IAAI,GAAGJ,eAAe,CAACa,IAAD,CAA5B;AACAF,UAAAA,WAAW,CAACP,IAAD,CAAX,GAAoB,CAACO,WAAW,CAACP,IAAD,CAAX,IAAqB,CAAtB,IAA2B,CAA/C;AACD,SAHD;AAIA,YAAMU,YAAY,GAAGzB,MAAM,CAAC0B,IAAP,CAAYJ,WAAZ,CAArB;AACA,YAAMK,SAAS,GAAGF,YAAY,CAACJ,MAAb,KAAwB,CAAxB,GAA4BI,YAAY,CAAC,CAAD,CAAxC,GAA8C,OAAhE;AACA,eAAUN,SAAV,SAAuBQ,SAAvB;AACD;AAtBL;AAwBD;;AAEDC,MAAM,CAAC1B,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getNameFromArbitraryWrapper;\n\nvar _instance = _interopRequireDefault(require(\"./instance\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @function name\n * @returns string\n *\n * \n */\n\n/**\n * Gets the name of the node or component for the SINGLE item\n */\nfunction getNameFromRoot(root) {\n  // shallow\n  if (root.unrendered) {\n    const {\n      type\n    } = root.unrendered;\n    return type.name || type;\n  }\n\n  const inst = (0, _instance.default)(root);\n\n  if (inst) {\n    return inst._tag;\n  } // direct node\n\n\n  if (typeof root.type === 'string') {\n    return root.type;\n  }\n\n  return typeof root.name === 'function' ? root.name() : '(anonymous)';\n}\n/**\n * Can take any sort of wrapper. A single node, a component,\n * multiple nodes, multiple components.\n *\n * examples of outputs:\n * - \"Fixture\"\n * - \"input\"\n * - \"(anonymous)\"\n * - \"2 \"span\" nodes found\"\n * - \"2 mixed nodes found\"\n *\n * BUG: We used to be able to get the root node of an array of children elements by doing\n * `wrapper.root.unrendered.type`\n *\n * That is no longer exposed and Enzyme 3 may have a bug around this.\n * @see https://github.com/airbnb/enzyme/issues/1152\n *\n * If that issue is fixed, we may be able to bring back the \"Fixture, 2 \"span\" nodes found\"\n */\n\n\nfunction getNameFromArbitraryWrapper(wrapper) {\n  const nodeCount = typeof wrapper.getElements === 'function' ? wrapper.getElements().length : 0;\n\n  switch (nodeCount) {\n    case 0:\n      {\n        return '[empty set]';\n      }\n\n    case 1:\n      {\n        return getNameFromRoot(wrapper);\n      }\n\n    default:\n      {\n        const nodeTypeMap = {}; // determine if we have a mixed list of nodes or not\n\n        wrapper.getElements().forEach(node => {\n          const name = getNameFromRoot(node);\n          nodeTypeMap[name] = (nodeTypeMap[name] || 0) + 1;\n        });\n        const nodeTypeList = Object.keys(nodeTypeMap);\n        const nodeTypes = nodeTypeList.length === 1 ? nodeTypeList[0] : 'mixed';\n        return `${nodeCount} ${nodeTypes} nodes found`;\n      }\n  }\n}\n\nmodule.exports = exports.default;"]}