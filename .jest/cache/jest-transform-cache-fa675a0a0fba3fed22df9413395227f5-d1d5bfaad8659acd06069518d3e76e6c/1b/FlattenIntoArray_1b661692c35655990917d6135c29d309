38e1ecd7418164388ce6fedafba66501
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');

var Call = require('./Call');

var CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');

var Get = require('./Get');

var HasProperty = require('./HasProperty');

var IsArray = require('./IsArray');

var LengthOfArrayLike = require('./LengthOfArrayLike');

var ToString = require('./ToString');

module.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {
  var mapperFunction;

  if (arguments.length > 5) {
    mapperFunction = arguments[5];
  }

  var targetIndex = start;
  var sourceIndex = 0;

  while (sourceIndex < sourceLen) {
    var P = ToString(sourceIndex);
    var exists = HasProperty(source, P);

    if (exists === true) {
      var element = Get(source, P);

      if (typeof mapperFunction !== 'undefined') {
        if (arguments.length <= 6) {
          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');
        }

        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);
      }

      var shouldFlatten = false;

      if (depth > 0) {
        shouldFlatten = IsArray(element);
      }

      if (shouldFlatten) {
        var elementLen = LengthOfArrayLike(element);
        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);
      } else {
        if (targetIndex >= MAX_SAFE_INTEGER) {
          throw new $TypeError('index too large');
        }

        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);
        targetIndex += 1;
      }
    }

    sourceIndex += 1;
  }

  return targetIndex;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsYXR0ZW5JbnRvQXJyYXkuanMiXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsIiRUeXBlRXJyb3IiLCJNQVhfU0FGRV9JTlRFR0VSIiwiQ2FsbCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJHZXQiLCJIYXNQcm9wZXJ0eSIsIklzQXJyYXkiLCJMZW5ndGhPZkFycmF5TGlrZSIsIlRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkZsYXR0ZW5JbnRvQXJyYXkiLCJ0YXJnZXQiLCJzb3VyY2UiLCJzb3VyY2VMZW4iLCJzdGFydCIsImRlcHRoIiwibWFwcGVyRnVuY3Rpb24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiUCIsImV4aXN0cyIsImVsZW1lbnQiLCJzaG91bGRGbGF0dGVuIiwiZWxlbWVudExlbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdGLFlBQVksQ0FBQyxhQUFELENBQTdCOztBQUVBLElBQUlHLGdCQUFnQixHQUFHRixPQUFPLENBQUMsMkJBQUQsQ0FBOUI7O0FBRUEsSUFBSUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsUUFBRCxDQUFsQjs7QUFDQSxJQUFJSSx5QkFBeUIsR0FBR0osT0FBTyxDQUFDLDZCQUFELENBQXZDOztBQUNBLElBQUlLLEdBQUcsR0FBR0wsT0FBTyxDQUFDLE9BQUQsQ0FBakI7O0FBQ0EsSUFBSU0sV0FBVyxHQUFHTixPQUFPLENBQUMsZUFBRCxDQUF6Qjs7QUFDQSxJQUFJTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLElBQUlRLGlCQUFpQixHQUFHUixPQUFPLENBQUMscUJBQUQsQ0FBL0I7O0FBQ0EsSUFBSVMsUUFBUSxHQUFHVCxPQUFPLENBQUMsWUFBRCxDQUF0Qjs7QUFLQVUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsTUFBbEMsRUFBMENDLFNBQTFDLEVBQXFEQyxLQUFyRCxFQUE0REMsS0FBNUQsRUFBbUU7QUFDbkYsTUFBSUMsY0FBSjs7QUFDQSxNQUFJQyxTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDekJGLElBQUFBLGNBQWMsR0FBR0MsU0FBUyxDQUFDLENBQUQsQ0FBMUI7QUFDQTs7QUFFRCxNQUFJRSxXQUFXLEdBQUdMLEtBQWxCO0FBQ0EsTUFBSU0sV0FBVyxHQUFHLENBQWxCOztBQUNBLFNBQU9BLFdBQVcsR0FBR1AsU0FBckIsRUFBZ0M7QUFDL0IsUUFBSVEsQ0FBQyxHQUFHZCxRQUFRLENBQUNhLFdBQUQsQ0FBaEI7QUFDQSxRQUFJRSxNQUFNLEdBQUdsQixXQUFXLENBQUNRLE1BQUQsRUFBU1MsQ0FBVCxDQUF4Qjs7QUFDQSxRQUFJQyxNQUFNLEtBQUssSUFBZixFQUFxQjtBQUNwQixVQUFJQyxPQUFPLEdBQUdwQixHQUFHLENBQUNTLE1BQUQsRUFBU1MsQ0FBVCxDQUFqQjs7QUFDQSxVQUFJLE9BQU9MLGNBQVAsS0FBMEIsV0FBOUIsRUFBMkM7QUFDMUMsWUFBSUMsU0FBUyxDQUFDQyxNQUFWLElBQW9CLENBQXhCLEVBQTJCO0FBQzFCLGdCQUFNLElBQUluQixVQUFKLENBQWUsdUVBQWYsQ0FBTjtBQUNBOztBQUNEd0IsUUFBQUEsT0FBTyxHQUFHdEIsSUFBSSxDQUFDZSxjQUFELEVBQWlCQyxTQUFTLENBQUMsQ0FBRCxDQUExQixFQUErQixDQUFDTSxPQUFELEVBQVVILFdBQVYsRUFBdUJSLE1BQXZCLENBQS9CLENBQWQ7QUFDQTs7QUFDRCxVQUFJWSxhQUFhLEdBQUcsS0FBcEI7O0FBQ0EsVUFBSVQsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNkUyxRQUFBQSxhQUFhLEdBQUduQixPQUFPLENBQUNrQixPQUFELENBQXZCO0FBQ0E7O0FBQ0QsVUFBSUMsYUFBSixFQUFtQjtBQUNsQixZQUFJQyxVQUFVLEdBQUduQixpQkFBaUIsQ0FBQ2lCLE9BQUQsQ0FBbEM7QUFDQUosUUFBQUEsV0FBVyxHQUFHVCxnQkFBZ0IsQ0FBQ0MsTUFBRCxFQUFTWSxPQUFULEVBQWtCRSxVQUFsQixFQUE4Qk4sV0FBOUIsRUFBMkNKLEtBQUssR0FBRyxDQUFuRCxDQUE5QjtBQUNBLE9BSEQsTUFHTztBQUNOLFlBQUlJLFdBQVcsSUFBSW5CLGdCQUFuQixFQUFxQztBQUNwQyxnQkFBTSxJQUFJRCxVQUFKLENBQWUsaUJBQWYsQ0FBTjtBQUNBOztBQUNERyxRQUFBQSx5QkFBeUIsQ0FBQ1MsTUFBRCxFQUFTSixRQUFRLENBQUNZLFdBQUQsQ0FBakIsRUFBZ0NJLE9BQWhDLENBQXpCO0FBQ0FKLFFBQUFBLFdBQVcsSUFBSSxDQUFmO0FBQ0E7QUFDRDs7QUFDREMsSUFBQUEsV0FBVyxJQUFJLENBQWY7QUFDQTs7QUFFRCxTQUFPRCxXQUFQO0FBQ0EsQ0F0Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBIYXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vSGFzUHJvcGVydHknKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgTGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuL0xlbmd0aE9mQXJyYXlMaWtlJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCcuL1RvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTEuMC8jc2VjLWZsYXR0ZW5pbnRvYXJyYXlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRmxhdHRlbkludG9BcnJheSh0YXJnZXQsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgpIHtcblx0dmFyIG1hcHBlckZ1bmN0aW9uO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDUpIHtcblx0XHRtYXBwZXJGdW5jdGlvbiA9IGFyZ3VtZW50c1s1XTtcblx0fVxuXG5cdHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuXHR2YXIgc291cmNlSW5kZXggPSAwO1xuXHR3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcblx0XHR2YXIgUCA9IFRvU3RyaW5nKHNvdXJjZUluZGV4KTtcblx0XHR2YXIgZXhpc3RzID0gSGFzUHJvcGVydHkoc291cmNlLCBQKTtcblx0XHRpZiAoZXhpc3RzID09PSB0cnVlKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IEdldChzb3VyY2UsIFApO1xuXHRcdFx0aWYgKHR5cGVvZiBtYXBwZXJGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gNikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiB0aGlzQXJnIGlzIHJlcXVpcmVkIHdoZW4gbWFwcGVyRnVuY3Rpb24gaXMgcHJvdmlkZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbGVtZW50ID0gQ2FsbChtYXBwZXJGdW5jdGlvbiwgYXJndW1lbnRzWzZdLCBbZWxlbWVudCwgc291cmNlSW5kZXgsIHNvdXJjZV0pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHNob3VsZEZsYXR0ZW4gPSBmYWxzZTtcblx0XHRcdGlmIChkZXB0aCA+IDApIHtcblx0XHRcdFx0c2hvdWxkRmxhdHRlbiA9IElzQXJyYXkoZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2hvdWxkRmxhdHRlbikge1xuXHRcdFx0XHR2YXIgZWxlbWVudExlbiA9IExlbmd0aE9mQXJyYXlMaWtlKGVsZW1lbnQpO1xuXHRcdFx0XHR0YXJnZXRJbmRleCA9IEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0YXJnZXRJbmRleCA+PSBNQVhfU0FGRV9JTlRFR0VSKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2luZGV4IHRvbyBsYXJnZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3codGFyZ2V0LCBUb1N0cmluZyh0YXJnZXRJbmRleCksIGVsZW1lbnQpO1xuXHRcdFx0XHR0YXJnZXRJbmRleCArPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzb3VyY2VJbmRleCArPSAxO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldEluZGV4O1xufTtcbiJdfQ==