ecffdb46e0a160b4c62fbdadff31d818
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getNameFromArbitraryWrapper;

var _instance = _interopRequireDefault(require("./instance"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function getNameFromRoot(root) {
  if (root.unrendered) {
    var type = root.unrendered.type;
    return type.name || type;
  }

  var inst = (0, _instance.default)(root);

  if (inst) {
    return inst._tag;
  }

  if (typeof root.type === 'string') {
    return root.type;
  }

  return typeof root.name === 'function' ? root.name() : '(anonymous)';
}

function getNameFromArbitraryWrapper(wrapper) {
  var nodeCount = typeof wrapper.getElements === 'function' ? wrapper.getElements().length : 0;

  switch (nodeCount) {
    case 0:
      {
        return '[empty set]';
      }

    case 1:
      {
        return getNameFromRoot(wrapper);
      }

    default:
      {
        var nodeTypeMap = {};
        wrapper.getElements().forEach(function (node) {
          var name = getNameFromRoot(node);
          nodeTypeMap[name] = (nodeTypeMap[name] || 0) + 1;
        });
        var nodeTypeList = Object.keys(nodeTypeMap);
        var nodeTypes = nodeTypeList.length === 1 ? nodeTypeList[0] : 'mixed';
        return nodeCount + " " + nodeTypes + " nodes found";
      }
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hbWUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiZ2V0TmFtZUZyb21BcmJpdHJhcnlXcmFwcGVyIiwiX2luc3RhbmNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZ2V0TmFtZUZyb21Sb290Iiwicm9vdCIsInVucmVuZGVyZWQiLCJ0eXBlIiwibmFtZSIsImluc3QiLCJfdGFnIiwid3JhcHBlciIsIm5vZGVDb3VudCIsImdldEVsZW1lbnRzIiwibGVuZ3RoIiwibm9kZVR5cGVNYXAiLCJmb3JFYWNoIiwibm9kZSIsIm5vZGVUeXBlTGlzdCIsImtleXMiLCJub2RlVHlwZXMiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQywyQkFBbEI7O0FBRUEsSUFBSUMsU0FBUyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFlBQUQsQ0FBUixDQUF0Qzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRUwsSUFBQUEsT0FBTyxFQUFFSztBQUFYLEdBQXJDO0FBQXdEOztBQVkvRixTQUFTRSxlQUFULENBQXlCQyxJQUF6QixFQUErQjtBQUU3QixNQUFJQSxJQUFJLENBQUNDLFVBQVQsRUFBcUI7QUFBQSxRQUVqQkMsSUFGaUIsR0FHZkYsSUFBSSxDQUFDQyxVQUhVLENBRWpCQyxJQUZpQjtBQUluQixXQUFPQSxJQUFJLENBQUNDLElBQUwsSUFBYUQsSUFBcEI7QUFDRDs7QUFFRCxNQUFNRSxJQUFJLEdBQUcsQ0FBQyxHQUFHVixTQUFTLENBQUNGLE9BQWQsRUFBdUJRLElBQXZCLENBQWI7O0FBRUEsTUFBSUksSUFBSixFQUFVO0FBQ1IsV0FBT0EsSUFBSSxDQUFDQyxJQUFaO0FBQ0Q7O0FBR0QsTUFBSSxPQUFPTCxJQUFJLENBQUNFLElBQVosS0FBcUIsUUFBekIsRUFBbUM7QUFDakMsV0FBT0YsSUFBSSxDQUFDRSxJQUFaO0FBQ0Q7O0FBRUQsU0FBTyxPQUFPRixJQUFJLENBQUNHLElBQVosS0FBcUIsVUFBckIsR0FBa0NILElBQUksQ0FBQ0csSUFBTCxFQUFsQyxHQUFnRCxhQUF2RDtBQUNEOztBQXNCRCxTQUFTViwyQkFBVCxDQUFxQ2EsT0FBckMsRUFBOEM7QUFDNUMsTUFBTUMsU0FBUyxHQUFHLE9BQU9ELE9BQU8sQ0FBQ0UsV0FBZixLQUErQixVQUEvQixHQUE0Q0YsT0FBTyxDQUFDRSxXQUFSLEdBQXNCQyxNQUFsRSxHQUEyRSxDQUE3Rjs7QUFFQSxVQUFRRixTQUFSO0FBQ0UsU0FBSyxDQUFMO0FBQ0U7QUFDRSxlQUFPLGFBQVA7QUFDRDs7QUFFSCxTQUFLLENBQUw7QUFDRTtBQUNFLGVBQU9SLGVBQWUsQ0FBQ08sT0FBRCxDQUF0QjtBQUNEOztBQUVIO0FBQ0U7QUFDRSxZQUFNSSxXQUFXLEdBQUcsRUFBcEI7QUFFQUosUUFBQUEsT0FBTyxDQUFDRSxXQUFSLEdBQXNCRyxPQUF0QixDQUE4QixVQUFBQyxJQUFJLEVBQUk7QUFDcEMsY0FBTVQsSUFBSSxHQUFHSixlQUFlLENBQUNhLElBQUQsQ0FBNUI7QUFDQUYsVUFBQUEsV0FBVyxDQUFDUCxJQUFELENBQVgsR0FBb0IsQ0FBQ08sV0FBVyxDQUFDUCxJQUFELENBQVgsSUFBcUIsQ0FBdEIsSUFBMkIsQ0FBL0M7QUFDRCxTQUhEO0FBSUEsWUFBTVUsWUFBWSxHQUFHekIsTUFBTSxDQUFDMEIsSUFBUCxDQUFZSixXQUFaLENBQXJCO0FBQ0EsWUFBTUssU0FBUyxHQUFHRixZQUFZLENBQUNKLE1BQWIsS0FBd0IsQ0FBeEIsR0FBNEJJLFlBQVksQ0FBQyxDQUFELENBQXhDLEdBQThDLE9BQWhFO0FBQ0EsZUFBVU4sU0FBVixTQUF1QlEsU0FBdkI7QUFDRDtBQXRCTDtBQXdCRDs7QUFFREMsTUFBTSxDQUFDMUIsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0TmFtZUZyb21BcmJpdHJhcnlXcmFwcGVyO1xuXG52YXIgX2luc3RhbmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pbnN0YW5jZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQGZ1bmN0aW9uIG5hbWVcbiAqIEByZXR1cm5zIHN0cmluZ1xuICpcbiAqIFxuICovXG5cbi8qKlxuICogR2V0cyB0aGUgbmFtZSBvZiB0aGUgbm9kZSBvciBjb21wb25lbnQgZm9yIHRoZSBTSU5HTEUgaXRlbVxuICovXG5mdW5jdGlvbiBnZXROYW1lRnJvbVJvb3Qocm9vdCkge1xuICAvLyBzaGFsbG93XG4gIGlmIChyb290LnVucmVuZGVyZWQpIHtcbiAgICBjb25zdCB7XG4gICAgICB0eXBlXG4gICAgfSA9IHJvb3QudW5yZW5kZXJlZDtcbiAgICByZXR1cm4gdHlwZS5uYW1lIHx8IHR5cGU7XG4gIH1cblxuICBjb25zdCBpbnN0ID0gKDAsIF9pbnN0YW5jZS5kZWZhdWx0KShyb290KTtcblxuICBpZiAoaW5zdCkge1xuICAgIHJldHVybiBpbnN0Ll90YWc7XG4gIH0gLy8gZGlyZWN0IG5vZGVcblxuXG4gIGlmICh0eXBlb2Ygcm9vdC50eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiByb290LnR5cGU7XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHJvb3QubmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IHJvb3QubmFtZSgpIDogJyhhbm9ueW1vdXMpJztcbn1cbi8qKlxuICogQ2FuIHRha2UgYW55IHNvcnQgb2Ygd3JhcHBlci4gQSBzaW5nbGUgbm9kZSwgYSBjb21wb25lbnQsXG4gKiBtdWx0aXBsZSBub2RlcywgbXVsdGlwbGUgY29tcG9uZW50cy5cbiAqXG4gKiBleGFtcGxlcyBvZiBvdXRwdXRzOlxuICogLSBcIkZpeHR1cmVcIlxuICogLSBcImlucHV0XCJcbiAqIC0gXCIoYW5vbnltb3VzKVwiXG4gKiAtIFwiMiBcInNwYW5cIiBub2RlcyBmb3VuZFwiXG4gKiAtIFwiMiBtaXhlZCBub2RlcyBmb3VuZFwiXG4gKlxuICogQlVHOiBXZSB1c2VkIHRvIGJlIGFibGUgdG8gZ2V0IHRoZSByb290IG5vZGUgb2YgYW4gYXJyYXkgb2YgY2hpbGRyZW4gZWxlbWVudHMgYnkgZG9pbmdcbiAqIGB3cmFwcGVyLnJvb3QudW5yZW5kZXJlZC50eXBlYFxuICpcbiAqIFRoYXQgaXMgbm8gbG9uZ2VyIGV4cG9zZWQgYW5kIEVuenltZSAzIG1heSBoYXZlIGEgYnVnIGFyb3VuZCB0aGlzLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL2VuenltZS9pc3N1ZXMvMTE1MlxuICpcbiAqIElmIHRoYXQgaXNzdWUgaXMgZml4ZWQsIHdlIG1heSBiZSBhYmxlIHRvIGJyaW5nIGJhY2sgdGhlIFwiRml4dHVyZSwgMiBcInNwYW5cIiBub2RlcyBmb3VuZFwiXG4gKi9cblxuXG5mdW5jdGlvbiBnZXROYW1lRnJvbUFyYml0cmFyeVdyYXBwZXIod3JhcHBlcikge1xuICBjb25zdCBub2RlQ291bnQgPSB0eXBlb2Ygd3JhcHBlci5nZXRFbGVtZW50cyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBwZXIuZ2V0RWxlbWVudHMoKS5sZW5ndGggOiAwO1xuXG4gIHN3aXRjaCAobm9kZUNvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJ1tlbXB0eSBzZXRdJztcbiAgICAgIH1cblxuICAgIGNhc2UgMTpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGdldE5hbWVGcm9tUm9vdCh3cmFwcGVyKTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIGNvbnN0IG5vZGVUeXBlTWFwID0ge307IC8vIGRldGVybWluZSBpZiB3ZSBoYXZlIGEgbWl4ZWQgbGlzdCBvZiBub2RlcyBvciBub3RcblxuICAgICAgICB3cmFwcGVyLmdldEVsZW1lbnRzKCkuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0TmFtZUZyb21Sb290KG5vZGUpO1xuICAgICAgICAgIG5vZGVUeXBlTWFwW25hbWVdID0gKG5vZGVUeXBlTWFwW25hbWVdIHx8IDApICsgMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG5vZGVUeXBlTGlzdCA9IE9iamVjdC5rZXlzKG5vZGVUeXBlTWFwKTtcbiAgICAgICAgY29uc3Qgbm9kZVR5cGVzID0gbm9kZVR5cGVMaXN0Lmxlbmd0aCA9PT0gMSA/IG5vZGVUeXBlTGlzdFswXSA6ICdtaXhlZCc7XG4gICAgICAgIHJldHVybiBgJHtub2RlQ291bnR9ICR7bm9kZVR5cGVzfSBub2RlcyBmb3VuZGA7XG4gICAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19