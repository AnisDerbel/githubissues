b4b9776a7e596c3dba32c2292628b1c5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reduceAssertionObject;

var _deepEqualIdent = _interopRequireDefault(require("deep-equal-ident"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function reduceAssertionObject(componentDetails, objectOrKey, potentialValue) {
  var matcherDetails = typeof objectOrKey === 'object' && !Array.isArray(objectOrKey) ? objectOrKey : (0, _defineProperty2.default)({}, objectOrKey, potentialValue);
  var equals = this && this.equals ? this.equals : _deepEqualIdent.default;
  return Object.keys(matcherDetails).reduce(function (prevVal, key) {
    var retVal = (0, _extends2.default)({}, prevVal);
    var match = equals(componentDetails[key], matcherDetails[key]);
    retVal.actual[key] = componentDetails[key];
    retVal.expected[key] = matcherDetails[key];

    if (!componentDetails.hasOwnProperty(key)) {
      retVal.missingKeys.push(key);
      retVal.pass = false;
      return retVal;
    }

    if (!match) {
      retVal.unmatchedKeys.push(key);
    }

    if (retVal.pass) {
      retVal.pass = match;
    }

    return retVal;
  }, {
    actual: {},
    expected: {},
    pass: true,
    missingKeys: [],
    unmatchedKeys: []
  });
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZUFzc2VydGlvbk9iamVjdC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJyZWR1Y2VBc3NlcnRpb25PYmplY3QiLCJfZGVlcEVxdWFsSWRlbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjb21wb25lbnREZXRhaWxzIiwib2JqZWN0T3JLZXkiLCJwb3RlbnRpYWxWYWx1ZSIsIm1hdGNoZXJEZXRhaWxzIiwiQXJyYXkiLCJpc0FycmF5IiwiZXF1YWxzIiwia2V5cyIsInJlZHVjZSIsInByZXZWYWwiLCJrZXkiLCJyZXRWYWwiLCJtYXRjaCIsImFjdHVhbCIsImV4cGVjdGVkIiwiaGFzT3duUHJvcGVydHkiLCJtaXNzaW5nS2V5cyIsInB1c2giLCJwYXNzIiwidW5tYXRjaGVkS2V5cyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLHFCQUFsQjs7QUFFQSxJQUFJQyxlQUFlLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsa0JBQUQsQ0FBUixDQUE1Qzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRUwsSUFBQUEsT0FBTyxFQUFFSztBQUFYLEdBQXJDO0FBQXdEOztBQUUvRixTQUFTSixxQkFBVCxDQUErQk0sZ0JBQS9CLEVBQWlEQyxXQUFqRCxFQUE4REMsY0FBOUQsRUFBOEU7QUFDNUUsTUFBTUMsY0FBYyxHQUFHLE9BQU9GLFdBQVAsS0FBdUIsUUFBdkIsSUFBbUMsQ0FBQ0csS0FBSyxDQUFDQyxPQUFOLENBQWNKLFdBQWQsQ0FBcEMsR0FBaUVBLFdBQWpFLHFDQUNwQkEsV0FEb0IsRUFDTkMsY0FETSxDQUF2QjtBQUdBLE1BQU1JLE1BQU0sR0FBRyxRQUFRLEtBQUtBLE1BQWIsR0FBc0IsS0FBS0EsTUFBM0IsR0FBb0NYLGVBQWUsQ0FBQ0YsT0FBbkU7QUFDQSxTQUFPSixNQUFNLENBQUNrQixJQUFQLENBQVlKLGNBQVosRUFBNEJLLE1BQTVCLENBQW1DLFVBQUNDLE9BQUQsRUFBVUMsR0FBVixFQUFrQjtBQUMxRCxRQUFNQyxNQUFNLDhCQUFRRixPQUFSLENBQVo7QUFFQSxRQUFNRyxLQUFLLEdBQUdOLE1BQU0sQ0FBQ04sZ0JBQWdCLENBQUNVLEdBQUQsQ0FBakIsRUFBd0JQLGNBQWMsQ0FBQ08sR0FBRCxDQUF0QyxDQUFwQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNFLE1BQVAsQ0FBY0gsR0FBZCxJQUFxQlYsZ0JBQWdCLENBQUNVLEdBQUQsQ0FBckM7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRyxRQUFQLENBQWdCSixHQUFoQixJQUF1QlAsY0FBYyxDQUFDTyxHQUFELENBQXJDOztBQU1BLFFBQUksQ0FBQ1YsZ0JBQWdCLENBQUNlLGNBQWpCLENBQWdDTCxHQUFoQyxDQUFMLEVBQTJDO0FBQ3pDQyxNQUFBQSxNQUFNLENBQUNLLFdBQVAsQ0FBbUJDLElBQW5CLENBQXdCUCxHQUF4QjtBQUNBQyxNQUFBQSxNQUFNLENBQUNPLElBQVAsR0FBYyxLQUFkO0FBQ0EsYUFBT1AsTUFBUDtBQUNEOztBQU1ELFFBQUksQ0FBQ0MsS0FBTCxFQUFZO0FBQ1ZELE1BQUFBLE1BQU0sQ0FBQ1EsYUFBUCxDQUFxQkYsSUFBckIsQ0FBMEJQLEdBQTFCO0FBQ0Q7O0FBT0QsUUFBSUMsTUFBTSxDQUFDTyxJQUFYLEVBQWlCO0FBQ2ZQLE1BQUFBLE1BQU0sQ0FBQ08sSUFBUCxHQUFjTixLQUFkO0FBQ0Q7O0FBRUQsV0FBT0QsTUFBUDtBQUNELEdBbkNNLEVBbUNKO0FBQ0RFLElBQUFBLE1BQU0sRUFBRSxFQURQO0FBRURDLElBQUFBLFFBQVEsRUFBRSxFQUZUO0FBR0RJLElBQUFBLElBQUksRUFBRSxJQUhMO0FBSURGLElBQUFBLFdBQVcsRUFBRSxFQUpaO0FBS0RHLElBQUFBLGFBQWEsRUFBRTtBQUxkLEdBbkNJLENBQVA7QUEwQ0Q7O0FBRURDLE1BQU0sQ0FBQzdCLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlZHVjZUFzc2VydGlvbk9iamVjdDtcblxudmFyIF9kZWVwRXF1YWxJZGVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXAtZXF1YWwtaWRlbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiByZWR1Y2VBc3NlcnRpb25PYmplY3QoY29tcG9uZW50RGV0YWlscywgb2JqZWN0T3JLZXksIHBvdGVudGlhbFZhbHVlKSB7XG4gIGNvbnN0IG1hdGNoZXJEZXRhaWxzID0gdHlwZW9mIG9iamVjdE9yS2V5ID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmplY3RPcktleSkgPyBvYmplY3RPcktleSA6IHtcbiAgICBbb2JqZWN0T3JLZXldOiBwb3RlbnRpYWxWYWx1ZVxuICB9O1xuICBjb25zdCBlcXVhbHMgPSB0aGlzICYmIHRoaXMuZXF1YWxzID8gdGhpcy5lcXVhbHMgOiBfZGVlcEVxdWFsSWRlbnQuZGVmYXVsdDtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1hdGNoZXJEZXRhaWxzKS5yZWR1Y2UoKHByZXZWYWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IHsgLi4ucHJldlZhbFxuICAgIH07XG4gICAgY29uc3QgbWF0Y2ggPSBlcXVhbHMoY29tcG9uZW50RGV0YWlsc1trZXldLCBtYXRjaGVyRGV0YWlsc1trZXldKTtcbiAgICByZXRWYWwuYWN0dWFsW2tleV0gPSBjb21wb25lbnREZXRhaWxzW2tleV07XG4gICAgcmV0VmFsLmV4cGVjdGVkW2tleV0gPSBtYXRjaGVyRGV0YWlsc1trZXldO1xuICAgIC8qXG4gICAgICogVGhpcyBjaGVjayBoZWxwcyB1cyBnaXZlIGJldHRlciBlcnJvciBtZXNzYWdlcyB3aGVuIHRoZSBjb21wb25lbnREZXRhaWxzIGRvZXNudFxuICAgICAqIGluY2x1ZGUgYSBzcGVjaWZpYyBrZXkgYXQgYWxsLlxuICAgICAqL1xuXG4gICAgaWYgKCFjb21wb25lbnREZXRhaWxzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldFZhbC5taXNzaW5nS2V5cy5wdXNoKGtleSk7XG4gICAgICByZXRWYWwucGFzcyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJldFZhbDtcbiAgICB9XG4gICAgLypcbiAgICAgKiBUaGlzIGlzIGp1c3QgYSBsaXN0IG9mIGFueXRoaW5nIHRoYXQgZmFpbHMgdG8gbWF0Y2guXG4gICAgICovXG5cblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldFZhbC51bm1hdGNoZWRLZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBXZSBvbmx5IHdhbnQgdG8gdXBkYXRlIGlmIGl0IHdhcyBwcmV2aW91cyBwYXNzLlxuICAgICAqIElmIG9uZSBmYWlscywgaXRzIGFsbCBhIGZhaWxcbiAgICAgKi9cblxuXG4gICAgaWYgKHJldFZhbC5wYXNzKSB7XG4gICAgICByZXRWYWwucGFzcyA9IG1hdGNoO1xuICAgIH1cblxuICAgIHJldHVybiByZXRWYWw7XG4gIH0sIHtcbiAgICBhY3R1YWw6IHt9LFxuICAgIGV4cGVjdGVkOiB7fSxcbiAgICBwYXNzOiB0cnVlLFxuICAgIG1pc3NpbmdLZXlzOiBbXSxcbiAgICB1bm1hdGNoZWRLZXlzOiBbXVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19