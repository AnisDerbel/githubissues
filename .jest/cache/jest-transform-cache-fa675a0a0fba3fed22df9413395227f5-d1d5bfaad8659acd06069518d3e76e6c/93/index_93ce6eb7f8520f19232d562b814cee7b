4abac858f3eb6f9b6a5508ad8b5c2651
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function get() {return m[k];} });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) {if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);}
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomHandler = void 0;

__exportStar(require("./node"), exports);
var reWhitespace = /\s+/g;

var defaultOpts = {
  normalizeWhitespace: false,
  withStartIndices: false,
  withEndIndices: false };

var DomHandler = function () {





  function DomHandler(callback, options, elementCB) {

    this.dom = [];

    this.root = new (require("./node").Document)(this.dom);

    this.done = false;

    this.tagStack = [this.root];

    this.lastNode = null;

    this.parser = null;

    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts;
    }
    if (typeof callback === "object") {
      options = callback;
      callback = undefined;
    }
    this.callback = callback !== null && callback !== void 0 ? callback : null;
    this.options = options !== null && options !== void 0 ? options : defaultOpts;
    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
  }
  DomHandler.prototype.onparserinit = function (parser) {
    this.parser = parser;
  };

  DomHandler.prototype.onreset = function () {
    var _a;
    this.dom = [];
    this.root = new (require("./node").Document)(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = (_a = this.parser) !== null && _a !== void 0 ? _a : null;
  };

  DomHandler.prototype.onend = function () {
    if (this.done)
    return;
    this.done = true;
    this.parser = null;
    this.handleCallback(null);
  };
  DomHandler.prototype.onerror = function (error) {
    this.handleCallback(error);
  };
  DomHandler.prototype.onclosetag = function () {
    this.lastNode = null;
    var elem = this.tagStack.pop();
    if (this.options.withEndIndices) {
      elem.endIndex = this.parser.endIndex;
    }
    if (this.elementCB)
    this.elementCB(elem);
  };
  DomHandler.prototype.onopentag = function (name, attribs) {
    var element = new (require("./node").Element)(name, attribs);
    this.addNode(element);
    this.tagStack.push(element);
  };
  DomHandler.prototype.ontext = function (data) {
    var normalizeWhitespace = this.options.normalizeWhitespace;
    var lastNode = this.lastNode;
    if (lastNode && lastNode.type === "text") {
        if (normalizeWhitespace) {
          lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
        } else
        {
          lastNode.data += data;
        }
      } else
    {
      if (normalizeWhitespace) {
        data = data.replace(reWhitespace, " ");
      }
      var node = new (require("./node").Text)(data);
      this.addNode(node);
      this.lastNode = node;
    }
  };
  DomHandler.prototype.oncomment = function (data) {
    if (this.lastNode && this.lastNode.type === "comment") {
        this.lastNode.data += data;
        return;
      }
    var node = new (require("./node").Comment)(data);
    this.addNode(node);
    this.lastNode = node;
  };
  DomHandler.prototype.oncommentend = function () {
    this.lastNode = null;
  };
  DomHandler.prototype.oncdatastart = function () {
    var text = new (require("./node").Text)("");
    var node = new (require("./node").NodeWithChildren)("cdata", [text]);
    this.addNode(node);
    text.parent = node;
    this.lastNode = text;
  };
  DomHandler.prototype.oncdataend = function () {
    this.lastNode = null;
  };
  DomHandler.prototype.onprocessinginstruction = function (name, data) {
    var node = new (require("./node").ProcessingInstruction)(name, data);
    this.addNode(node);
  };
  DomHandler.prototype.handleCallback = function (error) {
    if (typeof this.callback === "function") {
      this.callback(error, this.dom);
    } else
    if (error) {
      throw error;
    }
  };
  DomHandler.prototype.addNode = function (node) {
    var parent = this.tagStack[this.tagStack.length - 1];
    var previousSibling = parent.children[parent.children.length - 1];
    if (this.options.withStartIndices) {
      node.startIndex = this.parser.startIndex;
    }
    if (this.options.withEndIndices) {
      node.endIndex = this.parser.endIndex;
    }
    parent.children.push(node);
    if (previousSibling) {
      node.prev = previousSibling;
      previousSibling.next = node;
    }
    node.parent = parent;
    this.lastNode = null;
  };
  DomHandler.prototype.addDataNode = function (node) {
    this.addNode(node);
    this.lastNode = node;
  };
  return DomHandler;
}();
exports.DomHandler = DomHandler;
exports.default = DomHandler;