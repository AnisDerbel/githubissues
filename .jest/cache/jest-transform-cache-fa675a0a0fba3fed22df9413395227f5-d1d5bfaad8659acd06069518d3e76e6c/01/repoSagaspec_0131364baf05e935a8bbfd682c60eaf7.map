{"version":3,"sources":["/Users/anisderbel/Documents/apcgithubissues/src/redux/repo/__tests__/repoSaga.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {expectSaga} from 'redux-saga-test-plan';\nimport {reducer as formReducer} from 'redux-form';\nimport * as matchers from 'redux-saga-test-plan/matchers';\nimport {combineReducers} from 'redux';\nimport {createSuccessfulResponse} from '../../../__mocks__/response';\nimport repoReducer, {initialState} from '../reducer';\nimport axios from '../../axios';\nimport repoSaga from '../saga';\nimport formMock from '../../../__mocks__/form';\nimport {repoActions} from '../actions';\nimport {repoIssuesMock} from '../../../__mocks__/repo';\nimport {IApplicationState} from '../../appReducer';\n\nconst setupTest = (storeInitialState: IApplicationState) =>\n  expectSaga(repoSaga).withReducer<any, any>(\n    combineReducers({\n      form: formReducer,\n      repo: repoReducer,\n    }),\n    storeInitialState,\n  );\n\ndescribe('repoSaga', () => {\n  const page = 1;\n  describe('get github issues', () => {\n    const storeInitialState: IApplicationState = {\n      form: formMock,\n      repo: initialState,\n    };\n    it('should fetch github issues from api successfully', async () => {\n      const response = createSuccessfulResponse(repoIssuesMock);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), response]])\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.getRepoIssuesSuccess({\n            issues: response.data,\n            page,\n            hasMoreIssues: true,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        issues: {\n          ...storeState.repo.issues,\n          [page]: response.data,\n        },\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: true,\n      });\n    });\n    it('should set current page if it is fetched before', async () => {\n      const {storeState} = await setupTest({\n        ...storeInitialState,\n        repo: {\n          ...storeInitialState.repo,\n          issues: {[page]: repoIssuesMock.data},\n        },\n      })\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.setCurrentPage({\n            page,\n            hasMoreIssues: false,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: false,\n      });\n    });\n  });\n});\n"]}