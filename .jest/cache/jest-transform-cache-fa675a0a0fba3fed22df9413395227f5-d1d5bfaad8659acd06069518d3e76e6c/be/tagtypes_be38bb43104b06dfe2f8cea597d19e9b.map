{"version":3,"sources":["tagtypes.js"],"names":["Object","defineProperty","exports","value","hasChildren","isComment","isText","isCDATA","isTag","domelementtype_1","require","node","type","prototype","hasOwnProperty","call"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,OAAR,GAAkBL,OAAO,CAACM,KAAR,GAAgB,KAAK,CAAlG;;AACA,IAAIC,gBAAgB,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AAKA,SAASF,KAAT,CAAeG,IAAf,EAAqB;AACjB,SAAOF,gBAAgB,CAACD,KAAjB,CAAuBG,IAAvB,CAAP;AACH;;AACDT,OAAO,CAACM,KAAR,GAAgBA,KAAhB;;AAKA,SAASD,OAAT,CAAiBI,IAAjB,EAAuB;AACnB,SAAOA,IAAI,CAACC,IAAL,KAAc,OAArB;AACH;;AACDV,OAAO,CAACK,OAAR,GAAkBA,OAAlB;;AAKA,SAASD,MAAT,CAAgBK,IAAhB,EAAsB;AAClB,SAAOA,IAAI,CAACC,IAAL,KAAc,MAArB;AACH;;AACDV,OAAO,CAACI,MAAR,GAAiBA,MAAjB;;AAKA,SAASD,SAAT,CAAmBM,IAAnB,EAAyB;AACrB,SAAOA,IAAI,CAACC,IAAL,KAAc,SAArB;AACH;;AACDV,OAAO,CAACG,SAAR,GAAoBA,SAApB;;AAKA,SAASD,WAAT,CAAqBO,IAArB,EAA2B;AACvB,SAAOX,MAAM,CAACa,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,IAArC,EAA2C,UAA3C,CAAP;AACH;;AACDT,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;\nvar domelementtype_1 = require(\"domelementtype\");\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */\nfunction isTag(node) {\n    return domelementtype_1.isTag(node);\n}\nexports.isTag = isTag;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */\nfunction isCDATA(node) {\n    return node.type === \"cdata\" /* CDATA */;\n}\nexports.isCDATA = isCDATA;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */\nfunction isText(node) {\n    return node.type === \"text\" /* Text */;\n}\nexports.isText = isText;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */\nfunction isComment(node) {\n    return node.type === \"comment\" /* Comment */;\n}\nexports.isComment = isComment;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.\n */\nfunction hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\nexports.hasChildren = hasChildren;\n"]}