769a2ac3b92302bb3634a9e4dd4d7e8f
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Preprocessor = require('./preprocessor');

var unicode = require('../common/unicode');

var neTree = require('./named-entity-data');

var ERR = require('../common/error-codes');

var $ = unicode.CODE_POINTS;
var $$ = unicode.CODE_POINT_SEQUENCES;
var C1_CONTROLS_REFERENCE_REPLACEMENTS = {
  0x80: 0x20ac,
  0x82: 0x201a,
  0x83: 0x0192,
  0x84: 0x201e,
  0x85: 0x2026,
  0x86: 0x2020,
  0x87: 0x2021,
  0x88: 0x02c6,
  0x89: 0x2030,
  0x8a: 0x0160,
  0x8b: 0x2039,
  0x8c: 0x0152,
  0x8e: 0x017d,
  0x91: 0x2018,
  0x92: 0x2019,
  0x93: 0x201c,
  0x94: 0x201d,
  0x95: 0x2022,
  0x96: 0x2013,
  0x97: 0x2014,
  0x98: 0x02dc,
  0x99: 0x2122,
  0x9a: 0x0161,
  0x9b: 0x203a,
  0x9c: 0x0153,
  0x9e: 0x017e,
  0x9f: 0x0178
};
var HAS_DATA_FLAG = 1 << 0;
var DATA_DUPLET_FLAG = 1 << 1;
var HAS_BRANCHES_FLAG = 1 << 2;
var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;
var DATA_STATE = 'DATA_STATE';
var RCDATA_STATE = 'RCDATA_STATE';
var RAWTEXT_STATE = 'RAWTEXT_STATE';
var SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';
var PLAINTEXT_STATE = 'PLAINTEXT_STATE';
var TAG_OPEN_STATE = 'TAG_OPEN_STATE';
var END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';
var TAG_NAME_STATE = 'TAG_NAME_STATE';
var RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';
var RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';
var RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';
var RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';
var RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';
var RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';
var SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';
var SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';
var SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';
var SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';
var SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';
var SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';
var SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';
var SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';
var SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';
var SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';
var SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';
var SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';
var BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';
var ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';
var AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';
var BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';
var ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';
var ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';
var ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';
var AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';
var SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';
var BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';
var MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';
var COMMENT_START_STATE = 'COMMENT_START_STATE';
var COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';
var COMMENT_STATE = 'COMMENT_STATE';
var COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';
var COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';
var COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';
var COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';
var COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';
var COMMENT_END_STATE = 'COMMENT_END_STATE';
var COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';
var DOCTYPE_STATE = 'DOCTYPE_STATE';
var BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';
var DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';
var AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';
var AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';
var BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
var DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';
var DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';
var AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
var BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';
var AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';
var BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
var DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';
var DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';
var AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
var BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';
var CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';
var CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';
var CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';
var CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';
var NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';
var AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';
var NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';
var HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';
var DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';
var HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';
var DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';
var NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';

function isWhitespace(cp) {
  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}

function isAsciiDigit(cp) {
  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}

function isAsciiUpper(cp) {
  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}

function isAsciiLower(cp) {
  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}

function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}

function isAsciiAlphaNumeric(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}

function isAsciiUpperHexDigit(cp) {
  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;
}

function isAsciiLowerHexDigit(cp) {
  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;
}

function isAsciiHexDigit(cp) {
  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}

function toAsciiLowerCodePoint(cp) {
  return cp + 0x0020;
}

function toChar(cp) {
  if (cp <= 0xffff) {
    return String.fromCharCode(cp);
  }

  cp -= 0x10000;
  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);
}

function toAsciiLowerChar(cp) {
  return String.fromCharCode(toAsciiLowerCodePoint(cp));
}

function findNamedEntityTreeBranch(nodeIx, cp) {
  var branchCount = neTree[++nodeIx];
  var lo = ++nodeIx;
  var hi = lo + branchCount - 1;

  while (lo <= hi) {
    var mid = lo + hi >>> 1;
    var midCp = neTree[mid];

    if (midCp < cp) {
      lo = mid + 1;
    } else if (midCp > cp) {
      hi = mid - 1;
    } else {
      return neTree[mid + branchCount];
    }
  }

  return -1;
}

var Tokenizer = function () {
  function Tokenizer() {
    (0, _classCallCheck2.default)(this, Tokenizer);
    this.preprocessor = new Preprocessor();
    this.tokenQueue = [];
    this.allowCDATA = false;
    this.state = DATA_STATE;
    this.returnState = '';
    this.charRefCode = -1;
    this.tempBuff = [];
    this.lastStartTagName = '';
    this.consumedAfterSnapshot = -1;
    this.active = false;
    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = null;
  }

  (0, _createClass2.default)(Tokenizer, [{
    key: "_err",
    value: function _err() {}
  }, {
    key: "_errOnNextCodePoint",
    value: function _errOnNextCodePoint(err) {
      this._consume();

      this._err(err);

      this._unconsume();
    }
  }, {
    key: "getNextToken",
    value: function getNextToken() {
      while (!this.tokenQueue.length && this.active) {
        this.consumedAfterSnapshot = 0;

        var cp = this._consume();

        if (!this._ensureHibernation()) {
          this[this.state](cp);
        }
      }

      return this.tokenQueue.shift();
    }
  }, {
    key: "write",
    value: function write(chunk, isLastChunk) {
      this.active = true;
      this.preprocessor.write(chunk, isLastChunk);
    }
  }, {
    key: "insertHtmlAtCurrentPos",
    value: function insertHtmlAtCurrentPos(chunk) {
      this.active = true;
      this.preprocessor.insertHtmlAtCurrentPos(chunk);
    }
  }, {
    key: "_ensureHibernation",
    value: function _ensureHibernation() {
      if (this.preprocessor.endOfChunkHit) {
        for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
          this.preprocessor.retreat();
        }

        this.active = false;
        this.tokenQueue.push({
          type: Tokenizer.HIBERNATION_TOKEN
        });
        return true;
      }

      return false;
    }
  }, {
    key: "_consume",
    value: function _consume() {
      this.consumedAfterSnapshot++;
      return this.preprocessor.advance();
    }
  }, {
    key: "_unconsume",
    value: function _unconsume() {
      this.consumedAfterSnapshot--;
      this.preprocessor.retreat();
    }
  }, {
    key: "_reconsumeInState",
    value: function _reconsumeInState(state) {
      this.state = state;

      this._unconsume();
    }
  }, {
    key: "_consumeSequenceIfMatch",
    value: function _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
      var consumedCount = 0;
      var isMatch = true;
      var patternLength = pattern.length;
      var patternPos = 0;
      var cp = startCp;
      var patternCp = void 0;

      for (; patternPos < patternLength; patternPos++) {
        if (patternPos > 0) {
          cp = this._consume();
          consumedCount++;
        }

        if (cp === $.EOF) {
          isMatch = false;
          break;
        }

        patternCp = pattern[patternPos];

        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
          isMatch = false;
          break;
        }
      }

      if (!isMatch) {
        while (consumedCount--) {
          this._unconsume();
        }
      }

      return isMatch;
    }
  }, {
    key: "_isTempBufferEqualToScriptString",
    value: function _isTempBufferEqualToScriptString() {
      if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
        return false;
      }

      for (var i = 0; i < this.tempBuff.length; i++) {
        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "_createStartTagToken",
    value: function _createStartTagToken() {
      this.currentToken = {
        type: Tokenizer.START_TAG_TOKEN,
        tagName: '',
        selfClosing: false,
        ackSelfClosing: false,
        attrs: []
      };
    }
  }, {
    key: "_createEndTagToken",
    value: function _createEndTagToken() {
      this.currentToken = {
        type: Tokenizer.END_TAG_TOKEN,
        tagName: '',
        selfClosing: false,
        attrs: []
      };
    }
  }, {
    key: "_createCommentToken",
    value: function _createCommentToken() {
      this.currentToken = {
        type: Tokenizer.COMMENT_TOKEN,
        data: ''
      };
    }
  }, {
    key: "_createDoctypeToken",
    value: function _createDoctypeToken(initialName) {
      this.currentToken = {
        type: Tokenizer.DOCTYPE_TOKEN,
        name: initialName,
        forceQuirks: false,
        publicId: null,
        systemId: null
      };
    }
  }, {
    key: "_createCharacterToken",
    value: function _createCharacterToken(type, ch) {
      this.currentCharacterToken = {
        type: type,
        chars: ch
      };
    }
  }, {
    key: "_createEOFToken",
    value: function _createEOFToken() {
      this.currentToken = {
        type: Tokenizer.EOF_TOKEN
      };
    }
  }, {
    key: "_createAttr",
    value: function _createAttr(attrNameFirstCh) {
      this.currentAttr = {
        name: attrNameFirstCh,
        value: ''
      };
    }
  }, {
    key: "_leaveAttrName",
    value: function _leaveAttrName(toState) {
      if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
        this.currentToken.attrs.push(this.currentAttr);
      } else {
        this._err(ERR.duplicateAttribute);
      }

      this.state = toState;
    }
  }, {
    key: "_leaveAttrValue",
    value: function _leaveAttrValue(toState) {
      this.state = toState;
    }
  }, {
    key: "_emitCurrentToken",
    value: function _emitCurrentToken() {
      this._emitCurrentCharacterToken();

      var ct = this.currentToken;
      this.currentToken = null;

      if (ct.type === Tokenizer.START_TAG_TOKEN) {
        this.lastStartTagName = ct.tagName;
      } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
        if (ct.attrs.length > 0) {
          this._err(ERR.endTagWithAttributes);
        }

        if (ct.selfClosing) {
          this._err(ERR.endTagWithTrailingSolidus);
        }
      }

      this.tokenQueue.push(ct);
    }
  }, {
    key: "_emitCurrentCharacterToken",
    value: function _emitCurrentCharacterToken() {
      if (this.currentCharacterToken) {
        this.tokenQueue.push(this.currentCharacterToken);
        this.currentCharacterToken = null;
      }
    }
  }, {
    key: "_emitEOFToken",
    value: function _emitEOFToken() {
      this._createEOFToken();

      this._emitCurrentToken();
    }
  }, {
    key: "_appendCharToCurrentCharacterToken",
    value: function _appendCharToCurrentCharacterToken(type, ch) {
      if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
        this._emitCurrentCharacterToken();
      }

      if (this.currentCharacterToken) {
        this.currentCharacterToken.chars += ch;
      } else {
        this._createCharacterToken(type, ch);
      }
    }
  }, {
    key: "_emitCodePoint",
    value: function _emitCodePoint(cp) {
      var type = Tokenizer.CHARACTER_TOKEN;

      if (isWhitespace(cp)) {
        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
      } else if (cp === $.NULL) {
        type = Tokenizer.NULL_CHARACTER_TOKEN;
      }

      this._appendCharToCurrentCharacterToken(type, toChar(cp));
    }
  }, {
    key: "_emitSeveralCodePoints",
    value: function _emitSeveralCodePoints(codePoints) {
      for (var i = 0; i < codePoints.length; i++) {
        this._emitCodePoint(codePoints[i]);
      }
    }
  }, {
    key: "_emitChars",
    value: function _emitChars(ch) {
      this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
    }
  }, {
    key: "_matchNamedCharacterReference",
    value: function _matchNamedCharacterReference(startCp) {
      var result = null;
      var excess = 1;
      var i = findNamedEntityTreeBranch(0, startCp);
      this.tempBuff.push(startCp);

      while (i > -1) {
        var current = neTree[i];
        var inNode = current < MAX_BRANCH_MARKER_VALUE;
        var nodeWithData = inNode && current & HAS_DATA_FLAG;

        if (nodeWithData) {
          result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
          excess = 0;
        }

        var cp = this._consume();

        this.tempBuff.push(cp);
        excess++;

        if (cp === $.EOF) {
          break;
        }

        if (inNode) {
          i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
        } else {
          i = cp === current ? ++i : -1;
        }
      }

      while (excess--) {
        this.tempBuff.pop();

        this._unconsume();
      }

      return result;
    }
  }, {
    key: "_isCharacterReferenceInAttribute",
    value: function _isCharacterReferenceInAttribute() {
      return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
    }
  }, {
    key: "_isCharacterReferenceAttributeQuirk",
    value: function _isCharacterReferenceAttributeQuirk(withSemicolon) {
      if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
        var nextCp = this._consume();

        this._unconsume();

        return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
      }

      return false;
    }
  }, {
    key: "_flushCodePointsConsumedAsCharacterReference",
    value: function _flushCodePointsConsumedAsCharacterReference() {
      if (this._isCharacterReferenceInAttribute()) {
        for (var i = 0; i < this.tempBuff.length; i++) {
          this.currentAttr.value += toChar(this.tempBuff[i]);
        }
      } else {
        this._emitSeveralCodePoints(this.tempBuff);
      }

      this.tempBuff = [];
    }
  }, {
    key: DATA_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.LESS_THAN_SIGN) {
        this.state = TAG_OPEN_STATE;
      } else if (cp === $.AMPERSAND) {
        this.returnState = DATA_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitCodePoint(cp);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: RCDATA_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.AMPERSAND) {
        this.returnState = RCDATA_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = RCDATA_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: RAWTEXT_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.LESS_THAN_SIGN) {
        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: PLAINTEXT_STATE,
    value: function value(cp) {
      this.preprocessor.dropParsedChunk();

      if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: TAG_OPEN_STATE,
    value: function value(cp) {
      if (cp === $.EXCLAMATION_MARK) {
        this.state = MARKUP_DECLARATION_OPEN_STATE;
      } else if (cp === $.SOLIDUS) {
        this.state = END_TAG_OPEN_STATE;
      } else if (isAsciiLetter(cp)) {
        this._createStartTagToken();

        this._reconsumeInState(TAG_NAME_STATE);
      } else if (cp === $.QUESTION_MARK) {
        this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);

        this._createCommentToken();

        this._reconsumeInState(BOGUS_COMMENT_STATE);
      } else if (cp === $.EOF) {
        this._err(ERR.eofBeforeTagName);

        this._emitChars('<');

        this._emitEOFToken();
      } else {
        this._err(ERR.invalidFirstCharacterOfTagName);

        this._emitChars('<');

        this._reconsumeInState(DATA_STATE);
      }
    }
  }, {
    key: END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(TAG_NAME_STATE);
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingEndTagName);

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofBeforeTagName);

        this._emitChars('</');

        this._emitEOFToken();
      } else {
        this._err(ERR.invalidFirstCharacterOfTagName);

        this._createCommentToken();

        this._reconsumeInState(BOGUS_COMMENT_STATE);
      }
    }
  }, {
    key: TAG_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;
      } else if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentToken.tagName += toChar(cp);
      }
    }
  }, {
    key: RCDATA_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RCDATA_END_TAG_OPEN_STATE;
      } else {
        this._emitChars('<');

        this._reconsumeInState(RCDATA_STATE);
      }
    }
  }, {
    key: RCDATA_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(RCDATA_STATE);
      }
    }
  }, {
    key: RCDATA_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          }

          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          }

          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;

            this._emitCurrentToken();

            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(RCDATA_STATE);
      }
    }
  }, {
    key: RAWTEXT_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RAWTEXT_END_TAG_OPEN_STATE;
      } else {
        this._emitChars('<');

        this._reconsumeInState(RAWTEXT_STATE);
      }
    }
  }, {
    key: RAWTEXT_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(RAWTEXT_STATE);
      }
    }
  }, {
    key: RAWTEXT_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          }

          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          }

          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();

            this.state = DATA_STATE;
            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(RAWTEXT_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
      } else if (cp === $.EXCLAMATION_MARK) {
        this.state = SCRIPT_DATA_ESCAPE_START_STATE;

        this._emitChars('<!');
      } else {
        this._emitChars('<');

        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          } else if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();

            this.state = DATA_STATE;
            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPE_START_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;

        this._emitChars('-');
      } else {
        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPE_START_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;

        this._emitChars('-');
      } else {
        this._reconsumeInState(SCRIPT_DATA_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPED_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPED_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPED_DASH_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;

        this._emitChars('>');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
      } else if (isAsciiLetter(cp)) {
        this.tempBuff = [];

        this._emitChars('<');

        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
      } else {
        this._emitChars('<');

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE,
    value: function value(cp) {
      if (isAsciiLetter(cp)) {
        this._createEndTagToken();

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
      } else {
        this._emitChars('</');

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE,
    value: function value(cp) {
      if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
      } else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
      } else {
        if (this.lastStartTagName === this.currentToken.tagName) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
            return;
          }

          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
            return;
          }

          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();

            this.state = DATA_STATE;
            return;
          }
        }

        this._emitChars('</');

        this._emitSeveralCodePoints(this.tempBuff);

        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE,
    value: function value(cp) {
      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;

        this._emitCodePoint(cp);
      } else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));

        this._emitCodePoint(cp);
      } else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);

        this._emitCodePoint(cp);
      } else {
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

        this._emitChars('<');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;

        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

        this._emitChars('<');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this._emitChars('-');
      } else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;

        this._emitChars('<');
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;

        this._emitChars('>');
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitChars(unicode.REPLACEMENT_CHARACTER);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInScriptHtmlCommentLikeText);

        this._emitEOFToken();
      } else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
      }
    }
  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;

        this._emitChars('/');
      } else {
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
      }
    }
  }, {
    key: SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE,
    value: function value(cp) {
      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
      } else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));

        this._emitCodePoint(cp);
      } else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);

        this._emitCodePoint(cp);
      } else {
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
      }
    }
  }, {
    key: BEFORE_ATTRIBUTE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
        this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
      } else if (cp === $.EQUALS_SIGN) {
        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);

        this._createAttr('=');

        this.state = ATTRIBUTE_NAME_STATE;
      } else {
        this._createAttr('');

        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
      }
    }
  }, {
    key: ATTRIBUTE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);

        this._unconsume();
      } else if (cp === $.EQUALS_SIGN) {
        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
      } else if (isAsciiUpper(cp)) {
        this.currentAttr.name += toAsciiLowerChar(cp);
      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
        this._err(ERR.unexpectedCharacterInAttributeName);

        this.currentAttr.name += toChar(cp);
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;
      } else {
        this.currentAttr.name += toChar(cp);
      }
    }
  }, {
    key: AFTER_ATTRIBUTE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.SOLIDUS) {
        this.state = SELF_CLOSING_START_TAG_STATE;
      } else if (cp === $.EQUALS_SIGN) {
        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this._createAttr('');

        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
      }
    }
  }, {
    key: BEFORE_ATTRIBUTE_VALUE_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.QUOTATION_MARK) {
        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingAttributeValue);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else {
        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
      }
    }
  }, {
    key: ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.QUOTATION_MARK) {
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
      } else if (cp === $.AMPERSAND) {
        this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentAttr.value += toChar(cp);
      }
    }
  }, {
    key: ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.APOSTROPHE) {
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
      } else if (cp === $.AMPERSAND) {
        this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentAttr.value += toChar(cp);
      }
    }
  }, {
    key: ATTRIBUTE_VALUE_UNQUOTED_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
      } else if (cp === $.AMPERSAND) {
        this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
        this.state = CHARACTER_REFERENCE_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrValue(DATA_STATE);

        this._emitCurrentToken();
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);

        this.currentAttr.value += toChar(cp);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this.currentAttr.value += toChar(cp);
      }
    }
  }, {
    key: AFTER_ATTRIBUTE_VALUE_QUOTED_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
      } else if (cp === $.SOLIDUS) {
        this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrValue(DATA_STATE);

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this._err(ERR.missingWhitespaceBetweenAttributes);

        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
      }
    }
  }, {
    key: SELF_CLOSING_START_TAG_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.selfClosing = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInTag);

        this._emitEOFToken();
      } else {
        this._err(ERR.unexpectedSolidusInTag);

        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
      }
    }
  }, {
    key: BOGUS_COMMENT_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._emitCurrentToken();

        this._emitEOFToken();
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
      } else {
        this.currentToken.data += toChar(cp);
      }
    }
  }, {
    key: MARKUP_DECLARATION_OPEN_STATE,
    value: function value(cp) {
      if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
        this._createCommentToken();

        this.state = COMMENT_START_STATE;
      } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
        this.state = DOCTYPE_STATE;
      } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
        if (this.allowCDATA) {
          this.state = CDATA_SECTION_STATE;
        } else {
          this._err(ERR.cdataInHtmlContent);

          this._createCommentToken();

          this.currentToken.data = '[CDATA[';
          this.state = BOGUS_COMMENT_STATE;
        }
      } else if (!this._ensureHibernation()) {
          this._err(ERR.incorrectlyOpenedComment);

          this._createCommentToken();

          this._reconsumeInState(BOGUS_COMMENT_STATE);
        }
    }
  }, {
    key: COMMENT_START_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_START_DASH_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptClosingOfEmptyComment);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else {
        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: COMMENT_START_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_END_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptClosingOfEmptyComment);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '-';

        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: COMMENT_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_END_DASH_STATE;
      } else if (cp === $.LESS_THAN_SIGN) {
        this.currentToken.data += '<';
        this.state = COMMENT_LESS_THAN_SIGN_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += toChar(cp);
      }
    }
  }, {
    key: COMMENT_LESS_THAN_SIGN_STATE,
    value: function value(cp) {
      if (cp === $.EXCLAMATION_MARK) {
        this.currentToken.data += '!';
        this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
      } else if (cp === $.LESS_THAN_SIGN) {
        this.currentToken.data += '!';
      } else {
        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: COMMENT_LESS_THAN_SIGN_BANG_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
      } else {
        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
      } else {
        this._reconsumeInState(COMMENT_END_DASH_STATE);
      }
    }
  }, {
    key: COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE,
    value: function value(cp) {
      if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {
        this._err(ERR.nestedComment);
      }

      this._reconsumeInState(COMMENT_END_STATE);
    }
  }, {
    key: COMMENT_END_DASH_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.state = COMMENT_END_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '-';

        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: COMMENT_END_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EXCLAMATION_MARK) {
        this.state = COMMENT_END_BANG_STATE;
      } else if (cp === $.HYPHEN_MINUS) {
        this.currentToken.data += '-';
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '--';

        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: COMMENT_END_BANG_STATE,
    value: function value(cp) {
      if (cp === $.HYPHEN_MINUS) {
        this.currentToken.data += '--!';
        this.state = COMMENT_END_DASH_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.incorrectlyClosedComment);

        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInComment);

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.data += '--!';

        this._reconsumeInState(COMMENT_STATE);
      }
    }
  }, {
    key: DOCTYPE_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_DOCTYPE_NAME_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this._createDoctypeToken(null);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingWhitespaceBeforeDoctypeName);

        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
      }
    }
  }, {
    key: BEFORE_DOCTYPE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (isAsciiUpper(cp)) {
        this._createDoctypeToken(toAsciiLowerChar(cp));

        this.state = DOCTYPE_NAME_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);

        this.state = DOCTYPE_NAME_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypeName);

        this._createDoctypeToken(null);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this._createDoctypeToken(null);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._createDoctypeToken(toChar(cp));

        this.state = DOCTYPE_NAME_STATE;
      }
    }
  }, {
    key: DOCTYPE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = AFTER_DOCTYPE_NAME_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (isAsciiUpper(cp)) {
        this.currentToken.name += toAsciiLowerChar(cp);
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.name += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.name += toChar(cp);
      }
    }
  }, {
    key: AFTER_DOCTYPE_NAME_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
        this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
      } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
        this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
      } else if (!this._ensureHibernation()) {
          this._err(ERR.invalidCharacterSequenceAfterDoctypeName);

          this.currentToken.forceQuirks = true;

          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    }
  }, {
    key: AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
      } else if (cp === $.QUOTATION_MARK) {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);

        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);

        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.QUOTATION_MARK) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.QUOTATION_MARK) {
        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.publicId += toChar(cp);
      }
    }
  }, {
    key: DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.APOSTROPHE) {
        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypePublicIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.publicId += toChar(cp);
      }
    }
  }, {
    key: AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.QUOTATION_MARK) {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
      } else if (cp === $.QUOTATION_MARK) {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);

        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
      } else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.missingDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;
        this.state = DATA_STATE;

        this._emitCurrentToken();
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.QUOTATION_MARK) {
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.systemId += toChar(cp);
      }
    }
  }, {
    key: DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE,
    value: function value(cp) {
      if (cp === $.APOSTROPHE) {
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);

        this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
      } else if (cp === $.GREATER_THAN_SIGN) {
        this._err(ERR.abruptDoctypeSystemIdentifier);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this.currentToken.systemId += toChar(cp);
      }
    }
  }, {
    key: AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE,
    value: function value(cp) {
      if (isWhitespace(cp)) {
        return;
      }

      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInDoctype);

        this.currentToken.forceQuirks = true;

        this._emitCurrentToken();

        this._emitEOFToken();
      } else {
        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);

        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
      }
    }
  }, {
    key: BOGUS_DOCTYPE_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();

        this.state = DATA_STATE;
      } else if (cp === $.NULL) {
        this._err(ERR.unexpectedNullCharacter);
      } else if (cp === $.EOF) {
        this._emitCurrentToken();

        this._emitEOFToken();
      }
    }
  }, {
    key: CDATA_SECTION_STATE,
    value: function value(cp) {
      if (cp === $.RIGHT_SQUARE_BRACKET) {
        this.state = CDATA_SECTION_BRACKET_STATE;
      } else if (cp === $.EOF) {
        this._err(ERR.eofInCdata);

        this._emitEOFToken();
      } else {
        this._emitCodePoint(cp);
      }
    }
  }, {
    key: CDATA_SECTION_BRACKET_STATE,
    value: function value(cp) {
      if (cp === $.RIGHT_SQUARE_BRACKET) {
        this.state = CDATA_SECTION_END_STATE;
      } else {
        this._emitChars(']');

        this._reconsumeInState(CDATA_SECTION_STATE);
      }
    }
  }, {
    key: CDATA_SECTION_END_STATE,
    value: function value(cp) {
      if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
      } else if (cp === $.RIGHT_SQUARE_BRACKET) {
        this._emitChars(']');
      } else {
        this._emitChars(']]');

        this._reconsumeInState(CDATA_SECTION_STATE);
      }
    }
  }, {
    key: CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      this.tempBuff = [$.AMPERSAND];

      if (cp === $.NUMBER_SIGN) {
        this.tempBuff.push(cp);
        this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
      } else if (isAsciiAlphaNumeric(cp)) {
        this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
      } else {
        this._flushCodePointsConsumedAsCharacterReference();

        this._reconsumeInState(this.returnState);
      }
    }
  }, {
    key: NAMED_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      var matchResult = this._matchNamedCharacterReference(cp);

      if (this._ensureHibernation()) {
        this.tempBuff = [$.AMPERSAND];
      } else if (matchResult) {
        var withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;

        if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
          if (!withSemicolon) {
            this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
          }

          this.tempBuff = matchResult;
        }

        this._flushCodePointsConsumedAsCharacterReference();

        this.state = this.returnState;
      } else {
        this._flushCodePointsConsumedAsCharacterReference();

        this.state = AMBIGUOUS_AMPERSAND_STATE;
      }
    }
  }, {
    key: AMBIGUOUS_AMPERSAND_STATE,
    value: function value(cp) {
      if (isAsciiAlphaNumeric(cp)) {
        if (this._isCharacterReferenceInAttribute()) {
          this.currentAttr.value += toChar(cp);
        } else {
          this._emitCodePoint(cp);
        }
      } else {
        if (cp === $.SEMICOLON) {
          this._err(ERR.unknownNamedCharacterReference);
        }

        this._reconsumeInState(this.returnState);
      }
    }
  }, {
    key: NUMERIC_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      this.charRefCode = 0;

      if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {
        this.tempBuff.push(cp);
        this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
      } else {
        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
      }
    }
  }, {
    key: HEXADEMICAL_CHARACTER_REFERENCE_START_STATE,
    value: function value(cp) {
      if (isAsciiHexDigit(cp)) {
        this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
      } else {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference);

        this._flushCodePointsConsumedAsCharacterReference();

        this._reconsumeInState(this.returnState);
      }
    }
  }, {
    key: DECIMAL_CHARACTER_REFERENCE_START_STATE,
    value: function value(cp) {
      if (isAsciiDigit(cp)) {
        this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
      } else {
        this._err(ERR.absenceOfDigitsInNumericCharacterReference);

        this._flushCodePointsConsumedAsCharacterReference();

        this._reconsumeInState(this.returnState);
      }
    }
  }, {
    key: HEXADEMICAL_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      if (isAsciiUpperHexDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 0x37;
      } else if (isAsciiLowerHexDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 0x57;
      } else if (isAsciiDigit(cp)) {
        this.charRefCode = this.charRefCode * 16 + cp - 0x30;
      } else if (cp === $.SEMICOLON) {
        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
      } else {
        this._err(ERR.missingSemicolonAfterCharacterReference);

        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
      }
    }
  }, {
    key: DECIMAL_CHARACTER_REFERENCE_STATE,
    value: function value(cp) {
      if (isAsciiDigit(cp)) {
        this.charRefCode = this.charRefCode * 10 + cp - 0x30;
      } else if (cp === $.SEMICOLON) {
        this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
      } else {
        this._err(ERR.missingSemicolonAfterCharacterReference);

        this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
      }
    }
  }, {
    key: NUMERIC_CHARACTER_REFERENCE_END_STATE,
    value: function value() {
      if (this.charRefCode === $.NULL) {
        this._err(ERR.nullCharacterReference);

        this.charRefCode = $.REPLACEMENT_CHARACTER;
      } else if (this.charRefCode > 0x10ffff) {
        this._err(ERR.characterReferenceOutsideUnicodeRange);

        this.charRefCode = $.REPLACEMENT_CHARACTER;
      } else if (unicode.isSurrogate(this.charRefCode)) {
        this._err(ERR.surrogateCharacterReference);

        this.charRefCode = $.REPLACEMENT_CHARACTER;
      } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {
        this._err(ERR.noncharacterCharacterReference);
      } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {
        this._err(ERR.controlCharacterReference);

        var replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];

        if (replacement) {
          this.charRefCode = replacement;
        }
      }

      this.tempBuff = [this.charRefCode];

      this._flushCodePointsConsumedAsCharacterReference();

      this._reconsumeInState(this.returnState);
    }
  }]);
  return Tokenizer;
}();

Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';
Tokenizer.MODE = {
  DATA: DATA_STATE,
  RCDATA: RCDATA_STATE,
  RAWTEXT: RAWTEXT_STATE,
  SCRIPT_DATA: SCRIPT_DATA_STATE,
  PLAINTEXT: PLAINTEXT_STATE
};

Tokenizer.getTokenAttr = function (token, attrName) {
  for (var i = token.attrs.length - 1; i >= 0; i--) {
    if (token.attrs[i].name === attrName) {
      return token.attrs[i].value;
    }
  }

  return null;
};

module.exports = Tokenizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,