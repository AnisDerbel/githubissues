1a298fb0b4fc3c946d7e515f0e5cee48
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _enzyme = require("enzyme");

var _html = _interopRequireDefault(require("../utils/html"));

var _name = _interopRequireDefault(require("../utils/name"));

var _single = _interopRequireDefault(require("../utils/single"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function toContainReact(enzymeWrapper, reactInstance) {
  var wrappedInstance = (0, _enzyme.shallow)(reactInstance);
  var pass = enzymeWrapper.contains(reactInstance);
  return {
    pass: pass,
    message: "Expected <" + (0, _name.default)(enzymeWrapper) + "> to contain " + (0, _html.default)(wrappedInstance) + " but it was not found.",
    negatedMessage: "Expected <" + (0, _name.default)(enzymeWrapper) + "> not to contain " + (0, _html.default)(wrappedInstance) + " but it does.",
    contextualInformation: {
      actual: "HTML Output of <" + (0, _name.default)(enzymeWrapper) + ">:\n " + (0, _html.default)(enzymeWrapper)
    }
  };
}

var _default = (0, _single.default)(toContainReact);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvQ29udGFpblJlYWN0LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9lbnp5bWUiLCJyZXF1aXJlIiwiX2h0bWwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX25hbWUiLCJfc2luZ2xlIiwib2JqIiwiX19lc01vZHVsZSIsInRvQ29udGFpblJlYWN0IiwiZW56eW1lV3JhcHBlciIsInJlYWN0SW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJzaGFsbG93IiwicGFzcyIsImNvbnRhaW5zIiwibWVzc2FnZSIsIm5lZ2F0ZWRNZXNzYWdlIiwiY29udGV4dHVhbEluZm9ybWF0aW9uIiwiYWN0dWFsIiwiX2RlZmF1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsSUFBSUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFyQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsZUFBRCxDQUFSLENBQWxDOztBQUVBLElBQUlHLEtBQUssR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sQ0FBQyxlQUFELENBQVIsQ0FBbEM7O0FBRUEsSUFBSUksT0FBTyxHQUFHRixzQkFBc0IsQ0FBQ0YsT0FBTyxDQUFDLGlCQUFELENBQVIsQ0FBcEM7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVQLElBQUFBLE9BQU8sRUFBRU87QUFBWCxHQUFyQztBQUF3RDs7QUFTL0YsU0FBU0UsY0FBVCxDQUF3QkMsYUFBeEIsRUFBdUNDLGFBQXZDLEVBQXNEO0FBQ3BELE1BQU1DLGVBQWUsR0FBRyxDQUFDLEdBQUdYLE9BQU8sQ0FBQ1ksT0FBWixFQUFxQkYsYUFBckIsQ0FBeEI7QUFDQSxNQUFNRyxJQUFJLEdBQUdKLGFBQWEsQ0FBQ0ssUUFBZCxDQUF1QkosYUFBdkIsQ0FBYjtBQUNBLFNBQU87QUFDTEcsSUFBQUEsSUFBSSxFQUFKQSxJQURLO0FBRUxFLElBQUFBLE9BQU8saUJBQWUsQ0FBQyxHQUFHWCxLQUFLLENBQUNMLE9BQVYsRUFBbUJVLGFBQW5CLENBQWYscUJBQWdFLENBQUMsR0FBR1AsS0FBSyxDQUFDSCxPQUFWLEVBQW1CWSxlQUFuQixDQUFoRSwyQkFGRjtBQUdMSyxJQUFBQSxjQUFjLGlCQUFlLENBQUMsR0FBR1osS0FBSyxDQUFDTCxPQUFWLEVBQW1CVSxhQUFuQixDQUFmLHlCQUFvRSxDQUFDLEdBQUdQLEtBQUssQ0FBQ0gsT0FBVixFQUFtQlksZUFBbkIsQ0FBcEUsa0JBSFQ7QUFJTE0sSUFBQUEscUJBQXFCLEVBQUU7QUFDckJDLE1BQUFBLE1BQU0sdUJBQXFCLENBQUMsR0FBR2QsS0FBSyxDQUFDTCxPQUFWLEVBQW1CVSxhQUFuQixDQUFyQixhQUE4RCxDQUFDLEdBQUdQLEtBQUssQ0FBQ0gsT0FBVixFQUFtQlUsYUFBbkI7QUFEL0M7QUFKbEIsR0FBUDtBQVFEOztBQUVELElBQUlVLFFBQVEsR0FBRyxDQUFDLEdBQUdkLE9BQU8sQ0FBQ04sT0FBWixFQUFxQlMsY0FBckIsQ0FBZjs7QUFFQVgsT0FBTyxDQUFDRSxPQUFSLEdBQWtCb0IsUUFBbEI7QUFDQUMsTUFBTSxDQUFDdkIsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2VuenltZSA9IHJlcXVpcmUoXCJlbnp5bWVcIik7XG5cbnZhciBfaHRtbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2h0bWxcIikpO1xuXG52YXIgX25hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9uYW1lXCIpKTtcblxudmFyIF9zaW5nbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9zaW5nbGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiAqXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHRvQ29udGFpblJlYWN0QXNzZXJ0aW9uXG4gKiBcbiAqL1xuZnVuY3Rpb24gdG9Db250YWluUmVhY3QoZW56eW1lV3JhcHBlciwgcmVhY3RJbnN0YW5jZSkge1xuICBjb25zdCB3cmFwcGVkSW5zdGFuY2UgPSAoMCwgX2VuenltZS5zaGFsbG93KShyZWFjdEluc3RhbmNlKTtcbiAgY29uc3QgcGFzcyA9IGVuenltZVdyYXBwZXIuY29udGFpbnMocmVhY3RJbnN0YW5jZSk7XG4gIHJldHVybiB7XG4gICAgcGFzcyxcbiAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgPCR7KDAsIF9uYW1lLmRlZmF1bHQpKGVuenltZVdyYXBwZXIpfT4gdG8gY29udGFpbiAkeygwLCBfaHRtbC5kZWZhdWx0KSh3cmFwcGVkSW5zdGFuY2UpfSBidXQgaXQgd2FzIG5vdCBmb3VuZC5gLFxuICAgIG5lZ2F0ZWRNZXNzYWdlOiBgRXhwZWN0ZWQgPCR7KDAsIF9uYW1lLmRlZmF1bHQpKGVuenltZVdyYXBwZXIpfT4gbm90IHRvIGNvbnRhaW4gJHsoMCwgX2h0bWwuZGVmYXVsdCkod3JhcHBlZEluc3RhbmNlKX0gYnV0IGl0IGRvZXMuYCxcbiAgICBjb250ZXh0dWFsSW5mb3JtYXRpb246IHtcbiAgICAgIGFjdHVhbDogYEhUTUwgT3V0cHV0IG9mIDwkeygwLCBfbmFtZS5kZWZhdWx0KShlbnp5bWVXcmFwcGVyKX0+OlxcbiAkeygwLCBfaHRtbC5kZWZhdWx0KShlbnp5bWVXcmFwcGVyKX1gXG4gICAgfVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3NpbmdsZS5kZWZhdWx0KSh0b0NvbnRhaW5SZWFjdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19