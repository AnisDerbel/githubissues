b2bc19ec2b0293ed5771430ef7d549ac
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

var _enzymeMatchers = _interopRequireDefault(require("enzyme-matchers"));

var _serializer = _interopRequireDefault(require("enzyme-to-json/serializer"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}










if (global.bootstrapEnzymeEnvironment) {var _require =


  require('jest-environment-enzyme/lib/setup'),exposeGlobals = _require.exposeGlobals;

  exposeGlobals();
}


expect.addSnapshotSerializer(_serializer.default);

var matchers = {};
Object.keys(_enzymeMatchers.default).forEach(function (matcherKey) {
  var matcher = require("@babel/runtime/helpers/defineProperty")({},
  matcherKey, function (wrapper) {var _enzymeMatchers$defau;for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}
    var result = (_enzymeMatchers$defau = _enzymeMatchers.default[matcherKey]).call.apply(_enzymeMatchers$defau, [this, wrapper].concat(args));

    var _message = this.isNot ? result.negatedMessage : result.message;

    if (result.contextualInformation.expected) {
      _message += "\n" + this.utils.RECEIVED_COLOR(result.contextualInformation.expected);
    }

    if (result.contextualInformation.actual) {
      _message += "\n" + this.utils.EXPECTED_COLOR(result.contextualInformation.actual);
    }

    return _objectSpread(_objectSpread({}, result), {}, {
      message: function message() {return _message;} });

  })[

  matcherKey];
  matchers[matcherKey] = matcher;
});
expect.extend(matchers);