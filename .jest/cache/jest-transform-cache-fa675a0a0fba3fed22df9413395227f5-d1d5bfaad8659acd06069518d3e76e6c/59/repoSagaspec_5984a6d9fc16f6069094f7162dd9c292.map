{"file":"/Users/anisderbel/Documents/apcgithubissues/src/redux/repo/__tests__/repoSaga.spec.ts","mappings":"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","names":[],"sources":["/Users/anisderbel/Documents/apcgithubissues/src/redux/repo/__tests__/repoSaga.spec.ts"],"sourcesContent":["import {expectSaga} from 'redux-saga-test-plan';\nimport {reducer as formReducer} from 'redux-form';\nimport {Action} from 'redux';\nimport * as matchers from 'redux-saga-test-plan/matchers';\nimport {combineReducers} from 'redux';\nimport {\n  createFailedResponse,\n  createSuccessfulResponse,\n} from '../../../__mocks__/response';\nimport repoReducer, {initialState} from '../reducer';\nimport axios from '../../axios';\nimport repoSaga from '../saga';\nimport formMock from '../../../__mocks__/form';\nimport {repoActions} from '../actions';\nimport {repoIssuesMock} from '../../../__mocks__/repo';\nimport {IApplicationState} from '../../appReducer';\nimport {throwError} from 'redux-saga-test-plan/providers';\n\nconst setupTest = (storeInitialState: IApplicationState) =>\n  expectSaga(repoSaga).withReducer<IApplicationState, Action<any>>(\n    combineReducers({\n      form: formReducer,\n      repo: repoReducer,\n    }),\n    storeInitialState,\n  );\n\ndescribe('repoSaga', () => {\n  const page = 1;\n  describe('get github issues', () => {\n    const storeInitialState: IApplicationState = {\n      form: formMock,\n      repo: initialState,\n    };\n    it('should fetch github issues from api successfully', async () => {\n      const response = createSuccessfulResponse(repoIssuesMock);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), response]])\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.getRepoIssuesSuccess({\n            issues: response.data,\n            page,\n            hasMoreIssues: true,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        issues: {\n          ...storeState.repo.issues,\n          [page]: response.data,\n        },\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: true,\n      });\n    });\n    it('should set current page if it is fetched before', async () => {\n      const {storeState} = await setupTest({\n        ...storeInitialState,\n        repo: {\n          ...storeInitialState.repo,\n          issues: {[page]: repoIssuesMock.data},\n        },\n      })\n        .dispatch(repoActions.getRepoIssues({page}))\n        .put(\n          repoActions.setCurrentPage({\n            page,\n            hasMoreIssues: false,\n          }),\n        )\n        .silentRun();\n      expect(storeState.repo).toEqual({\n        ...storeState.repo,\n        page,\n        error: false,\n        isLoading: false,\n        hasMoreIssues: false,\n      });\n    });\n    it('should throw an error when organization and/or repository not found ', async () => {\n      const response = createFailedResponse(404);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), throwError({response} as any)]])\n        .dispatch(repoActions.getRepoIssuesFailed())\n        .silentRun();\n\n      expect(storeState.repo).toEqual(storeInitialState.repo);\n    });\n    it('should throw an error when api fails with 500 ', async () => {\n      const response = createFailedResponse(500);\n      const {storeState} = await setupTest(storeInitialState)\n        .provide([[matchers.call.fn(axios.get), throwError({response} as any)]])\n        .dispatch(repoActions.getRepoIssuesFailed())\n        .silentRun();\n\n      expect(storeState.repo).toEqual(storeInitialState.repo);\n    });\n  });\n});\n"],"version":3}