ca830003fa289fa9006a86e9f620d611
var htmlparser2 = require('htmlparser2');

var domhandler = require('domhandler');

exports.isTag = htmlparser2.DomUtils.isTag;

exports.camelCase = function (str) {
  return str.replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
};

exports.cssCase = function (str) {
  return str.replace(/[A-Z]/g, '-$&').toLowerCase();
};

exports.domEach = function (cheerio, fn) {
  var i = 0;
  var len = cheerio.length;

  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) {
    ++i;
  }

  return cheerio;
};

exports.cloneDom = function (dom) {
  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {
    return domhandler.cloneNode(el, true);
  }) : [domhandler.cloneNode(dom, true)];
  var root = new domhandler.Document(clone);
  clone.forEach(function (node) {
    node.parent = root;
  });
  return clone;
};

var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w-]*)$)/;

exports.isHtml = function (str) {
  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) {
    return true;
  }

  var match = quickExpr.exec(str);
  return !!(match && match[1]);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImh0bWxwYXJzZXIyIiwicmVxdWlyZSIsImRvbWhhbmRsZXIiLCJleHBvcnRzIiwiaXNUYWciLCJEb21VdGlscyIsImNhbWVsQ2FzZSIsInN0ciIsInJlcGxhY2UiLCJfIiwieCIsInRvVXBwZXJDYXNlIiwiY3NzQ2FzZSIsInRvTG93ZXJDYXNlIiwiZG9tRWFjaCIsImNoZWVyaW8iLCJmbiIsImkiLCJsZW4iLCJsZW5ndGgiLCJjYWxsIiwiY2xvbmVEb20iLCJkb20iLCJjbG9uZSIsIkFycmF5IiwicHJvdG90eXBlIiwibWFwIiwiZWwiLCJjbG9uZU5vZGUiLCJyb290IiwiRG9jdW1lbnQiLCJmb3JFYWNoIiwibm9kZSIsInBhcmVudCIsInF1aWNrRXhwciIsImlzSHRtbCIsImNoYXJBdCIsIm1hdGNoIiwiZXhlYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxJQUFJQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQVlBRSxPQUFPLENBQUNDLEtBQVIsR0FBZ0JKLFdBQVcsQ0FBQ0ssUUFBWixDQUFxQkQsS0FBckM7O0FBVUFELE9BQU8sQ0FBQ0csU0FBUixHQUFvQixVQUFVQyxHQUFWLEVBQWU7QUFDakMsU0FBT0EsR0FBRyxDQUFDQyxPQUFKLENBQVksY0FBWixFQUE0QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDakQsV0FBT0EsQ0FBQyxDQUFDQyxXQUFGLEVBQVA7QUFDRCxHQUZNLENBQVA7QUFHRCxDQUpEOztBQWVBUixPQUFPLENBQUNTLE9BQVIsR0FBa0IsVUFBVUwsR0FBVixFQUFlO0FBQy9CLFNBQU9BLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLFFBQVosRUFBc0IsS0FBdEIsRUFBNkJLLFdBQTdCLEVBQVA7QUFDRCxDQUZEOztBQWNBVixPQUFPLENBQUNXLE9BQVIsR0FBa0IsVUFBVUMsT0FBVixFQUFtQkMsRUFBbkIsRUFBdUI7QUFDdkMsTUFBSUMsQ0FBQyxHQUFHLENBQVI7QUFDQSxNQUFJQyxHQUFHLEdBQUdILE9BQU8sQ0FBQ0ksTUFBbEI7O0FBQ0EsU0FBT0YsQ0FBQyxHQUFHQyxHQUFKLElBQVdGLEVBQUUsQ0FBQ0ksSUFBSCxDQUFRTCxPQUFSLEVBQWlCRSxDQUFqQixFQUFvQkYsT0FBTyxDQUFDRSxDQUFELENBQTNCLE1BQW9DLEtBQXREO0FBQTZELE1BQUVBLENBQUY7QUFBN0Q7O0FBQ0EsU0FBT0YsT0FBUDtBQUNELENBTEQ7O0FBY0FaLE9BQU8sQ0FBQ2tCLFFBQVIsR0FBbUIsVUFBVUMsR0FBVixFQUFlO0FBQ2hDLE1BQUlDLEtBQUssR0FDUCxZQUFZRCxHQUFaLEdBQ0lFLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsR0FBaEIsQ0FBb0JOLElBQXBCLENBQXlCRSxHQUF6QixFQUE4QixVQUFVSyxFQUFWLEVBQWM7QUFDMUMsV0FBT3pCLFVBQVUsQ0FBQzBCLFNBQVgsQ0FBcUJELEVBQXJCLEVBQXlCLElBQXpCLENBQVA7QUFDRCxHQUZELENBREosR0FJSSxDQUFDekIsVUFBVSxDQUFDMEIsU0FBWCxDQUFxQk4sR0FBckIsRUFBMEIsSUFBMUIsQ0FBRCxDQUxOO0FBUUEsTUFBSU8sSUFBSSxHQUFHLElBQUkzQixVQUFVLENBQUM0QixRQUFmLENBQXdCUCxLQUF4QixDQUFYO0FBQ0FBLEVBQUFBLEtBQUssQ0FBQ1EsT0FBTixDQUFjLFVBQVVDLElBQVYsRUFBZ0I7QUFDNUJBLElBQUFBLElBQUksQ0FBQ0MsTUFBTCxHQUFjSixJQUFkO0FBQ0QsR0FGRDtBQUlBLFNBQU9OLEtBQVA7QUFDRCxDQWZEOztBQW9CQSxJQUFJVyxTQUFTLEdBQUcseUNBQWhCOztBQVNBL0IsT0FBTyxDQUFDZ0MsTUFBUixHQUFpQixVQUFVNUIsR0FBVixFQUFlO0FBRTlCLE1BQ0VBLEdBQUcsQ0FBQzZCLE1BQUosQ0FBVyxDQUFYLE1BQWtCLEdBQWxCLElBQ0E3QixHQUFHLENBQUM2QixNQUFKLENBQVc3QixHQUFHLENBQUNZLE1BQUosR0FBYSxDQUF4QixNQUErQixHQUQvQixJQUVBWixHQUFHLENBQUNZLE1BQUosSUFBYyxDQUhoQixFQUlFO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBR0QsTUFBSWtCLEtBQUssR0FBR0gsU0FBUyxDQUFDSSxJQUFWLENBQWUvQixHQUFmLENBQVo7QUFDQSxTQUFPLENBQUMsRUFBRThCLEtBQUssSUFBSUEsS0FBSyxDQUFDLENBQUQsQ0FBaEIsQ0FBUjtBQUNELENBYkQiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHRtbHBhcnNlcjIgPSByZXF1aXJlKCdodG1scGFyc2VyMicpO1xudmFyIGRvbWhhbmRsZXIgPSByZXF1aXJlKCdkb21oYW5kbGVyJyk7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIERPTSBlbGVtZW50IGlzIGEgdGFnLlxuICpcbiAqIGBpc1RhZyh0eXBlKWAgaW5jbHVkZXMgYDxzY3JpcHQ+YCBhbmQgYDxzdHlsZT5gIHRhZ3MuXG4gKlxuICogQHBhcmFtIHtub2RlfSB0eXBlIC0gRE9NIG5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnRzLmlzVGFnID0gaHRtbHBhcnNlcjIuRG9tVXRpbHMuaXNUYWc7XG5cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBjYW1lbCBjYXNlIG5vdGF0aW9uLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyIC0gU3RyaW5nIHRvIGJlIGNvbnZlcnRlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9ICAgICAgU3RyaW5nIGluIGNhbWVsIGNhc2Ugbm90YXRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5jYW1lbENhc2UgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW18uLV0oXFx3fCQpL2csIGZ1bmN0aW9uIChfLCB4KSB7XG4gICAgcmV0dXJuIHgudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgZnJvbSBjYW1lbCBjYXNlIHRvIFwiQ1NTIGNhc2VcIiwgd2hlcmUgd29yZCBib3VuZGFyaWVzIGFyZVxuICogZGVzY3JpYmVkIGJ5IGh5cGhlbnMgKFwiLVwiKSBhbmQgYWxsIGNoYXJhY3RlcnMgYXJlIGxvd2VyLWNhc2UuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHIgLSBTdHJpbmcgdG8gYmUgY29udmVydGVkLlxuICogQHJldHVybnMge3N0cmluZ30gICAgICBTdHJpbmcgaW4gXCJDU1MgY2FzZVwiLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydHMuY3NzQ2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bQS1aXS9nLCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGVhY2ggRE9NIGVsZW1lbnQgd2l0aG91dCBjcmVhdGluZyBpbnRlcm1lZGlhcnkgQ2hlZXJpb1xuICogaW5zdGFuY2VzLlxuICpcbiAqIFRoaXMgaXMgaW5kZW50ZWQgZm9yIHVzZSBpbnRlcm5hbGx5IHRvIGF2b2lkIG90aGVyd2lzZSB1bm5lY2Vzc2FyeSBtZW1vcnlcbiAqIHByZXNzdXJlIGludHJvZHVjZWQgYnkgX21ha2UuXG4gKlxuICogQHBhcmFtIHtjaGVlcmlvfSBjaGVlcmlvIC0gQ2hlZXJpbyBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIEZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cbmV4cG9ydHMuZG9tRWFjaCA9IGZ1bmN0aW9uIChjaGVlcmlvLCBmbikge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBjaGVlcmlvLmxlbmd0aDtcbiAgd2hpbGUgKGkgPCBsZW4gJiYgZm4uY2FsbChjaGVlcmlvLCBpLCBjaGVlcmlvW2ldKSAhPT0gZmFsc2UpICsraTtcbiAgcmV0dXJuIGNoZWVyaW87XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIGRlZXAgY29weSBvZiB0aGUgZ2l2ZW4gRE9NIHN0cnVjdHVyZS5cbiAqIFNldHMgdGhlIHBhcmVudHMgb2YgdGhlIGNvcGllcyBvZiB0aGUgcGFzc2VkIG5vZGVzIHRvIGBudWxsYC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZG9tIC0gVGhlIGh0bWxwYXJzZXIyLWNvbXBsaWFudCBET00gc3RydWN0dXJlLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5jbG9uZURvbSA9IGZ1bmN0aW9uIChkb20pIHtcbiAgdmFyIGNsb25lID1cbiAgICAnbGVuZ3RoJyBpbiBkb21cbiAgICAgID8gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGRvbSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbWhhbmRsZXIuY2xvbmVOb2RlKGVsLCB0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgIDogW2RvbWhhbmRsZXIuY2xvbmVOb2RlKGRvbSwgdHJ1ZSldO1xuXG4gIC8vIEFkZCBhIHJvb3Qgbm9kZSBhcm91bmQgdGhlIGNsb25lZCBub2Rlc1xuICB2YXIgcm9vdCA9IG5ldyBkb21oYW5kbGVyLkRvY3VtZW50KGNsb25lKTtcbiAgY2xvbmUuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgIG5vZGUucGFyZW50ID0gcm9vdDtcbiAgfSk7XG5cbiAgcmV0dXJuIGNsb25lO1xufTtcblxuLypcbiAqIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzIG9yIElEIHN0cmluZ3NcbiAqL1xudmFyIHF1aWNrRXhwciA9IC9eKD86W14jPF0qKDxbXFx3XFxXXSs+KVtePl0qJHwjKFtcXHctXSopJCkvO1xuXG4vKipcbiAqIENoZWNrIGlmIHN0cmluZyBpcyBIVE1MLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBTdHJpbmcgdG8gY2hlY2suXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0cy5pc0h0bWwgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIC8vIEZhc3RlciB0aGFuIHJ1bm5pbmcgcmVnZXgsIGlmIHN0ciBzdGFydHMgd2l0aCBgPGAgYW5kIGVuZHMgd2l0aCBgPmAsIGFzc3VtZSBpdCdzIEhUTUxcbiAgaWYgKFxuICAgIHN0ci5jaGFyQXQoMCkgPT09ICc8JyAmJlxuICAgIHN0ci5jaGFyQXQoc3RyLmxlbmd0aCAtIDEpID09PSAnPicgJiZcbiAgICBzdHIubGVuZ3RoID49IDNcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBSdW4gdGhlIHJlZ2V4XG4gIHZhciBtYXRjaCA9IHF1aWNrRXhwci5leGVjKHN0cik7XG4gIHJldHVybiAhIShtYXRjaCAmJiBtYXRjaFsxXSk7XG59O1xuIl19