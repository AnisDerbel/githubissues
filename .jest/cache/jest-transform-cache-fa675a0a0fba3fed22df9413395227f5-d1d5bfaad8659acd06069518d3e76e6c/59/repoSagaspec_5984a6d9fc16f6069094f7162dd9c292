1e0e77aef52874688bceb9a7320b22c1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const redux_saga_test_plan_1 = require("redux-saga-test-plan");
const redux_form_1 = require("redux-form");
const matchers = tslib_1.__importStar(require("redux-saga-test-plan/matchers"));
const redux_1 = require("redux");
const response_1 = require("../../../__mocks__/response");
const reducer_1 = tslib_1.__importStar(require("../reducer"));
const axios_1 = tslib_1.__importDefault(require("../../axios"));
const saga_1 = tslib_1.__importDefault(require("../saga"));
const form_1 = tslib_1.__importDefault(require("../../../__mocks__/form"));
const actions_1 = require("../actions");
const repo_1 = require("../../../__mocks__/repo");
const providers_1 = require("redux-saga-test-plan/providers");
const setupTest = (storeInitialState) => redux_saga_test_plan_1.expectSaga(saga_1.default).withReducer(redux_1.combineReducers({
    form: redux_form_1.reducer,
    repo: reducer_1.default,
}), storeInitialState);
describe('repoSaga', () => {
    const page = 1;
    describe('get github issues', () => {
        const storeInitialState = {
            form: form_1.default,
            repo: reducer_1.initialState,
        };
        it('should fetch github issues from api successfully', async () => {
            const response = response_1.createSuccessfulResponse(repo_1.repoIssuesMock);
            const { storeState } = await setupTest(storeInitialState)
                .provide([[matchers.call.fn(axios_1.default.get), response]])
                .dispatch(actions_1.repoActions.getRepoIssues({ page }))
                .put(actions_1.repoActions.getRepoIssuesSuccess({
                issues: response.data,
                page,
                hasMoreIssues: true,
            }))
                .silentRun();
            expect(storeState.repo).toEqual({
                ...storeState.repo,
                issues: {
                    ...storeState.repo.issues,
                    [page]: response.data,
                },
                page,
                error: false,
                isLoading: false,
                hasMoreIssues: true,
            });
        });
        it('should set current page if it is fetched before', async () => {
            const { storeState } = await setupTest({
                ...storeInitialState,
                repo: {
                    ...storeInitialState.repo,
                    issues: { [page]: repo_1.repoIssuesMock.data },
                },
            })
                .dispatch(actions_1.repoActions.getRepoIssues({ page }))
                .put(actions_1.repoActions.setCurrentPage({
                page,
                hasMoreIssues: false,
            }))
                .silentRun();
            expect(storeState.repo).toEqual({
                ...storeState.repo,
                page,
                error: false,
                isLoading: false,
                hasMoreIssues: false,
            });
        });
        it('should throw an error when organization and/or repository not found ', async () => {
            const response = response_1.createFailedResponse(404);
            const { storeState } = await setupTest(storeInitialState)
                .provide([[matchers.call.fn(axios_1.default.get), providers_1.throwError({ response })]])
                .dispatch(actions_1.repoActions.getRepoIssuesFailed())
                .silentRun();
            expect(storeState.repo).toEqual(storeInitialState.repo);
        });
        it('should throw an error when api fails with 500 ', async () => {
            const response = response_1.createFailedResponse(500);
            const { storeState } = await setupTest(storeInitialState)
                .provide([[matchers.call.fn(axios_1.default.get), providers_1.throwError({ response })]])
                .dispatch(actions_1.repoActions.getRepoIssuesFailed())
                .silentRun();
            expect(storeState.repo).toEqual(storeInitialState.repo);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,