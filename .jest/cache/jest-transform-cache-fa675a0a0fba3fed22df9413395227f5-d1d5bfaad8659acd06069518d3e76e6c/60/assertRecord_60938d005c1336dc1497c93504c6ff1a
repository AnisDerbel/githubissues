30bc94c507965d80d523861e3b2d875e
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var predicates = {
  'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
    if (Type(Desc) !== 'Object') {
      return false;
    }

    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true
    };

    for (var key in Desc) {
      if (has(Desc, key) && !allowed[key]) {
        return false;
      }
    }

    var isData = has(Desc, '[[Value]]');
    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');

    if (isData && IsAccessor) {
      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
    }

    return true;
  }
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
  var predicate = predicates[recordType];

  if (typeof predicate !== 'function') {
    throw new $SyntaxError('unknown record type: ' + recordType);
  }

  if (!predicate(Type, value)) {
    throw new $TypeError(argumentName + ' must be a ' + recordType);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VydFJlY29yZC5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIiRTeW50YXhFcnJvciIsImhhcyIsInByZWRpY2F0ZXMiLCJpc1Byb3BlcnR5RGVzY3JpcHRvciIsIlR5cGUiLCJEZXNjIiwiYWxsb3dlZCIsImtleSIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNzZXJ0UmVjb3JkIiwicmVjb3JkVHlwZSIsImFyZ3VtZW50TmFtZSIsInZhbHVlIiwicHJlZGljYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQUQsQ0FBN0I7QUFDQSxJQUFJRyxZQUFZLEdBQUdILFlBQVksQ0FBQyxlQUFELENBQS9COztBQUVBLElBQUlJLEdBQUcsR0FBR0gsT0FBTyxDQUFDLEtBQUQsQ0FBakI7O0FBRUEsSUFBSUksVUFBVSxHQUFHO0FBRWhCLHlCQUF1QixTQUFTQyxvQkFBVCxDQUE4QkMsSUFBOUIsRUFBb0NDLElBQXBDLEVBQTBDO0FBQ2hFLFFBQUlELElBQUksQ0FBQ0MsSUFBRCxDQUFKLEtBQWUsUUFBbkIsRUFBNkI7QUFDNUIsYUFBTyxLQUFQO0FBQ0E7O0FBQ0QsUUFBSUMsT0FBTyxHQUFHO0FBQ2IsMEJBQW9CLElBRFA7QUFFYix3QkFBa0IsSUFGTDtBQUdiLGlCQUFXLElBSEU7QUFJYixpQkFBVyxJQUpFO0FBS2IsbUJBQWEsSUFMQTtBQU1iLHNCQUFnQjtBQU5ILEtBQWQ7O0FBU0EsU0FBSyxJQUFJQyxHQUFULElBQWdCRixJQUFoQixFQUFzQjtBQUNyQixVQUFJSixHQUFHLENBQUNJLElBQUQsRUFBT0UsR0FBUCxDQUFILElBQWtCLENBQUNELE9BQU8sQ0FBQ0MsR0FBRCxDQUE5QixFQUFxQztBQUNwQyxlQUFPLEtBQVA7QUFDQTtBQUNEOztBQUVELFFBQUlDLE1BQU0sR0FBR1AsR0FBRyxDQUFDSSxJQUFELEVBQU8sV0FBUCxDQUFoQjtBQUNBLFFBQUlJLFVBQVUsR0FBR1IsR0FBRyxDQUFDSSxJQUFELEVBQU8sU0FBUCxDQUFILElBQXdCSixHQUFHLENBQUNJLElBQUQsRUFBTyxTQUFQLENBQTVDOztBQUNBLFFBQUlHLE1BQU0sSUFBSUMsVUFBZCxFQUEwQjtBQUN6QixZQUFNLElBQUlWLFVBQUosQ0FBZSxvRUFBZixDQUFOO0FBQ0E7O0FBQ0QsV0FBTyxJQUFQO0FBQ0E7QUEzQmUsQ0FBakI7O0FBOEJBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQlIsSUFBdEIsRUFBNEJTLFVBQTVCLEVBQXdDQyxZQUF4QyxFQUFzREMsS0FBdEQsRUFBNkQ7QUFDN0UsTUFBSUMsU0FBUyxHQUFHZCxVQUFVLENBQUNXLFVBQUQsQ0FBMUI7O0FBQ0EsTUFBSSxPQUFPRyxTQUFQLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ3BDLFVBQU0sSUFBSWhCLFlBQUosQ0FBaUIsMEJBQTBCYSxVQUEzQyxDQUFOO0FBQ0E7O0FBQ0QsTUFBSSxDQUFDRyxTQUFTLENBQUNaLElBQUQsRUFBT1csS0FBUCxDQUFkLEVBQTZCO0FBQzVCLFVBQU0sSUFBSWhCLFVBQUosQ0FBZWUsWUFBWSxHQUFHLGFBQWYsR0FBK0JELFVBQTlDLENBQU47QUFDQTtBQUNELENBUkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBwcmVkaWNhdGVzID0ge1xuXHQvLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLXByb3BlcnR5LWRlc2NyaXB0b3Itc3BlY2lmaWNhdGlvbi10eXBlXG5cdCdQcm9wZXJ0eSBEZXNjcmlwdG9yJzogZnVuY3Rpb24gaXNQcm9wZXJ0eURlc2NyaXB0b3IoVHlwZSwgRGVzYykge1xuXHRcdGlmIChUeXBlKERlc2MpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgYWxsb3dlZCA9IHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tHZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tTZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogdHJ1ZSxcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBEZXNjKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdGlmIChoYXMoRGVzYywga2V5KSAmJiAhYWxsb3dlZFtrZXldKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgaXNEYXRhID0gaGFzKERlc2MsICdbW1ZhbHVlXV0nKTtcblx0XHR2YXIgSXNBY2Nlc3NvciA9IGhhcyhEZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhEZXNjLCAnW1tTZXRdXScpO1xuXHRcdGlmIChpc0RhdGEgJiYgSXNBY2Nlc3Nvcikge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1Byb3BlcnR5IERlc2NyaXB0b3JzIG1heSBub3QgYmUgYm90aCBhY2Nlc3NvciBhbmQgZGF0YSBkZXNjcmlwdG9ycycpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NlcnRSZWNvcmQoVHlwZSwgcmVjb3JkVHlwZSwgYXJndW1lbnROYW1lLCB2YWx1ZSkge1xuXHR2YXIgcHJlZGljYXRlID0gcHJlZGljYXRlc1tyZWNvcmRUeXBlXTtcblx0aWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCd1bmtub3duIHJlY29yZCB0eXBlOiAnICsgcmVjb3JkVHlwZSk7XG5cdH1cblx0aWYgKCFwcmVkaWNhdGUoVHlwZSwgdmFsdWUpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoYXJndW1lbnROYW1lICsgJyBtdXN0IGJlIGEgJyArIHJlY29yZFR5cGUpO1xuXHR9XG59O1xuIl19