ee2dd9d58bfbe4148d3843041c37754b
'use strict';

var bind = require('function-bind');

var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
  try {
    $defineProperty({}, 'a', {
      value: 1
    });
  } catch (e) {
    $defineProperty = null;
  }
}

module.exports = function callBind(originalFunction) {
  var func = $reflectApply(bind, $call, arguments);

  if ($gOPD && $defineProperty) {
    var desc = $gOPD(func, 'length');

    if (desc.configurable) {
      $defineProperty(func, 'length', {
        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
      });
    }
  }

  return func;
};

var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
  $defineProperty(module.exports, 'apply', {
    value: applyBind
  });
} else {
  module.exports.apply = applyBind;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImJpbmQiLCJyZXF1aXJlIiwiR2V0SW50cmluc2ljIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiY2FsbCIsIiRnT1BEIiwiJGRlZmluZVByb3BlcnR5IiwiJG1heCIsInZhbHVlIiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsQmluZCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiYXJndW1lbnRzIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsImxlbmd0aCIsImFwcGx5QmluZCIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQWxCOztBQUNBLElBQUlDLFlBQVksR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBRUEsSUFBSUUsTUFBTSxHQUFHRCxZQUFZLENBQUMsNEJBQUQsQ0FBekI7QUFDQSxJQUFJRSxLQUFLLEdBQUdGLFlBQVksQ0FBQywyQkFBRCxDQUF4QjtBQUNBLElBQUlHLGFBQWEsR0FBR0gsWUFBWSxDQUFDLGlCQUFELEVBQW9CLElBQXBCLENBQVosSUFBeUNGLElBQUksQ0FBQ00sSUFBTCxDQUFVRixLQUFWLEVBQWlCRCxNQUFqQixDQUE3RDtBQUVBLElBQUlJLEtBQUssR0FBR0wsWUFBWSxDQUFDLG1DQUFELEVBQXNDLElBQXRDLENBQXhCO0FBQ0EsSUFBSU0sZUFBZSxHQUFHTixZQUFZLENBQUMseUJBQUQsRUFBNEIsSUFBNUIsQ0FBbEM7QUFDQSxJQUFJTyxJQUFJLEdBQUdQLFlBQVksQ0FBQyxZQUFELENBQXZCOztBQUVBLElBQUlNLGVBQUosRUFBcUI7QUFDcEIsTUFBSTtBQUNIQSxJQUFBQSxlQUFlLENBQUMsRUFBRCxFQUFLLEdBQUwsRUFBVTtBQUFFRSxNQUFBQSxLQUFLLEVBQUU7QUFBVCxLQUFWLENBQWY7QUFDQSxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBRVhILElBQUFBLGVBQWUsR0FBRyxJQUFsQjtBQUNBO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxnQkFBbEIsRUFBb0M7QUFDcEQsTUFBSUMsSUFBSSxHQUFHWCxhQUFhLENBQUNMLElBQUQsRUFBT0ksS0FBUCxFQUFjYSxTQUFkLENBQXhCOztBQUNBLE1BQUlWLEtBQUssSUFBSUMsZUFBYixFQUE4QjtBQUM3QixRQUFJVSxJQUFJLEdBQUdYLEtBQUssQ0FBQ1MsSUFBRCxFQUFPLFFBQVAsQ0FBaEI7O0FBQ0EsUUFBSUUsSUFBSSxDQUFDQyxZQUFULEVBQXVCO0FBRXRCWCxNQUFBQSxlQUFlLENBQ2RRLElBRGMsRUFFZCxRQUZjLEVBR2Q7QUFBRU4sUUFBQUEsS0FBSyxFQUFFLElBQUlELElBQUksQ0FBQyxDQUFELEVBQUlNLGdCQUFnQixDQUFDSyxNQUFqQixJQUEyQkgsU0FBUyxDQUFDRyxNQUFWLEdBQW1CLENBQTlDLENBQUo7QUFBakIsT0FIYyxDQUFmO0FBS0E7QUFDRDs7QUFDRCxTQUFPSixJQUFQO0FBQ0EsQ0FkRDs7QUFnQkEsSUFBSUssU0FBUyxHQUFHLFNBQVNBLFNBQVQsR0FBcUI7QUFDcEMsU0FBT2hCLGFBQWEsQ0FBQ0wsSUFBRCxFQUFPRyxNQUFQLEVBQWVjLFNBQWYsQ0FBcEI7QUFDQSxDQUZEOztBQUlBLElBQUlULGVBQUosRUFBcUI7QUFDcEJBLEVBQUFBLGVBQWUsQ0FBQ0ksTUFBTSxDQUFDQyxPQUFSLEVBQWlCLE9BQWpCLEVBQTBCO0FBQUVILElBQUFBLEtBQUssRUFBRVc7QUFBVCxHQUExQixDQUFmO0FBQ0EsQ0FGRCxNQUVPO0FBQ05ULEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUyxLQUFmLEdBQXVCRCxTQUF2QjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkYXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklJyk7XG52YXIgJGNhbGwgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCUnKTtcbnZhciAkcmVmbGVjdEFwcGx5ID0gR2V0SW50cmluc2ljKCclUmVmbGVjdC5hcHBseSUnLCB0cnVlKSB8fCBiaW5kLmNhbGwoJGNhbGwsICRhcHBseSk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xudmFyICRtYXggPSBHZXRJbnRyaW5zaWMoJyVNYXRoLm1heCUnKTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQob3JpZ2luYWxGdW5jdGlvbikge1xuXHR2YXIgZnVuYyA9ICRyZWZsZWN0QXBwbHkoYmluZCwgJGNhbGwsIGFyZ3VtZW50cyk7XG5cdGlmICgkZ09QRCAmJiAkZGVmaW5lUHJvcGVydHkpIHtcblx0XHR2YXIgZGVzYyA9ICRnT1BEKGZ1bmMsICdsZW5ndGgnKTtcblx0XHRpZiAoZGVzYy5jb25maWd1cmFibGUpIHtcblx0XHRcdC8vIG9yaWdpbmFsIGxlbmd0aCwgcGx1cyB0aGUgcmVjZWl2ZXIsIG1pbnVzIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyAoYWZ0ZXIgdGhlIHJlY2VpdmVyKVxuXHRcdFx0JGRlZmluZVByb3BlcnR5KFxuXHRcdFx0XHRmdW5jLFxuXHRcdFx0XHQnbGVuZ3RoJyxcblx0XHRcdFx0eyB2YWx1ZTogMSArICRtYXgoMCwgb3JpZ2luYWxGdW5jdGlvbi5sZW5ndGggLSAoYXJndW1lbnRzLmxlbmd0aCAtIDEpKSB9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZnVuYztcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cbiJdfQ==