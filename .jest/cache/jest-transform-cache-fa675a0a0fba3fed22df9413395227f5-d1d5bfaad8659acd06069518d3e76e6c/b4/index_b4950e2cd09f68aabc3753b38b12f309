dbaa6ea981c24e70d5f9d413bf248a63
"use strict";

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.select = exports.filter = void 0;

var css_what_1 = require("css-what");

var css_select_1 = require("css-select");

var DomUtils = __importStar(require("domutils"));

var helpers_1 = require("./helpers");

var positionals_1 = require("./positionals");

var SCOPE_PSEUDO = {
  type: "pseudo",
  name: "scope",
  data: null
};

var CUSTOM_SCOPE_PSEUDO = __assign({}, SCOPE_PSEUDO);

var UNIVERSAL_SELECTOR = {
  type: "universal",
  namespace: null
};

function filterByPosition(filter, elems, data, options) {
  var num = typeof data === "string" ? parseInt(data, 10) : NaN;

  switch (filter) {
    case "first":
    case "lt":
      return elems;

    case "last":
      return elems.length > 0 ? [elems[elems.length - 1]] : elems;

    case "nth":
    case "eq":
      return isFinite(num) && Math.abs(num) < elems.length ? [num < 0 ? elems[elems.length + num] : elems[num]] : [];

    case "gt":
      return isFinite(num) ? elems.slice(num + 1) : [];

    case "even":
      return elems.filter(function (_, i) {
        return i % 2 === 0;
      });

    case "odd":
      return elems.filter(function (_, i) {
        return i % 2 === 1;
      });

    case "not":
      {
        var filtered_1 = new Set(filterParsed(data, elems, options));
        return elems.filter(function (e) {
          return !filtered_1.has(e);
        });
      }
  }
}

function filter(selector, elements, options) {
  if (options === void 0) {
    options = {};
  }

  return DomUtils.uniqueSort(filterParsed(css_what_1.parse(selector, options), elements, options));
}

exports.filter = filter;

function filterParsed(selector, elements, options) {
  if (elements.length === 0) return [];

  var _a = helpers_1.groupSelectors(selector),
      plainSelectors = _a[0],
      filteredSelectors = _a[1];

  var results = [];

  if (plainSelectors.length) {
    results.push(filterElements(elements, plainSelectors, options));
  }

  for (var _i = 0, filteredSelectors_1 = filteredSelectors; _i < filteredSelectors_1.length; _i++) {
    var filteredSelector = filteredSelectors_1[_i];

    if (filteredSelector.some(css_what_1.isTraversal)) {
      var root = helpers_1.getDocumentRoot(elements[0]);

      var sel = __spreadArrays(filteredSelector, [CUSTOM_SCOPE_PSEUDO]);

      results.push(findFilterElements(root, sel, options, true, elements));
    } else {
      results.push(findFilterElements(elements, filteredSelector, options, false));
    }
  }

  if (results.length === 1) {
    return results[0];
  }

  return results.reduce(function (arr, rest) {
    return __spreadArrays(arr, rest);
  }, []);
}

function select(selector, root, options) {
  if (options === void 0) {
    options = {};
  }

  var _a = helpers_1.groupSelectors(css_what_1.parse(selector, options)),
      plain = _a[0],
      filtered = _a[1];

  var results = filtered.map(function (sel) {
    return findFilterElements(root, sel, options, true);
  });

  if (plain.length) {
    results.push(findElements(root, plain, options, Infinity));
  }

  if (results.length === 1) {
    return results[0];
  }

  return DomUtils.uniqueSort(results.reduce(function (a, b) {
    return __spreadArrays(a, b);
  }));
}

exports.select = select;
var specialTraversal = new Set(["descendant", "adjacent"]);

function includesScopePseudo(t) {
  return t !== SCOPE_PSEUDO && t.type === "pseudo" && (t.name === "scope" || Array.isArray(t.data) && t.data.some(function (data) {
    return data.some(includesScopePseudo);
  }));
}

function addContextIfScope(selector, options, scopeContext) {
  return scopeContext && selector.some(includesScopePseudo) ? __assign(__assign({}, options), {
    context: scopeContext
  }) : options;
}

function findFilterElements(root, selector, options, queryForSelector, scopeContext) {
  var filterIndex = selector.findIndex(positionals_1.isFilter);
  var sub = selector.slice(0, filterIndex);
  var filter = selector[filterIndex];
  var limit = positionals_1.getLimit(filter.name, filter.data);
  if (limit === 0) return [];
  var subOpts = addContextIfScope(sub, options, scopeContext);
  var elemsNoLimit = sub.length === 0 && !Array.isArray(root) ? DomUtils.getChildren(root).filter(DomUtils.isTag) : sub.length === 0 || sub.length === 1 && sub[0] === SCOPE_PSEUDO ? Array.isArray(root) ? root : [root] : queryForSelector || sub.some(css_what_1.isTraversal) ? findElements(root, [sub], subOpts, limit) : filterElements(root, [sub], subOpts);
  var elems = elemsNoLimit.slice(0, limit);
  var result = filterByPosition(filter.name, elems, filter.data, options);

  if (result.length === 0 || selector.length === filterIndex + 1) {
    return result;
  }

  var remainingSelector = selector.slice(filterIndex + 1);
  var remainingHasTraversal = remainingSelector.some(css_what_1.isTraversal);
  var remainingOpts = addContextIfScope(remainingSelector, options, scopeContext);

  if (remainingHasTraversal) {
    if (specialTraversal.has(remainingSelector[0].type)) {
      remainingSelector.unshift(UNIVERSAL_SELECTOR);
    }

    remainingSelector.unshift(SCOPE_PSEUDO);
  }

  return remainingSelector.some(positionals_1.isFilter) ? findFilterElements(result, remainingSelector, options, false, scopeContext) : remainingHasTraversal ? findElements(result, [remainingSelector], remainingOpts, Infinity) : filterElements(result, [remainingSelector], remainingOpts);
}

function findElements(root, sel, options, limit) {
  if (limit === 0) return [];

  var query = css_select_1._compileToken(sel, options, root);

  var elems = css_select_1.prepareContext(root, DomUtils, query.shouldTestNextSiblings);
  return DomUtils.find(function (node) {
    return DomUtils.isTag(node) && query(node);
  }, elems, true, limit);
}

function filterElements(elements, sel, options) {
  var query = css_select_1._compileToken(sel, options);

  return elements.filter(query);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwiX19lc01vZHVsZSIsInJlc3VsdCIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJyIiwiQXJyYXkiLCJhIiwiaiIsImpsIiwiZXhwb3J0cyIsInNlbGVjdCIsImZpbHRlciIsImNzc193aGF0XzEiLCJyZXF1aXJlIiwiY3NzX3NlbGVjdF8xIiwiRG9tVXRpbHMiLCJoZWxwZXJzXzEiLCJwb3NpdGlvbmFsc18xIiwiU0NPUEVfUFNFVURPIiwidHlwZSIsIm5hbWUiLCJkYXRhIiwiQ1VTVE9NX1NDT1BFX1BTRVVETyIsIlVOSVZFUlNBTF9TRUxFQ1RPUiIsIm5hbWVzcGFjZSIsImZpbHRlckJ5UG9zaXRpb24iLCJlbGVtcyIsIm9wdGlvbnMiLCJudW0iLCJwYXJzZUludCIsIk5hTiIsImlzRmluaXRlIiwiTWF0aCIsImFicyIsInNsaWNlIiwiXyIsImZpbHRlcmVkXzEiLCJTZXQiLCJmaWx0ZXJQYXJzZWQiLCJlIiwiaGFzIiwic2VsZWN0b3IiLCJlbGVtZW50cyIsInVuaXF1ZVNvcnQiLCJwYXJzZSIsIl9hIiwiZ3JvdXBTZWxlY3RvcnMiLCJwbGFpblNlbGVjdG9ycyIsImZpbHRlcmVkU2VsZWN0b3JzIiwicmVzdWx0cyIsInB1c2giLCJmaWx0ZXJFbGVtZW50cyIsIl9pIiwiZmlsdGVyZWRTZWxlY3RvcnNfMSIsImZpbHRlcmVkU2VsZWN0b3IiLCJzb21lIiwiaXNUcmF2ZXJzYWwiLCJyb290IiwiZ2V0RG9jdW1lbnRSb290Iiwic2VsIiwiZmluZEZpbHRlckVsZW1lbnRzIiwicmVkdWNlIiwiYXJyIiwicmVzdCIsInBsYWluIiwiZmlsdGVyZWQiLCJtYXAiLCJmaW5kRWxlbWVudHMiLCJJbmZpbml0eSIsImIiLCJzcGVjaWFsVHJhdmVyc2FsIiwiaW5jbHVkZXNTY29wZVBzZXVkbyIsImlzQXJyYXkiLCJhZGRDb250ZXh0SWZTY29wZSIsInNjb3BlQ29udGV4dCIsImNvbnRleHQiLCJxdWVyeUZvclNlbGVjdG9yIiwiZmlsdGVySW5kZXgiLCJmaW5kSW5kZXgiLCJpc0ZpbHRlciIsInN1YiIsImxpbWl0IiwiZ2V0TGltaXQiLCJzdWJPcHRzIiwiZWxlbXNOb0xpbWl0IiwiZ2V0Q2hpbGRyZW4iLCJpc1RhZyIsInJlbWFpbmluZ1NlbGVjdG9yIiwicmVtYWluaW5nSGFzVHJhdmVyc2FsIiwicmVtYWluaW5nT3B0cyIsInVuc2hpZnQiLCJxdWVyeSIsIl9jb21waWxlVG9rZW4iLCJwcmVwYXJlQ29udGV4dCIsInNob3VsZFRlc3ROZXh0U2libGluZ3MiLCJmaW5kIiwibm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsUUFBUSxHQUFJLFFBQVEsS0FBS0EsUUFBZCxJQUEyQixZQUFZO0FBQ2xEQSxFQUFBQSxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxJQUFpQixVQUFTQyxDQUFULEVBQVk7QUFDcEMsU0FBSyxJQUFJQyxDQUFKLEVBQU9DLENBQUMsR0FBRyxDQUFYLEVBQWNDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFqQyxFQUF5Q0gsQ0FBQyxHQUFHQyxDQUE3QyxFQUFnREQsQ0FBQyxFQUFqRCxFQUFxRDtBQUNqREQsTUFBQUEsQ0FBQyxHQUFHRyxTQUFTLENBQUNGLENBQUQsQ0FBYjs7QUFDQSxXQUFLLElBQUlJLENBQVQsSUFBY0wsQ0FBZDtBQUFpQixZQUFJSCxNQUFNLENBQUNTLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFo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O0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgICAgcltrXSA9IGFbal07XG4gICAgcmV0dXJuIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZWxlY3QgPSBleHBvcnRzLmZpbHRlciA9IHZvaWQgMDtcbnZhciBjc3Nfd2hhdF8xID0gcmVxdWlyZShcImNzcy13aGF0XCIpO1xudmFyIGNzc19zZWxlY3RfMSA9IHJlcXVpcmUoXCJjc3Mtc2VsZWN0XCIpO1xudmFyIERvbVV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJkb211dGlsc1wiKSk7XG52YXIgaGVscGVyc18xID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbnZhciBwb3NpdGlvbmFsc18xID0gcmVxdWlyZShcIi4vcG9zaXRpb25hbHNcIik7XG4vKiogVXNlZCB0byBpbmRpY2F0ZSBhIHNjb3BlIHNob3VsZCBiZSBmaWx0ZXJlZC4gTWlnaHQgYmUgaWdub3JlZCB3aGVuIGZpbHRlcmluZy4gKi9cbnZhciBTQ09QRV9QU0VVRE8gPSB7XG4gICAgdHlwZTogXCJwc2V1ZG9cIixcbiAgICBuYW1lOiBcInNjb3BlXCIsXG4gICAgZGF0YTogbnVsbCxcbn07XG4vKiogVXNlZCBmb3IgYWN0dWFsbHkgZmlsdGVyaW5nIGZvciBzY29wZS4gKi9cbnZhciBDVVNUT01fU0NPUEVfUFNFVURPID0gX19hc3NpZ24oe30sIFNDT1BFX1BTRVVETyk7XG52YXIgVU5JVkVSU0FMX1NFTEVDVE9SID0geyB0eXBlOiBcInVuaXZlcnNhbFwiLCBuYW1lc3BhY2U6IG51bGwgfTtcbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oZmlsdGVyLCBlbGVtcywgZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBudW0gPSB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlSW50KGRhdGEsIDEwKSA6IE5hTjtcbiAgICBzd2l0Y2ggKGZpbHRlcikge1xuICAgICAgICBjYXNlIFwiZmlyc3RcIjpcbiAgICAgICAgY2FzZSBcImx0XCI6XG4gICAgICAgICAgICAvLyBBbHJlYWR5IGRvbmUgaW4gYGdldExpbWl0YFxuICAgICAgICAgICAgcmV0dXJuIGVsZW1zO1xuICAgICAgICBjYXNlIFwibGFzdFwiOlxuICAgICAgICAgICAgcmV0dXJuIGVsZW1zLmxlbmd0aCA+IDAgPyBbZWxlbXNbZWxlbXMubGVuZ3RoIC0gMV1dIDogZWxlbXM7XG4gICAgICAgIGNhc2UgXCJudGhcIjpcbiAgICAgICAgY2FzZSBcImVxXCI6XG4gICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUobnVtKSAmJiBNYXRoLmFicyhudW0pIDwgZWxlbXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyBbbnVtIDwgMCA/IGVsZW1zW2VsZW1zLmxlbmd0aCArIG51bV0gOiBlbGVtc1tudW1dXVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgIGNhc2UgXCJndFwiOlxuICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBlbGVtcy5zbGljZShudW0gKyAxKSA6IFtdO1xuICAgICAgICBjYXNlIFwiZXZlblwiOlxuICAgICAgICAgICAgcmV0dXJuIGVsZW1zLmZpbHRlcihmdW5jdGlvbiAoXywgaSkgeyByZXR1cm4gaSAlIDIgPT09IDA7IH0pO1xuICAgICAgICBjYXNlIFwib2RkXCI6XG4gICAgICAgICAgICByZXR1cm4gZWxlbXMuZmlsdGVyKGZ1bmN0aW9uIChfLCBpKSB7IHJldHVybiBpICUgMiA9PT0gMTsgfSk7XG4gICAgICAgIGNhc2UgXCJub3RcIjoge1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkXzEgPSBuZXcgU2V0KGZpbHRlclBhcnNlZChkYXRhLCBlbGVtcywgb3B0aW9ucykpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1zLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gIWZpbHRlcmVkXzEuaGFzKGUpOyB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbHRlcihzZWxlY3RvciwgZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHJldHVybiBEb21VdGlscy51bmlxdWVTb3J0KGZpbHRlclBhcnNlZChjc3Nfd2hhdF8xLnBhcnNlKHNlbGVjdG9yLCBvcHRpb25zKSwgZWxlbWVudHMsIG9wdGlvbnMpKTtcbn1cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuLyoqXG4gKiBGaWx0ZXIgYSBzZXQgb2YgZWxlbWVudHMgYnkgYSBzZWxlY3Rvci5cbiAqXG4gKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgc2VsZWN0b3JzLCB0aGlzIGNhblxuICogcmV0dXJuIGVsZW1lbnRzIG11bHRpcGxlIHRpbWVzOyB1c2UgYHVuaXF1ZVNvcnRgXG4gKiB0byBlbGltaW5hdGUgZHVwbGljYXRlcyBhZnRlcndhcmRzLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3RvciB0byBmaWx0ZXIgYnkuXG4gKiBAcGFyYW0gZWxlbWVudHMgRWxlbWVudHMgdG8gZmlsdGVyLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3Igc2VsZWN0b3IuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlclBhcnNlZChzZWxlY3RvciwgZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gW107XG4gICAgdmFyIF9hID0gaGVscGVyc18xLmdyb3VwU2VsZWN0b3JzKHNlbGVjdG9yKSwgcGxhaW5TZWxlY3RvcnMgPSBfYVswXSwgZmlsdGVyZWRTZWxlY3RvcnMgPSBfYVsxXTtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChwbGFpblNlbGVjdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGZpbHRlckVsZW1lbnRzKGVsZW1lbnRzLCBwbGFpblNlbGVjdG9ycywgb3B0aW9ucykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBfaSA9IDAsIGZpbHRlcmVkU2VsZWN0b3JzXzEgPSBmaWx0ZXJlZFNlbGVjdG9yczsgX2kgPCBmaWx0ZXJlZFNlbGVjdG9yc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgZmlsdGVyZWRTZWxlY3RvciA9IGZpbHRlcmVkU2VsZWN0b3JzXzFbX2ldO1xuICAgICAgICBpZiAoZmlsdGVyZWRTZWxlY3Rvci5zb21lKGNzc193aGF0XzEuaXNUcmF2ZXJzYWwpKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogR2V0IG9uZSByb290IG5vZGUsIHJ1biBzZWxlY3RvciB3aXRoIHRoZSBzY29wZVxuICAgICAgICAgICAgICogc2V0IHRvIGFsbCBvZiBvdXIgbm9kZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciByb290ID0gaGVscGVyc18xLmdldERvY3VtZW50Um9vdChlbGVtZW50c1swXSk7XG4gICAgICAgICAgICB2YXIgc2VsID0gX19zcHJlYWRBcnJheXMoZmlsdGVyZWRTZWxlY3RvciwgW0NVU1RPTV9TQ09QRV9QU0VVRE9dKTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChmaW5kRmlsdGVyRWxlbWVudHMocm9vdCwgc2VsLCBvcHRpb25zLCB0cnVlLCBlbGVtZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBJZiB3ZSBkb24ndCBoYXZlIHRvIHRyYXZlcnNlLCBqdXN0IGZpbHRlciBzZXQuXG4gICAgICAgICAgICByZXN1bHRzLnB1c2goZmluZEZpbHRlckVsZW1lbnRzKGVsZW1lbnRzLCBmaWx0ZXJlZFNlbGVjdG9yLCBvcHRpb25zLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0c1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMucmVkdWNlKGZ1bmN0aW9uIChhcnIsIHJlc3QpIHsgcmV0dXJuIF9fc3ByZWFkQXJyYXlzKGFyciwgcmVzdCk7IH0sIFtdKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvciwgcm9vdCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIF9hID0gaGVscGVyc18xLmdyb3VwU2VsZWN0b3JzKGNzc193aGF0XzEucGFyc2Uoc2VsZWN0b3IsIG9wdGlvbnMpKSwgcGxhaW4gPSBfYVswXSwgZmlsdGVyZWQgPSBfYVsxXTtcbiAgICB2YXIgcmVzdWx0cyA9IGZpbHRlcmVkLm1hcChmdW5jdGlvbiAoc2VsKSB7XG4gICAgICAgIHJldHVybiBmaW5kRmlsdGVyRWxlbWVudHMocm9vdCwgc2VsLCBvcHRpb25zLCB0cnVlKTtcbiAgICB9KTtcbiAgICAvLyBQbGFpbiBzZWxlY3RvcnMgY2FuIGJlIHF1ZXJpZWQgaW4gYSBzaW5nbGUgZ29cbiAgICBpZiAocGxhaW4ubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChmaW5kRWxlbWVudHMocm9vdCwgcGxhaW4sIG9wdGlvbnMsIEluZmluaXR5KSk7XG4gICAgfVxuICAgIC8vIElmIHRoZXJlIHdhcyBvbmx5IGEgc2luZ2xlIHNlbGVjdG9yLCBqdXN0IHJldHVybiB0aGUgcmVzdWx0XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRzWzBdO1xuICAgIH1cbiAgICAvLyBTb3J0IHJlc3VsdHMsIGZpbHRlcmluZyBmb3IgZHVwbGljYXRlc1xuICAgIHJldHVybiBEb21VdGlscy51bmlxdWVTb3J0KHJlc3VsdHMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBfX3NwcmVhZEFycmF5cyhhLCBiKTsgfSkpO1xufVxuZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG4vLyBUcmF2ZXJzYWxzIHRoYXQgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgaW4gY3NzLXNlbGVjdC5cbnZhciBzcGVjaWFsVHJhdmVyc2FsID0gbmV3IFNldChbXCJkZXNjZW5kYW50XCIsIFwiYWRqYWNlbnRcIl0pO1xuZnVuY3Rpb24gaW5jbHVkZXNTY29wZVBzZXVkbyh0KSB7XG4gICAgcmV0dXJuICh0ICE9PSBTQ09QRV9QU0VVRE8gJiZcbiAgICAgICAgdC50eXBlID09PSBcInBzZXVkb1wiICYmXG4gICAgICAgICh0Lm5hbWUgPT09IFwic2NvcGVcIiB8fFxuICAgICAgICAgICAgKEFycmF5LmlzQXJyYXkodC5kYXRhKSAmJlxuICAgICAgICAgICAgICAgIHQuZGF0YS5zb21lKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhLnNvbWUoaW5jbHVkZXNTY29wZVBzZXVkbyk7IH0pKSkpO1xufVxuZnVuY3Rpb24gYWRkQ29udGV4dElmU2NvcGUoc2VsZWN0b3IsIG9wdGlvbnMsIHNjb3BlQ29udGV4dCkge1xuICAgIHJldHVybiBzY29wZUNvbnRleHQgJiYgc2VsZWN0b3Iuc29tZShpbmNsdWRlc1Njb3BlUHNldWRvKVxuICAgICAgICA/IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBjb250ZXh0OiBzY29wZUNvbnRleHQgfSkgOiBvcHRpb25zO1xufVxuLyoqXG4gKlxuICogQHBhcmFtIHJvb3QgRWxlbWVudChzKSB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3RvciB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHF1ZXJ5aW5nLlxuICogQHBhcmFtIHF1ZXJ5Rm9yU2VsZWN0b3IgUXVlcnkgbXVsdGlwbGUgbGV2ZWxzIGRlZXAgZm9yIHRoZSBpbml0aWFsIHNlbGVjdG9yLCBldmVuIGlmIGl0IGRvZXNuJ3QgY29udGFpbiBhIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSBzY29wZUNvbnRleHQgT3B0aW9uYWwgY29udGV4dCBmb3IgYSA6c2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGZpbmRGaWx0ZXJFbGVtZW50cyhyb290LCBzZWxlY3Rvciwgb3B0aW9ucywgcXVlcnlGb3JTZWxlY3Rvciwgc2NvcGVDb250ZXh0KSB7XG4gICAgdmFyIGZpbHRlckluZGV4ID0gc2VsZWN0b3IuZmluZEluZGV4KHBvc2l0aW9uYWxzXzEuaXNGaWx0ZXIpO1xuICAgIHZhciBzdWIgPSBzZWxlY3Rvci5zbGljZSgwLCBmaWx0ZXJJbmRleCk7XG4gICAgdmFyIGZpbHRlciA9IHNlbGVjdG9yW2ZpbHRlckluZGV4XTtcbiAgICAvKlxuICAgICAqIFNldCB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHJpZXZlLlxuICAgICAqIEVnLiBmb3IgOmZpcnN0LCB3ZSBvbmx5IGhhdmUgdG8gZ2V0IGEgc2luZ2xlIGVsZW1lbnQuXG4gICAgICovXG4gICAgdmFyIGxpbWl0ID0gcG9zaXRpb25hbHNfMS5nZXRMaW1pdChmaWx0ZXIubmFtZSwgZmlsdGVyLmRhdGEpO1xuICAgIGlmIChsaW1pdCA9PT0gMClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIHZhciBzdWJPcHRzID0gYWRkQ29udGV4dElmU2NvcGUoc3ViLCBvcHRpb25zLCBzY29wZUNvbnRleHQpO1xuICAgIC8qXG4gICAgICogU2tpcCBgZmluZEVsZW1lbnRzYCBjYWxsIGlmIG91ciBzZWxlY3RvciBzdGFydHMgd2l0aCBhIHBvc2l0aW9uYWxcbiAgICAgKiBwc2V1ZG8uXG4gICAgICovXG4gICAgdmFyIGVsZW1zTm9MaW1pdCA9IHN1Yi5sZW5ndGggPT09IDAgJiYgIUFycmF5LmlzQXJyYXkocm9vdClcbiAgICAgICAgPyBEb21VdGlscy5nZXRDaGlsZHJlbihyb290KS5maWx0ZXIoRG9tVXRpbHMuaXNUYWcpXG4gICAgICAgIDogc3ViLmxlbmd0aCA9PT0gMCB8fCAoc3ViLmxlbmd0aCA9PT0gMSAmJiBzdWJbMF0gPT09IFNDT1BFX1BTRVVETylcbiAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShyb290KVxuICAgICAgICAgICAgICAgID8gcm9vdFxuICAgICAgICAgICAgICAgIDogW3Jvb3RdXG4gICAgICAgICAgICA6IHF1ZXJ5Rm9yU2VsZWN0b3IgfHwgc3ViLnNvbWUoY3NzX3doYXRfMS5pc1RyYXZlcnNhbClcbiAgICAgICAgICAgICAgICA/IGZpbmRFbGVtZW50cyhyb290LCBbc3ViXSwgc3ViT3B0cywgbGltaXQpXG4gICAgICAgICAgICAgICAgOiAvLyBXZSBrbm93IHRoYXQgdGhpcyBjYW5ub3QgYmUgcmVhY2hlZCB3aXRoIHJvb3Qgbm90IGJlaW5nIGFuIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJFbGVtZW50cyhyb290LCBbc3ViXSwgc3ViT3B0cyk7XG4gICAgdmFyIGVsZW1zID0gZWxlbXNOb0xpbWl0LnNsaWNlKDAsIGxpbWl0KTtcbiAgICB2YXIgcmVzdWx0ID0gZmlsdGVyQnlQb3NpdGlvbihmaWx0ZXIubmFtZSwgZWxlbXMsIGZpbHRlci5kYXRhLCBvcHRpb25zKTtcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCB8fCBzZWxlY3Rvci5sZW5ndGggPT09IGZpbHRlckluZGV4ICsgMSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB2YXIgcmVtYWluaW5nU2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZShmaWx0ZXJJbmRleCArIDEpO1xuICAgIHZhciByZW1haW5pbmdIYXNUcmF2ZXJzYWwgPSByZW1haW5pbmdTZWxlY3Rvci5zb21lKGNzc193aGF0XzEuaXNUcmF2ZXJzYWwpO1xuICAgIHZhciByZW1haW5pbmdPcHRzID0gYWRkQ29udGV4dElmU2NvcGUocmVtYWluaW5nU2VsZWN0b3IsIG9wdGlvbnMsIHNjb3BlQ29udGV4dCk7XG4gICAgaWYgKHJlbWFpbmluZ0hhc1RyYXZlcnNhbCkge1xuICAgICAgICAvKlxuICAgICAgICAgKiBTb21lIHR5cGVzIG9mIHRyYXZlcnNhbHMgaGF2ZSBzcGVjaWFsIGxvZ2ljIHdoZW4gdGhleSBzdGFydCBhIHNlbGVjdG9yXG4gICAgICAgICAqIGluIGNzcy1zZWxlY3QuIElmIHRoaXMgaXMgdGhlIGNhc2UsIGFkZCBhIHVuaXZlcnNhbCBzZWxlY3RvciBpbiBmcm9udCBvZlxuICAgICAgICAgKiB0aGUgc2VsZWN0b3IgdG8gYXZvaWQgdGhpcyBiZWhhdmlvci5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChzcGVjaWFsVHJhdmVyc2FsLmhhcyhyZW1haW5pbmdTZWxlY3RvclswXS50eXBlKSkge1xuICAgICAgICAgICAgcmVtYWluaW5nU2VsZWN0b3IudW5zaGlmdChVTklWRVJTQUxfU0VMRUNUT1IpO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgICAqIEFkZCBhIHNjb3BlIHRva2VuIGluIGZyb250IG9mIHRoZSByZW1haW5pbmcgc2VsZWN0b3IsXG4gICAgICAgICAqIHRvIG1ha2Ugc3VyZSB0cmF2ZXJzYWxzIGRvbid0IG1hdGNoIGVsZW1lbnRzIHRoYXQgYXJlbid0IGFcbiAgICAgICAgICogcGFydCBvZiB0aGUgY29uc2lkZXJlZCB0cmVlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtYWluaW5nU2VsZWN0b3IudW5zaGlmdChTQ09QRV9QU0VVRE8pO1xuICAgIH1cbiAgICAvKlxuICAgICAqIElmIHdlIGhhdmUgYW5vdGhlciBmaWx0ZXIsIHJlY3Vyc2l2ZWx5IGNhbGwgYGZpbmRGaWx0ZXJFbGVtZW50c2AsXG4gICAgICogd2l0aCB0aGUgYHJlY3Vyc2l2ZWAgZmxhZyBkaXNhYmxlZC4gV2Ugb25seSBoYXZlIHRvIGxvb2sgZm9yIG1vcmVcbiAgICAgKiBlbGVtZW50cyB3aGVuIHdlIHNlZSBhIHRyYXZlcnNhbC5cbiAgICAgKlxuICAgICAqIE90aGVyd2lzZSxcbiAgICAgKi9cbiAgICByZXR1cm4gcmVtYWluaW5nU2VsZWN0b3Iuc29tZShwb3NpdGlvbmFsc18xLmlzRmlsdGVyKVxuICAgICAgICA/IGZpbmRGaWx0ZXJFbGVtZW50cyhyZXN1bHQsIHJlbWFpbmluZ1NlbGVjdG9yLCBvcHRpb25zLCBmYWxzZSwgc2NvcGVDb250ZXh0KVxuICAgICAgICA6IHJlbWFpbmluZ0hhc1RyYXZlcnNhbFxuICAgICAgICAgICAgPyAvLyBRdWVyeSBleGlzdGluZyBlbGVtZW50cyB0byByZXNvbHZlIHRyYXZlcnNhbC5cbiAgICAgICAgICAgICAgICBmaW5kRWxlbWVudHMocmVzdWx0LCBbcmVtYWluaW5nU2VsZWN0b3JdLCByZW1haW5pbmdPcHRzLCBJbmZpbml0eSlcbiAgICAgICAgICAgIDogLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgbW9yZSB0cmF2ZXJzYWxzLCBzaW1wbHkgZmlsdGVyIGVsZW1lbnRzLlxuICAgICAgICAgICAgICAgIGZpbHRlckVsZW1lbnRzKHJlc3VsdCwgW3JlbWFpbmluZ1NlbGVjdG9yXSwgcmVtYWluaW5nT3B0cyk7XG59XG5mdW5jdGlvbiBmaW5kRWxlbWVudHMocm9vdCwgc2VsLCBvcHRpb25zLCBsaW1pdCkge1xuICAgIGlmIChsaW1pdCA9PT0gMClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgc2VlbXMgdG8gbWVzcyB1cCB0aGUgdHlwZSBoZXJlIMKvXFxfKOODhClfL8KvXG4gICAgdmFyIHF1ZXJ5ID0gY3NzX3NlbGVjdF8xLl9jb21waWxlVG9rZW4oc2VsLCBvcHRpb25zLCByb290KTtcbiAgICB2YXIgZWxlbXMgPSBjc3Nfc2VsZWN0XzEucHJlcGFyZUNvbnRleHQocm9vdCwgRG9tVXRpbHMsIHF1ZXJ5LnNob3VsZFRlc3ROZXh0U2libGluZ3MpO1xuICAgIHJldHVybiBEb21VdGlscy5maW5kKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBEb21VdGlscy5pc1RhZyhub2RlKSAmJiBxdWVyeShub2RlKTsgfSwgZWxlbXMsIHRydWUsIGxpbWl0KTtcbn1cbmZ1bmN0aW9uIGZpbHRlckVsZW1lbnRzKGVsZW1lbnRzLCBzZWwsIG9wdGlvbnMpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIHNlZW1zIHRvIG1lc3MgdXAgdGhlIHR5cGUgaGVyZSDCr1xcXyjjg4QpXy/Cr1xuICAgIHZhciBxdWVyeSA9IGNzc19zZWxlY3RfMS5fY29tcGlsZVRva2VuKHNlbCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcihxdWVyeSk7XG59XG4iXX0=