{"version":3,"sources":["index.js"],"names":["_enzymeMatchers","_interopRequireDefault","require","_serializer","obj","__esModule","default","global","bootstrapEnzymeEnvironment","exposeGlobals","expect","addSnapshotSerializer","matchers","Object","keys","forEach","matcherKey","matcher","wrapper","args","result","call","message","isNot","negatedMessage","contextualInformation","expected","utils","RECEIVED_COLOR","actual","EXPECTED_COLOR","extend"],"mappings":"AAAA;;;;;;;;AAEA,IAAIA,eAAe,GAAGC,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA5C;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,2BAAD,CAAR,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAW/F,IAAIG,MAAM,CAACC,0BAAX,EAAuC;AAAA,iBAGjCN,OAAO,CAAC,mCAAD,CAH0B;AAAA,MAEnCO,aAFmC,YAEnCA,aAFmC;;AAKrCA,EAAAA,aAAa;AACd;;AAGDC,MAAM,CAACC,qBAAP,CAA6BR,WAAW,CAACG,OAAzC;AAEA,IAAMM,QAAQ,GAAG,EAAjB;AACAC,MAAM,CAACC,IAAP,CAAYd,eAAe,CAACM,OAA5B,EAAqCS,OAArC,CAA6C,UAAAC,UAAU,EAAI;AACzD,MAAMC,OAAO,GAAG,kCACbD,UADa,YACDE,OADC,EACiB;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAC7B,QAAMC,MAAM,GAAG,yBAAApB,eAAe,CAACM,OAAhB,CAAwBU,UAAxB,GAAoCK,IAApC,+BAAyC,IAAzC,EAA+CH,OAA/C,SAA2DC,IAA3D,EAAf;;AAEA,QAAIG,QAAO,GAAG,KAAKC,KAAL,GAAaH,MAAM,CAACI,cAApB,GAAqCJ,MAAM,CAACE,OAA1D;;AAEA,QAAIF,MAAM,CAACK,qBAAP,CAA6BC,QAAjC,EAA2C;AACzCJ,MAAAA,QAAO,WAAS,KAAKK,KAAL,CAAWC,cAAX,CAA0BR,MAAM,CAACK,qBAAP,CAA6BC,QAAvD,CAAhB;AACD;;AAED,QAAIN,MAAM,CAACK,qBAAP,CAA6BI,MAAjC,EAAyC;AACvCP,MAAAA,QAAO,WAAS,KAAKK,KAAL,CAAWG,cAAX,CAA0BV,MAAM,CAACK,qBAAP,CAA6BI,MAAvD,CAAhB;AACD;;AAED,sCAAYT,MAAZ;AACEE,MAAAA,OAAO,EAAE;AAAA,eAAMA,QAAN;AAAA;AADX;AAGD,GAjBa,EAmBdN,UAnBc,CAAhB;AAoBAJ,EAAAA,QAAQ,CAACI,UAAD,CAAR,GAAuBC,OAAvB;AACD,CAtBD;AAuBAP,MAAM,CAACqB,MAAP,CAAcnB,QAAd","sourcesContent":["\"use strict\";\n\nvar _enzymeMatchers = _interopRequireDefault(require(\"enzyme-matchers\"));\n\nvar _serializer = _interopRequireDefault(require(\"enzyme-to-json/serializer\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable global-require */\n\n/**\n * This source code is licensed under the MIT-style license found in the\n * LICENSE file in the root directory of this source tree. *\n *\n * @providesModule setupFilesAfterEnv\n * \n */\nif (global.bootstrapEnzymeEnvironment) {\n  const {\n    exposeGlobals\n  } = require('jest-environment-enzyme/lib/setup');\n\n  exposeGlobals();\n} // add the snapshot serializer for Enzyme wrappers\n\n\nexpect.addSnapshotSerializer(_serializer.default); // add methods!\n\nconst matchers = {};\nObject.keys(_enzymeMatchers.default).forEach(matcherKey => {\n  const matcher = {\n    [matcherKey](wrapper, ...args) {\n      const result = _enzymeMatchers.default[matcherKey].call(this, wrapper, ...args);\n\n      let message = this.isNot ? result.negatedMessage : result.message;\n\n      if (result.contextualInformation.expected) {\n        message += `\\n${this.utils.RECEIVED_COLOR(result.contextualInformation.expected)}`;\n      }\n\n      if (result.contextualInformation.actual) {\n        message += `\\n${this.utils.EXPECTED_COLOR(result.contextualInformation.actual)}`;\n      }\n\n      return { ...result,\n        message: () => message\n      };\n    }\n\n  }[matcherKey];\n  matchers[matcherKey] = matcher;\n});\nexpect.extend(matchers);"]}