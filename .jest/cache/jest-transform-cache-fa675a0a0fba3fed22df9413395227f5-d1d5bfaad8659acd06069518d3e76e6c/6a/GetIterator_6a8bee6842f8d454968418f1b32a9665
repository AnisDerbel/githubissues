0ef0b2553c259b64107261e654c0e205
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $asyncIterator = GetIntrinsic('%Symbol.asyncIterator%', true);

var inspect = require('object-inspect');

var hasSymbols = require('has-symbols')();

var getIteratorMethod = require('../helpers/getIteratorMethod');

var AdvanceStringIndex = require('./AdvanceStringIndex');

var Call = require('./Call');

var GetMethod = require('./GetMethod');

var IsArray = require('./IsArray');

var Type = require('./Type');

module.exports = function GetIterator(obj, hint, method) {
  var actualHint = hint;

  if (arguments.length < 2) {
    actualHint = 'sync';
  }

  if (actualHint !== 'sync' && actualHint !== 'async') {
    throw new $TypeError("Assertion failed: `hint` must be one of 'sync' or 'async', got " + inspect(hint));
  }

  var actualMethod = method;

  if (arguments.length < 3) {
    if (actualHint === 'async') {
      if (hasSymbols && $asyncIterator) {
        actualMethod = GetMethod(obj, $asyncIterator);
      }

      if (actualMethod === undefined) {
        throw new $TypeError("async from sync iterators aren't currently supported");
      }
    } else {
      actualMethod = getIteratorMethod({
        AdvanceStringIndex: AdvanceStringIndex,
        GetMethod: GetMethod,
        IsArray: IsArray,
        Type: Type
      }, obj);
    }
  }

  var iterator = Call(actualMethod, obj);

  if (Type(iterator) !== 'Object') {
    throw new $TypeError('iterator must return an object');
  }

  return iterator;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdldEl0ZXJhdG9yLmpzIl0sIm5hbWVzIjpbIkdldEludHJpbnNpYyIsInJlcXVpcmUiLCIkVHlwZUVycm9yIiwiJGFzeW5jSXRlcmF0b3IiLCJpbnNwZWN0IiwiaGFzU3ltYm9scyIsImdldEl0ZXJhdG9yTWV0aG9kIiwiQWR2YW5jZVN0cmluZ0luZGV4IiwiQ2FsbCIsIkdldE1ldGhvZCIsIklzQXJyYXkiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkdldEl0ZXJhdG9yIiwib2JqIiwiaGludCIsIm1ldGhvZCIsImFjdHVhbEhpbnQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhY3R1YWxNZXRob2QiLCJ1bmRlZmluZWQiLCJpdGVyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdGLFlBQVksQ0FBQyxhQUFELENBQTdCO0FBQ0EsSUFBSUcsY0FBYyxHQUFHSCxZQUFZLENBQUMsd0JBQUQsRUFBMkIsSUFBM0IsQ0FBakM7O0FBRUEsSUFBSUksT0FBTyxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBckI7O0FBQ0EsSUFBSUksVUFBVSxHQUFHSixPQUFPLENBQUMsYUFBRCxDQUFQLEVBQWpCOztBQUVBLElBQUlLLGlCQUFpQixHQUFHTCxPQUFPLENBQUMsOEJBQUQsQ0FBL0I7O0FBQ0EsSUFBSU0sa0JBQWtCLEdBQUdOLE9BQU8sQ0FBQyxzQkFBRCxDQUFoQzs7QUFDQSxJQUFJTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxRQUFELENBQWxCOztBQUNBLElBQUlRLFNBQVMsR0FBR1IsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0EsSUFBSVMsT0FBTyxHQUFHVCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxJQUFJVSxJQUFJLEdBQUdWLE9BQU8sQ0FBQyxRQUFELENBQWxCOztBQUdBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEJDLElBQTFCLEVBQWdDQyxNQUFoQyxFQUF3QztBQUN4RCxNQUFJQyxVQUFVLEdBQUdGLElBQWpCOztBQUNBLE1BQUlHLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN6QkYsSUFBQUEsVUFBVSxHQUFHLE1BQWI7QUFDQTs7QUFDRCxNQUFJQSxVQUFVLEtBQUssTUFBZixJQUF5QkEsVUFBVSxLQUFLLE9BQTVDLEVBQXFEO0FBQ3BELFVBQU0sSUFBSWhCLFVBQUosQ0FBZSxvRUFBb0VFLE9BQU8sQ0FBQ1ksSUFBRCxDQUExRixDQUFOO0FBQ0E7O0FBRUQsTUFBSUssWUFBWSxHQUFHSixNQUFuQjs7QUFDQSxNQUFJRSxTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDekIsUUFBSUYsVUFBVSxLQUFLLE9BQW5CLEVBQTRCO0FBQzNCLFVBQUliLFVBQVUsSUFBSUYsY0FBbEIsRUFBa0M7QUFDakNrQixRQUFBQSxZQUFZLEdBQUdaLFNBQVMsQ0FBQ00sR0FBRCxFQUFNWixjQUFOLENBQXhCO0FBQ0E7O0FBQ0QsVUFBSWtCLFlBQVksS0FBS0MsU0FBckIsRUFBZ0M7QUFDL0IsY0FBTSxJQUFJcEIsVUFBSixDQUFlLHNEQUFmLENBQU47QUFDQTtBQUNELEtBUEQsTUFPTztBQUNObUIsTUFBQUEsWUFBWSxHQUFHZixpQkFBaUIsQ0FDL0I7QUFDQ0MsUUFBQUEsa0JBQWtCLEVBQUVBLGtCQURyQjtBQUVDRSxRQUFBQSxTQUFTLEVBQUVBLFNBRlo7QUFHQ0MsUUFBQUEsT0FBTyxFQUFFQSxPQUhWO0FBSUNDLFFBQUFBLElBQUksRUFBRUE7QUFKUCxPQUQrQixFQU8vQkksR0FQK0IsQ0FBaEM7QUFTQTtBQUNEOztBQUNELE1BQUlRLFFBQVEsR0FBR2YsSUFBSSxDQUFDYSxZQUFELEVBQWVOLEdBQWYsQ0FBbkI7O0FBQ0EsTUFBSUosSUFBSSxDQUFDWSxRQUFELENBQUosS0FBbUIsUUFBdkIsRUFBaUM7QUFDaEMsVUFBTSxJQUFJckIsVUFBSixDQUFlLGdDQUFmLENBQU47QUFDQTs7QUFFRCxTQUFPcUIsUUFBUDtBQVdBLENBOUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkYXN5bmNJdGVyYXRvciA9IEdldEludHJpbnNpYygnJVN5bWJvbC5hc3luY0l0ZXJhdG9yJScsIHRydWUpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaGVscGVycy9nZXRJdGVyYXRvck1ldGhvZCcpO1xudmFyIEFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vQWR2YW5jZVN0cmluZ0luZGV4Jyk7XG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldE1ldGhvZCA9IHJlcXVpcmUoJy4vR2V0TWV0aG9kJyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy85LjAvI3NlYy1nZXRpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmosIGhpbnQsIG1ldGhvZCkge1xuXHR2YXIgYWN0dWFsSGludCA9IGhpbnQ7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuXHRcdGFjdHVhbEhpbnQgPSAnc3luYyc7XG5cdH1cblx0aWYgKGFjdHVhbEhpbnQgIT09ICdzeW5jJyAmJiBhY3R1YWxIaW50ICE9PSAnYXN5bmMnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJBc3NlcnRpb24gZmFpbGVkOiBgaGludGAgbXVzdCBiZSBvbmUgb2YgJ3N5bmMnIG9yICdhc3luYycsIGdvdCBcIiArIGluc3BlY3QoaGludCkpO1xuXHR9XG5cblx0dmFyIGFjdHVhbE1ldGhvZCA9IG1ldGhvZDtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG5cdFx0aWYgKGFjdHVhbEhpbnQgPT09ICdhc3luYycpIHtcblx0XHRcdGlmIChoYXNTeW1ib2xzICYmICRhc3luY0l0ZXJhdG9yKSB7XG5cdFx0XHRcdGFjdHVhbE1ldGhvZCA9IEdldE1ldGhvZChvYmosICRhc3luY0l0ZXJhdG9yKTtcblx0XHRcdH1cblx0XHRcdGlmIChhY3R1YWxNZXRob2QgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihcImFzeW5jIGZyb20gc3luYyBpdGVyYXRvcnMgYXJlbid0IGN1cnJlbnRseSBzdXBwb3J0ZWRcIik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFjdHVhbE1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0QWR2YW5jZVN0cmluZ0luZGV4OiBBZHZhbmNlU3RyaW5nSW5kZXgsXG5cdFx0XHRcdFx0R2V0TWV0aG9kOiBHZXRNZXRob2QsXG5cdFx0XHRcdFx0SXNBcnJheTogSXNBcnJheSxcblx0XHRcdFx0XHRUeXBlOiBUeXBlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9ialxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0dmFyIGl0ZXJhdG9yID0gQ2FsbChhY3R1YWxNZXRob2QsIG9iaik7XG5cdGlmIChUeXBlKGl0ZXJhdG9yKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdH1cblxuXHRyZXR1cm4gaXRlcmF0b3I7XG5cblx0Ly8gVE9ETzogVGhpcyBzaG91bGQgcmV0dXJuIGFuIEl0ZXJhdG9yUmVjb3JkXG5cdC8qXG5cdHZhciBuZXh0TWV0aG9kID0gR2V0VihpdGVyYXRvciwgJ25leHQnKTtcblx0cmV0dXJuIHtcblx0XHQnW1tJdGVyYXRvcl1dJzogaXRlcmF0b3IsXG5cdFx0J1tbTmV4dE1ldGhvZF1dJzogbmV4dE1ldGhvZCxcblx0XHQnW1tEb25lXV0nOiBmYWxzZVxuXHR9O1xuXHQqL1xufTtcbiJdfQ==