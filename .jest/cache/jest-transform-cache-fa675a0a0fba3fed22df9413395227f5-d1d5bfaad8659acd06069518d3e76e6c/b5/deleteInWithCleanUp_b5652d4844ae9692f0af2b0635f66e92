275c09c2bb3a31370ff300730e6cae9a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _toPath2 = _interopRequireDefault(require("lodash/toPath"));

function createDeleteInWithCleanUp(structure) {
  var shouldDeleteDefault = function shouldDeleteDefault(structure) {
    return function (state, path) {
      return structure.getIn(state, path) !== undefined;
    };
  };

  var deepEqual = structure.deepEqual,
      empty = structure.empty,
      getIn = structure.getIn,
      deleteIn = structure.deleteIn,
      setIn = structure.setIn;
  return function (shouldDelete) {
    if (shouldDelete === void 0) {
      shouldDelete = shouldDeleteDefault;
    }

    var deleteInWithCleanUp = function deleteInWithCleanUp(state, path) {
      if (path[path.length - 1] === ']') {
        var pathTokens = (0, _toPath2["default"])(path);
        pathTokens.pop();
        var parent = getIn(state, pathTokens.join('.'));
        return parent ? setIn(state, path) : state;
      }

      var result = state;

      if (shouldDelete(structure)(state, path)) {
        result = deleteIn(state, path);
      }

      var dotIndex = path.lastIndexOf('.');

      if (dotIndex > 0) {
        var parentPath = path.substring(0, dotIndex);

        if (parentPath[parentPath.length - 1] !== ']') {
          var _parent = getIn(result, parentPath);

          if (deepEqual(_parent, empty)) {
            return deleteInWithCleanUp(result, parentPath);
          }
        }
      }

      return result;
    };

    return deleteInWithCleanUp;
  };
}

var _default = createDeleteInWithCleanUp;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlbGV0ZUluV2l0aENsZWFuVXAuanMiXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsIl90b1BhdGgyIiwiY3JlYXRlRGVsZXRlSW5XaXRoQ2xlYW5VcCIsInN0cnVjdHVyZSIsInNob3VsZERlbGV0ZURlZmF1bHQiLCJzdGF0ZSIsInBhdGgiLCJnZXRJbiIsInVuZGVmaW5lZCIsImRlZXBFcXVhbCIsImVtcHR5IiwiZGVsZXRlSW4iLCJzZXRJbiIsInNob3VsZERlbGV0ZSIsImRlbGV0ZUluV2l0aENsZWFuVXAiLCJsZW5ndGgiLCJwYXRoVG9rZW5zIiwicG9wIiwicGFyZW50Iiwiam9pbiIsInJlc3VsdCIsImRvdEluZGV4IiwibGFzdEluZGV4T2YiLCJwYXJlbnRQYXRoIiwic3Vic3RyaW5nIiwiX3BhcmVudCIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUFELENBQXBDOztBQUVBQyxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDLFNBQUQsQ0FBUCxHQUFxQixLQUFLLENBQTFCOztBQUVBLElBQUlFLFFBQVEsR0FBR0osc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxlQUFELENBQVIsQ0FBckM7O0FBRUEsU0FBU0kseUJBQVQsQ0FBbUNDLFNBQW5DLEVBQThDO0FBQzVDLE1BQUlDLG1CQUFtQixHQUFHLFNBQVNBLG1CQUFULENBQTZCRCxTQUE3QixFQUF3QztBQUNoRSxXQUFPLFVBQVVFLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCO0FBQzVCLGFBQU9ILFNBQVMsQ0FBQ0ksS0FBVixDQUFnQkYsS0FBaEIsRUFBdUJDLElBQXZCLE1BQWlDRSxTQUF4QztBQUNELEtBRkQ7QUFHRCxHQUpEOztBQU1BLE1BQUlDLFNBQVMsR0FBR04sU0FBUyxDQUFDTSxTQUExQjtBQUFBLE1BQ0lDLEtBQUssR0FBR1AsU0FBUyxDQUFDTyxLQUR0QjtBQUFBLE1BRUlILEtBQUssR0FBR0osU0FBUyxDQUFDSSxLQUZ0QjtBQUFBLE1BR0lJLFFBQVEsR0FBR1IsU0FBUyxDQUFDUSxRQUh6QjtBQUFBLE1BSUlDLEtBQUssR0FBR1QsU0FBUyxDQUFDUyxLQUp0QjtBQUtBLFNBQU8sVUFBVUMsWUFBVixFQUF3QjtBQUM3QixRQUFJQSxZQUFZLEtBQUssS0FBSyxDQUExQixFQUE2QjtBQUMzQkEsTUFBQUEsWUFBWSxHQUFHVCxtQkFBZjtBQUNEOztBQUVELFFBQUlVLG1CQUFtQixHQUFHLFNBQVNBLG1CQUFULENBQTZCVCxLQUE3QixFQUFvQ0MsSUFBcEMsRUFBMEM7QUFDbEUsVUFBSUEsSUFBSSxDQUFDQSxJQUFJLENBQUNTLE1BQUwsR0FBYyxDQUFmLENBQUosS0FBMEIsR0FBOUIsRUFBbUM7QUFFakMsWUFBSUMsVUFBVSxHQUFHLENBQUMsR0FBR2YsUUFBUSxDQUFDLFNBQUQsQ0FBWixFQUF5QkssSUFBekIsQ0FBakI7QUFDQVUsUUFBQUEsVUFBVSxDQUFDQyxHQUFYO0FBQ0EsWUFBSUMsTUFBTSxHQUFHWCxLQUFLLENBQUNGLEtBQUQsRUFBUVcsVUFBVSxDQUFDRyxJQUFYLENBQWdCLEdBQWhCLENBQVIsQ0FBbEI7QUFDQSxlQUFPRCxNQUFNLEdBQUdOLEtBQUssQ0FBQ1AsS0FBRCxFQUFRQyxJQUFSLENBQVIsR0FBd0JELEtBQXJDO0FBQ0Q7O0FBRUQsVUFBSWUsTUFBTSxHQUFHZixLQUFiOztBQUVBLFVBQUlRLFlBQVksQ0FBQ1YsU0FBRCxDQUFaLENBQXdCRSxLQUF4QixFQUErQkMsSUFBL0IsQ0FBSixFQUEwQztBQUN4Q2MsUUFBQUEsTUFBTSxHQUFHVCxRQUFRLENBQUNOLEtBQUQsRUFBUUMsSUFBUixDQUFqQjtBQUNEOztBQUVELFVBQUllLFFBQVEsR0FBR2YsSUFBSSxDQUFDZ0IsV0FBTCxDQUFpQixHQUFqQixDQUFmOztBQUVBLFVBQUlELFFBQVEsR0FBRyxDQUFmLEVBQWtCO0FBQ2hCLFlBQUlFLFVBQVUsR0FBR2pCLElBQUksQ0FBQ2tCLFNBQUwsQ0FBZSxDQUFmLEVBQWtCSCxRQUFsQixDQUFqQjs7QUFFQSxZQUFJRSxVQUFVLENBQUNBLFVBQVUsQ0FBQ1IsTUFBWCxHQUFvQixDQUFyQixDQUFWLEtBQXNDLEdBQTFDLEVBQStDO0FBQzdDLGNBQUlVLE9BQU8sR0FBR2xCLEtBQUssQ0FBQ2EsTUFBRCxFQUFTRyxVQUFULENBQW5COztBQUVBLGNBQUlkLFNBQVMsQ0FBQ2dCLE9BQUQsRUFBVWYsS0FBVixDQUFiLEVBQStCO0FBQzdCLG1CQUFPSSxtQkFBbUIsQ0FBQ00sTUFBRCxFQUFTRyxVQUFULENBQTFCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELGFBQU9ILE1BQVA7QUFDRCxLQTlCRDs7QUFnQ0EsV0FBT04sbUJBQVA7QUFDRCxHQXRDRDtBQXVDRDs7QUFFRCxJQUFJWSxRQUFRLEdBQUd4Qix5QkFBZjtBQUNBSCxPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCMkIsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF90b1BhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL3RvUGF0aFwiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZURlbGV0ZUluV2l0aENsZWFuVXAoc3RydWN0dXJlKSB7XG4gIHZhciBzaG91bGREZWxldGVEZWZhdWx0ID0gZnVuY3Rpb24gc2hvdWxkRGVsZXRlRGVmYXVsdChzdHJ1Y3R1cmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBwYXRoKSB7XG4gICAgICByZXR1cm4gc3RydWN0dXJlLmdldEluKHN0YXRlLCBwYXRoKSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGRlZXBFcXVhbCA9IHN0cnVjdHVyZS5kZWVwRXF1YWwsXG4gICAgICBlbXB0eSA9IHN0cnVjdHVyZS5lbXB0eSxcbiAgICAgIGdldEluID0gc3RydWN0dXJlLmdldEluLFxuICAgICAgZGVsZXRlSW4gPSBzdHJ1Y3R1cmUuZGVsZXRlSW4sXG4gICAgICBzZXRJbiA9IHN0cnVjdHVyZS5zZXRJbjtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzaG91bGREZWxldGUpIHtcbiAgICBpZiAoc2hvdWxkRGVsZXRlID09PSB2b2lkIDApIHtcbiAgICAgIHNob3VsZERlbGV0ZSA9IHNob3VsZERlbGV0ZURlZmF1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGRlbGV0ZUluV2l0aENsZWFuVXAgPSBmdW5jdGlvbiBkZWxldGVJbldpdGhDbGVhblVwKHN0YXRlLCBwYXRoKSB7XG4gICAgICBpZiAocGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSAnXScpIHtcbiAgICAgICAgLy8gYXJyYXkgcGF0aFxuICAgICAgICB2YXIgcGF0aFRva2VucyA9ICgwLCBfdG9QYXRoMltcImRlZmF1bHRcIl0pKHBhdGgpO1xuICAgICAgICBwYXRoVG9rZW5zLnBvcCgpO1xuICAgICAgICB2YXIgcGFyZW50ID0gZ2V0SW4oc3RhdGUsIHBhdGhUb2tlbnMuam9pbignLicpKTtcbiAgICAgICAgcmV0dXJuIHBhcmVudCA/IHNldEluKHN0YXRlLCBwYXRoKSA6IHN0YXRlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gc3RhdGU7XG5cbiAgICAgIGlmIChzaG91bGREZWxldGUoc3RydWN0dXJlKShzdGF0ZSwgcGF0aCkpIHtcbiAgICAgICAgcmVzdWx0ID0gZGVsZXRlSW4oc3RhdGUsIHBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZG90SW5kZXggPSBwYXRoLmxhc3RJbmRleE9mKCcuJyk7XG5cbiAgICAgIGlmIChkb3RJbmRleCA+IDApIHtcbiAgICAgICAgdmFyIHBhcmVudFBhdGggPSBwYXRoLnN1YnN0cmluZygwLCBkb3RJbmRleCk7XG5cbiAgICAgICAgaWYgKHBhcmVudFBhdGhbcGFyZW50UGF0aC5sZW5ndGggLSAxXSAhPT0gJ10nKSB7XG4gICAgICAgICAgdmFyIF9wYXJlbnQgPSBnZXRJbihyZXN1bHQsIHBhcmVudFBhdGgpO1xuXG4gICAgICAgICAgaWYgKGRlZXBFcXVhbChfcGFyZW50LCBlbXB0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxldGVJbldpdGhDbGVhblVwKHJlc3VsdCwgcGFyZW50UGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWxldGVJbldpdGhDbGVhblVwO1xuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVEZWxldGVJbldpdGhDbGVhblVwO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXX0=