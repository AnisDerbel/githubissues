8aec0df686e7aa03a89ad76a008fe02a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Mixin = require('../../utils/mixin');

var Tokenizer = require('../../tokenizer');

var LocationInfoTokenizerMixin = require('./tokenizer-mixin');

var LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');

var HTML = require('../../common/html');

var $ = HTML.TAG_NAMES;

var LocationInfoParserMixin = function (_Mixin) {
  (0, _inherits2.default)(LocationInfoParserMixin, _Mixin);

  var _super = _createSuper(LocationInfoParserMixin);

  function LocationInfoParserMixin(parser) {
    var _this;

    (0, _classCallCheck2.default)(this, LocationInfoParserMixin);
    _this = _super.call(this, parser);
    _this.parser = parser;
    _this.treeAdapter = _this.parser.treeAdapter;
    _this.posTracker = null;
    _this.lastStartTagToken = null;
    _this.lastFosterParentingLocation = null;
    _this.currentToken = null;
    return _this;
  }

  (0, _createClass2.default)(LocationInfoParserMixin, [{
    key: "_setStartLocation",
    value: function _setStartLocation(element) {
      var loc = null;

      if (this.lastStartTagToken) {
        loc = (0, _extends2.default)({}, this.lastStartTagToken.location);
        loc.startTag = this.lastStartTagToken.location;
      }

      this.treeAdapter.setNodeSourceCodeLocation(element, loc);
    }
  }, {
    key: "_setEndLocation",
    value: function _setEndLocation(element, closingToken) {
      var loc = this.treeAdapter.getNodeSourceCodeLocation(element);

      if (loc) {
        if (closingToken.location) {
          var ctLoc = closingToken.location;
          var tn = this.treeAdapter.getTagName(element);
          var isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;
          var endLoc = {};

          if (isClosingEndTag) {
            endLoc.endTag = (0, _extends2.default)({}, ctLoc);
            endLoc.endLine = ctLoc.endLine;
            endLoc.endCol = ctLoc.endCol;
            endLoc.endOffset = ctLoc.endOffset;
          } else {
            endLoc.endLine = ctLoc.startLine;
            endLoc.endCol = ctLoc.startCol;
            endLoc.endOffset = ctLoc.startOffset;
          }

          this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
        }
      }
    }
  }, {
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      return {
        _bootstrap: function _bootstrap(document, fragmentContext) {
          orig._bootstrap.call(this, document, fragmentContext);

          mxn.lastStartTagToken = null;
          mxn.lastFosterParentingLocation = null;
          mxn.currentToken = null;
          var tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
          mxn.posTracker = tokenizerMixin.posTracker;
          Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
            onItemPop: function onItemPop(element) {
              mxn._setEndLocation(element, mxn.currentToken);
            }
          });
        },
        _runParsingLoop: function _runParsingLoop(scriptHandler) {
          orig._runParsingLoop.call(this, scriptHandler);

          for (var i = this.openElements.stackTop; i >= 0; i--) {
            mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
          }
        },
        _processTokenInForeignContent: function _processTokenInForeignContent(token) {
          mxn.currentToken = token;

          orig._processTokenInForeignContent.call(this, token);
        },
        _processToken: function _processToken(token) {
          mxn.currentToken = token;

          orig._processToken.call(this, token);

          var requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));

          if (requireExplicitUpdate) {
            for (var i = this.openElements.stackTop; i >= 0; i--) {
              var element = this.openElements.items[i];

              if (this.treeAdapter.getTagName(element) === token.tagName) {
                mxn._setEndLocation(element, token);

                break;
              }
            }
          }
        },
        _setDocumentType: function _setDocumentType(token) {
          orig._setDocumentType.call(this, token);

          var documentChildren = this.treeAdapter.getChildNodes(this.document);
          var cnLength = documentChildren.length;

          for (var i = 0; i < cnLength; i++) {
            var node = documentChildren[i];

            if (this.treeAdapter.isDocumentTypeNode(node)) {
              this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
              break;
            }
          }
        },
        _attachElementToTree: function _attachElementToTree(element) {
          mxn._setStartLocation(element);

          mxn.lastStartTagToken = null;

          orig._attachElementToTree.call(this, element);
        },
        _appendElement: function _appendElement(token, namespaceURI) {
          mxn.lastStartTagToken = token;

          orig._appendElement.call(this, token, namespaceURI);
        },
        _insertElement: function _insertElement(token, namespaceURI) {
          mxn.lastStartTagToken = token;

          orig._insertElement.call(this, token, namespaceURI);
        },
        _insertTemplate: function _insertTemplate(token) {
          mxn.lastStartTagToken = token;

          orig._insertTemplate.call(this, token);

          var tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
          this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
        },
        _insertFakeRootElement: function _insertFakeRootElement() {
          orig._insertFakeRootElement.call(this);

          this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
        },
        _appendCommentNode: function _appendCommentNode(token, parent) {
          orig._appendCommentNode.call(this, token, parent);

          var children = this.treeAdapter.getChildNodes(parent);
          var commentNode = children[children.length - 1];
          this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
        },
        _findFosterParentingLocation: function _findFosterParentingLocation() {
          mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
          return mxn.lastFosterParentingLocation;
        },
        _insertCharacters: function _insertCharacters(token) {
          orig._insertCharacters.call(this, token);

          var hasFosterParent = this._shouldFosterParentOnInsertion();

          var parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
          var siblings = this.treeAdapter.getChildNodes(parent);
          var textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;
          var textNode = siblings[textNodeIdx];
          var tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);

          if (tnLoc) {
            var _token$location = token.location,
                endLine = _token$location.endLine,
                endCol = _token$location.endCol,
                endOffset = _token$location.endOffset;
            this.treeAdapter.updateNodeSourceCodeLocation(textNode, {
              endLine: endLine,
              endCol: endCol,
              endOffset: endOffset
            });
          } else {
            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
          }
        }
      };
    }
  }]);
  return LocationInfoParserMixin;
}(Mixin);

module.exports = LocationInfoParserMixin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,