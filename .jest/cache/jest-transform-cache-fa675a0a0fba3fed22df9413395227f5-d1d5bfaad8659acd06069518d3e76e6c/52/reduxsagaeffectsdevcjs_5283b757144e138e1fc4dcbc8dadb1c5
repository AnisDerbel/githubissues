33375c000409aff942d331be723945ac
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

require('@redux-saga/symbols');

require('@babel/runtime/helpers/extends');

var is = require('@redux-saga/is');

var io = require('./io-1d6eccda.js');

require('@redux-saga/delay-p');

var done = function done(value) {
  return {
    done: true,
    value: value
  };
};

var qEnd = {};

function safeName(patternOrChannel) {
  if (is.channel(patternOrChannel)) {
    return 'channel';
  }

  if (is.stringableFunc(patternOrChannel)) {
    return String(patternOrChannel);
  }

  if (is.func(patternOrChannel)) {
    return patternOrChannel.name;
  }

  return String(patternOrChannel);
}

function fsmIterator(fsm, startState, name) {
  var stateUpdater,
      errorState,
      effect,
      nextState = startState;

  function next(arg, error) {
    if (nextState === qEnd) {
      return done(arg);
    }

    if (error && !errorState) {
      nextState = qEnd;
      throw error;
    } else {
      stateUpdater && stateUpdater(arg);
      var currentState = error ? fsm[errorState](error) : fsm[nextState]();
      nextState = currentState.nextState;
      effect = currentState.effect;
      stateUpdater = currentState.stateUpdater;
      errorState = currentState.errorState;
      return nextState === qEnd ? done(arg) : effect;
    }
  }

  return io.makeIterator(next, function (error) {
    return next(null, error);
  }, name);
}

function takeEvery(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = {
    done: false,
    value: io.take(patternOrChannel)
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io.fork.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var action,
      setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: 'q1',
        effect: yFork(action)
      };
    }
  }, 'q1', "takeEvery(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function takeLatest(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = {
    done: false,
    value: io.take(patternOrChannel)
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io.fork.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var yCancel = function yCancel(task) {
    return {
      done: false,
      value: io.cancel(task)
    };
  };

  var task, action;

  var setTask = function setTask(t) {
    return task = t;
  };

  var setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return task ? {
        nextState: 'q3',
        effect: yCancel(task)
      } : {
        nextState: 'q1',
        effect: yFork(action),
        stateUpdater: setTask
      };
    },
    q3: function q3() {
      return {
        nextState: 'q1',
        effect: yFork(action),
        stateUpdater: setTask
      };
    }
  }, 'q1', "takeLatest(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function takeLeading(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = {
    done: false,
    value: io.take(patternOrChannel)
  };

  var yCall = function yCall(ac) {
    return {
      done: false,
      value: io.call.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var action;

  var setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: 'q1',
        effect: yCall(action)
      };
    }
  }, 'q1', "takeLeading(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

function throttle(delayLength, pattern, worker) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var action, channel;
  var yActionChannel = {
    done: false,
    value: io.actionChannel(pattern, io.sliding(1))
  };

  var yTake = function yTake() {
    return {
      done: false,
      value: io.take(channel)
    };
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io.fork.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var yDelay = {
    done: false,
    value: io.delay(delayLength)
  };

  var setAction = function setAction(ac) {
    return action = ac;
  };

  var setChannel = function setChannel(ch) {
    return channel = ch;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yActionChannel,
        stateUpdater: setChannel
      };
    },
    q2: function q2() {
      return {
        nextState: 'q3',
        effect: yTake(),
        stateUpdater: setAction
      };
    },
    q3: function q3() {
      return {
        nextState: 'q4',
        effect: yFork(action)
      };
    },
    q4: function q4() {
      return {
        nextState: 'q2',
        effect: yDelay
      };
    }
  }, 'q1', "throttle(" + safeName(pattern) + ", " + worker.name + ")");
}

function retry(maxTries, delayLength, fn) {
  var counter = maxTries;

  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var yCall = {
    done: false,
    value: io.call.apply(void 0, [fn].concat(args))
  };
  var yDelay = {
    done: false,
    value: io.delay(delayLength)
  };
  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yCall,
        errorState: 'q10'
      };
    },
    q2: function q2() {
      return {
        nextState: qEnd
      };
    },
    q10: function q10(error) {
      counter -= 1;

      if (counter <= 0) {
        throw error;
      }

      return {
        nextState: 'q1',
        effect: yDelay
      };
    }
  }, 'q1', "retry(" + fn.name + ")");
}

function debounceHelper(delayLength, patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var action, raceOutput;
  var yTake = {
    done: false,
    value: io.take(patternOrChannel)
  };
  var yRace = {
    done: false,
    value: io.race({
      action: io.take(patternOrChannel),
      debounce: io.delay(delayLength)
    })
  };

  var yFork = function yFork(ac) {
    return {
      done: false,
      value: io.fork.apply(void 0, [worker].concat(args, [ac]))
    };
  };

  var yNoop = function yNoop(value) {
    return {
      done: false,
      value: value
    };
  };

  var setAction = function setAction(ac) {
    return action = ac;
  };

  var setRaceOutput = function setRaceOutput(ro) {
    return raceOutput = ro;
  };

  return fsmIterator({
    q1: function q1() {
      return {
        nextState: 'q2',
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: 'q3',
        effect: yRace,
        stateUpdater: setRaceOutput
      };
    },
    q3: function q3() {
      return raceOutput.debounce ? {
        nextState: 'q1',
        effect: yFork(action)
      } : {
        nextState: 'q2',
        effect: yNoop(raceOutput.action),
        stateUpdater: setAction
      };
    }
  }, 'q1', "debounce(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}

var validateTakeEffect = function validateTakeEffect(fn, patternOrChannel, worker) {
  io.check(patternOrChannel, is.notUndef, fn.name + " requires a pattern or channel");
  io.check(worker, is.notUndef, fn.name + " requires a saga parameter");
};

function takeEvery$1(patternOrChannel, worker) {
  {
    validateTakeEffect(takeEvery$1, patternOrChannel, worker);
  }

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return io.fork.apply(void 0, [takeEvery, patternOrChannel, worker].concat(args));
}

function takeLatest$1(patternOrChannel, worker) {
  {
    validateTakeEffect(takeLatest$1, patternOrChannel, worker);
  }

  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  return io.fork.apply(void 0, [takeLatest, patternOrChannel, worker].concat(args));
}

function takeLeading$1(patternOrChannel, worker) {
  {
    validateTakeEffect(takeLeading$1, patternOrChannel, worker);
  }

  for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    args[_key3 - 2] = arguments[_key3];
  }

  return io.fork.apply(void 0, [takeLeading, patternOrChannel, worker].concat(args));
}

function throttle$1(ms, pattern, worker) {
  {
    io.check(pattern, is.notUndef, 'throttle requires a pattern');
    io.check(worker, is.notUndef, 'throttle requires a saga parameter');
  }

  for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
    args[_key4 - 3] = arguments[_key4];
  }

  return io.fork.apply(void 0, [throttle, ms, pattern, worker].concat(args));
}

function retry$1(maxTries, delayLength, worker) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
    args[_key5 - 3] = arguments[_key5];
  }

  return io.call.apply(void 0, [retry, maxTries, delayLength, worker].concat(args));
}

function debounce(delayLength, pattern, worker) {
  for (var _len6 = arguments.length, args = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
    args[_key6 - 3] = arguments[_key6];
  }

  return io.fork.apply(void 0, [debounceHelper, delayLength, pattern, worker].concat(args));
}

exports.actionChannel = io.actionChannel;
exports.all = io.all;
exports.apply = io.apply;
exports.call = io.call;
exports.cancel = io.cancel;
exports.cancelled = io.cancelled;
exports.cps = io.cps;
exports.delay = io.delay;
exports.effectTypes = io.effectTypes;
exports.flush = io.flush;
exports.fork = io.fork;
exports.getContext = io.getContext;
exports.join = io.join;
exports.put = io.put;
exports.putResolve = io.putResolve;
exports.race = io.race;
exports.select = io.select;
exports.setContext = io.setContext;
exports.spawn = io.spawn;
exports.take = io.take;
exports.takeMaybe = io.takeMaybe;
exports.debounce = debounce;
exports.retry = retry$1;
exports.takeEvery = takeEvery$1;
exports.takeLatest = takeLatest$1;
exports.takeLeading = takeLeading$1;
exports.throttle = throttle$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4LXNhZ2EtZWZmZWN0cy5kZXYuY2pzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVxdWlyZSIsImlzIiwiaW8iLCJkb25lIiwicUVuZCIsInNhZmVOYW1lIiwicGF0dGVybk9yQ2hhbm5lbCIsImNoYW5uZWwiLCJzdHJpbmdhYmxlRnVuYyIsIlN0cmluZyIsImZ1bmMiLCJuYW1lIiwiZnNtSXRlcmF0b3IiLCJmc20iLCJzdGFydFN0YXRlIiwic3RhdGVVcGRhdGVyIiwiZXJyb3JTdGF0ZSIsImVmZmVjdCIsIm5leHRTdGF0ZSIsIm5leHQiLCJhcmciLCJlcnJvciIsImN1cnJlbnRTdGF0ZSIsIm1ha2VJdGVyYXRvciIsInRha2VFdmVyeSIsIndvcmtlciIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwieVRha2UiLCJ0YWtlIiwieUZvcmsiLCJhYyIsImZvcmsiLCJhcHBseSIsImNvbmNhdCIsImFjdGlvbiIsInNldEFjdGlvbiIsInExIiwicTIiLCJ0YWtlTGF0ZXN0IiwieUNhbmNlbCIsInRhc2siLCJjYW5jZWwiLCJzZXRUYXNrIiwidCIsInEzIiwidGFrZUxlYWRpbmciLCJ5Q2FsbCIsImNhbGwiLCJ0aHJvdHRsZSIsImRlbGF5TGVuZ3RoIiwicGF0dGVybiIsInlBY3Rpb25DaGFubmVsIiwiYWN0aW9uQ2hhbm5lbCIsInNsaWRpbmciLCJ5RGVsYXkiLCJkZWxheSIsInNldENoYW5uZWwiLCJjaCIsInE0IiwicmV0cnkiLCJtYXhUcmllcyIsImZuIiwiY291bnRlciIsInExMCIsImRlYm91bmNlSGVscGVyIiwicmFjZU91dHB1dCIsInlSYWNlIiwicmFjZSIsImRlYm91bmNlIiwieU5vb3AiLCJzZXRSYWNlT3V0cHV0Iiwicm8iLCJ2YWxpZGF0ZVRha2VFZmZlY3QiLCJjaGVjayIsIm5vdFVuZGVmIiwidGFrZUV2ZXJ5JDEiLCJ0YWtlTGF0ZXN0JDEiLCJfbGVuMiIsIl9rZXkyIiwidGFrZUxlYWRpbmckMSIsIl9sZW4zIiwiX2tleTMiLCJ0aHJvdHRsZSQxIiwibXMiLCJfbGVuNCIsIl9rZXk0IiwicmV0cnkkMSIsIl9sZW41IiwiX2tleTUiLCJfbGVuNiIsIl9rZXk2IiwiYWxsIiwiY2FuY2VsbGVkIiwiY3BzIiwiZWZmZWN0VHlwZXMiLCJmbHVzaCIsImdldENvbnRleHQiLCJqb2luIiwicHV0IiwicHV0UmVzb2x2ZSIsInNlbGVjdCIsInNldENvbnRleHQiLCJzcGF3biIsInRha2VNYXliZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBRUFDLE9BQU8sQ0FBQyxxQkFBRCxDQUFQOztBQUNBQSxPQUFPLENBQUMsZ0NBQUQsQ0FBUDs7QUFDQSxJQUFJQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxnQkFBRCxDQUFoQjs7QUFDQSxJQUFJRSxFQUFFLEdBQUdGLE9BQU8sQ0FBQyxrQkFBRCxDQUFoQjs7QUFDQUEsT0FBTyxDQUFDLHFCQUFELENBQVA7O0FBRUEsSUFBSUcsSUFBSSxHQUFHLFNBQVNBLElBQVQsQ0FBY0osS0FBZCxFQUFxQjtBQUM5QixTQUFPO0FBQ0xJLElBQUFBLElBQUksRUFBRSxJQUREO0FBRUxKLElBQUFBLEtBQUssRUFBRUE7QUFGRixHQUFQO0FBSUQsQ0FMRDs7QUFPQSxJQUFJSyxJQUFJLEdBQUcsRUFBWDs7QUFDQSxTQUFTQyxRQUFULENBQWtCQyxnQkFBbEIsRUFBb0M7QUFDbEMsTUFBSUwsRUFBRSxDQUFDTSxPQUFILENBQVdELGdCQUFYLENBQUosRUFBa0M7QUFDaEMsV0FBTyxTQUFQO0FBQ0Q7O0FBRUQsTUFBSUwsRUFBRSxDQUFDTyxjQUFILENBQWtCRixnQkFBbEIsQ0FBSixFQUF5QztBQUN2QyxXQUFPRyxNQUFNLENBQUNILGdCQUFELENBQWI7QUFDRDs7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bEYsT0FBTyxDQUFDNkMsVUFBUixHQUFxQnNDLFlBQXJCO0FBQ0FuRixPQUFPLENBQUNvRCxXQUFSLEdBQXNCa0MsYUFBdEI7QUFDQXRGLE9BQU8sQ0FBQ3VELFFBQVIsR0FBbUJrQyxVQUFuQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxucmVxdWlyZSgnQHJlZHV4LXNhZ2Evc3ltYm9scycpO1xucmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG52YXIgaXMgPSByZXF1aXJlKCdAcmVkdXgtc2FnYS9pcycpO1xudmFyIGlvID0gcmVxdWlyZSgnLi9pby0xZDZlY2NkYS5qcycpO1xucmVxdWlyZSgnQHJlZHV4LXNhZ2EvZGVsYXktcCcpO1xuXG52YXIgZG9uZSA9IGZ1bmN0aW9uIGRvbmUodmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBkb25lOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxudmFyIHFFbmQgPSB7fTtcbmZ1bmN0aW9uIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpIHtcbiAgaWYgKGlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gJ2NoYW5uZWwnO1xuICB9XG5cbiAgaWYgKGlzLnN0cmluZ2FibGVGdW5jKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsKTtcbiAgfVxuXG4gIGlmIChpcy5mdW5jKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIHBhdHRlcm5PckNoYW5uZWwubmFtZTtcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCk7XG59XG5mdW5jdGlvbiBmc21JdGVyYXRvcihmc20sIHN0YXJ0U3RhdGUsIG5hbWUpIHtcbiAgdmFyIHN0YXRlVXBkYXRlcixcbiAgICAgIGVycm9yU3RhdGUsXG4gICAgICBlZmZlY3QsXG4gICAgICBuZXh0U3RhdGUgPSBzdGFydFN0YXRlO1xuXG4gIGZ1bmN0aW9uIG5leHQoYXJnLCBlcnJvcikge1xuICAgIGlmIChuZXh0U3RhdGUgPT09IHFFbmQpIHtcbiAgICAgIHJldHVybiBkb25lKGFyZyk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yICYmICFlcnJvclN0YXRlKSB7XG4gICAgICBuZXh0U3RhdGUgPSBxRW5kO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlVXBkYXRlciAmJiBzdGF0ZVVwZGF0ZXIoYXJnKTtcbiAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBlcnJvciA/IGZzbVtlcnJvclN0YXRlXShlcnJvcikgOiBmc21bbmV4dFN0YXRlXSgpO1xuICAgICAgbmV4dFN0YXRlID0gY3VycmVudFN0YXRlLm5leHRTdGF0ZTtcbiAgICAgIGVmZmVjdCA9IGN1cnJlbnRTdGF0ZS5lZmZlY3Q7XG4gICAgICBzdGF0ZVVwZGF0ZXIgPSBjdXJyZW50U3RhdGUuc3RhdGVVcGRhdGVyO1xuICAgICAgZXJyb3JTdGF0ZSA9IGN1cnJlbnRTdGF0ZS5lcnJvclN0YXRlO1xuICAgICAgcmV0dXJuIG5leHRTdGF0ZSA9PT0gcUVuZCA/IGRvbmUoYXJnKSA6IGVmZmVjdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW8ubWFrZUl0ZXJhdG9yKG5leHQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJldHVybiBuZXh0KG51bGwsIGVycm9yKTtcbiAgfSwgbmFtZSk7XG59XG5cbmZ1bmN0aW9uIHRha2VFdmVyeShwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiBpby50YWtlKHBhdHRlcm5PckNoYW5uZWwpXG4gIH07XG5cbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogaW8uZm9yay5hcHBseSh2b2lkIDAsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb24sXG4gICAgICBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeVRha2UsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0QWN0aW9uXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTEnLFxuICAgICAgICBlZmZlY3Q6IHlGb3JrKGFjdGlvbilcbiAgICAgIH07XG4gICAgfVxuICB9LCAncTEnLCBcInRha2VFdmVyeShcIiArIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpICsgXCIsIFwiICsgd29ya2VyLm5hbWUgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIHRha2VMYXRlc3QocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogaW8udGFrZShwYXR0ZXJuT3JDaGFubmVsKVxuICB9O1xuXG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGlvLmZvcmsuYXBwbHkodm9pZCAwLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgeUNhbmNlbCA9IGZ1bmN0aW9uIHlDYW5jZWwodGFzaykge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBpby5jYW5jZWwodGFzaylcbiAgICB9O1xuICB9O1xuXG4gIHZhciB0YXNrLCBhY3Rpb247XG5cbiAgdmFyIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRUYXNrKHQpIHtcbiAgICByZXR1cm4gdGFzayA9IHQ7XG4gIH07XG5cbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5VGFrZSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRBY3Rpb25cbiAgICAgIH07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gdGFzayA/IHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTMnLFxuICAgICAgICBlZmZlY3Q6IHlDYW5jZWwodGFzaylcbiAgICAgIH0gOiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3ExJyxcbiAgICAgICAgZWZmZWN0OiB5Rm9yayhhY3Rpb24pLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldFRhc2tcbiAgICAgIH07XG4gICAgfSxcbiAgICBxMzogZnVuY3Rpb24gcTMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMScsXG4gICAgICAgIGVmZmVjdDogeUZvcmsoYWN0aW9uKSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRUYXNrXG4gICAgICB9O1xuICAgIH1cbiAgfSwgJ3ExJywgXCJ0YWtlTGF0ZXN0KFwiICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyBcIiwgXCIgKyB3b3JrZXIubmFtZSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gdGFrZUxlYWRpbmcocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogaW8udGFrZShwYXR0ZXJuT3JDaGFubmVsKVxuICB9O1xuXG4gIHZhciB5Q2FsbCA9IGZ1bmN0aW9uIHlDYWxsKGFjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGlvLmNhbGwuYXBwbHkodm9pZCAwLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgYWN0aW9uO1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeVRha2UsXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0QWN0aW9uXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTEnLFxuICAgICAgICBlZmZlY3Q6IHlDYWxsKGFjdGlvbilcbiAgICAgIH07XG4gICAgfVxuICB9LCAncTEnLCBcInRha2VMZWFkaW5nKFwiICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyBcIiwgXCIgKyB3b3JrZXIubmFtZSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gdGhyb3R0bGUoZGVsYXlMZW5ndGgsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgYWN0aW9uLCBjaGFubmVsO1xuICB2YXIgeUFjdGlvbkNoYW5uZWwgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IGlvLmFjdGlvbkNoYW5uZWwocGF0dGVybiwgaW8uc2xpZGluZygxKSlcbiAgfTtcblxuICB2YXIgeVRha2UgPSBmdW5jdGlvbiB5VGFrZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogaW8udGFrZShjaGFubmVsKVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICB2YWx1ZTogaW8uZm9yay5hcHBseSh2b2lkIDAsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciB5RGVsYXkgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IGlvLmRlbGF5KGRlbGF5TGVuZ3RoKVxuICB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgdmFyIHNldENoYW5uZWwgPSBmdW5jdGlvbiBzZXRDaGFubmVsKGNoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWwgPSBjaDtcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EyJyxcbiAgICAgICAgZWZmZWN0OiB5QWN0aW9uQ2hhbm5lbCxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRDaGFubmVsXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTMnLFxuICAgICAgICBlZmZlY3Q6IHlUYWtlKCksXG4gICAgICAgIHN0YXRlVXBkYXRlcjogc2V0QWN0aW9uXG4gICAgICB9O1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTQnLFxuICAgICAgICBlZmZlY3Q6IHlGb3JrKGFjdGlvbilcbiAgICAgIH07XG4gICAgfSxcbiAgICBxNDogZnVuY3Rpb24gcTQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeURlbGF5XG4gICAgICB9O1xuICAgIH1cbiAgfSwgJ3ExJywgXCJ0aHJvdHRsZShcIiArIHNhZmVOYW1lKHBhdHRlcm4pICsgXCIsIFwiICsgd29ya2VyLm5hbWUgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIHJldHJ5KG1heFRyaWVzLCBkZWxheUxlbmd0aCwgZm4pIHtcbiAgdmFyIGNvdW50ZXIgPSBtYXhUcmllcztcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeUNhbGwgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IGlvLmNhbGwuYXBwbHkodm9pZCAwLCBbZm5dLmNvbmNhdChhcmdzKSlcbiAgfTtcbiAgdmFyIHlEZWxheSA9IHtcbiAgICBkb25lOiBmYWxzZSxcbiAgICB2YWx1ZTogaW8uZGVsYXkoZGVsYXlMZW5ndGgpXG4gIH07XG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlDYWxsLFxuICAgICAgICBlcnJvclN0YXRlOiAncTEwJ1xuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogcUVuZFxuICAgICAgfTtcbiAgICB9LFxuICAgIHExMDogZnVuY3Rpb24gcTEwKGVycm9yKSB7XG4gICAgICBjb3VudGVyIC09IDE7XG5cbiAgICAgIGlmIChjb3VudGVyIDw9IDApIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3ExJyxcbiAgICAgICAgZWZmZWN0OiB5RGVsYXlcbiAgICAgIH07XG4gICAgfVxuICB9LCAncTEnLCBcInJldHJ5KFwiICsgZm4ubmFtZSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gZGVib3VuY2VIZWxwZXIoZGVsYXlMZW5ndGgsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgYWN0aW9uLCByYWNlT3V0cHV0O1xuICB2YXIgeVRha2UgPSB7XG4gICAgZG9uZTogZmFsc2UsXG4gICAgdmFsdWU6IGlvLnRha2UocGF0dGVybk9yQ2hhbm5lbClcbiAgfTtcbiAgdmFyIHlSYWNlID0ge1xuICAgIGRvbmU6IGZhbHNlLFxuICAgIHZhbHVlOiBpby5yYWNlKHtcbiAgICAgIGFjdGlvbjogaW8udGFrZShwYXR0ZXJuT3JDaGFubmVsKSxcbiAgICAgIGRlYm91bmNlOiBpby5kZWxheShkZWxheUxlbmd0aClcbiAgICB9KVxuICB9O1xuXG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGlvLmZvcmsuYXBwbHkodm9pZCAwLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgeU5vb3AgPSBmdW5jdGlvbiB5Tm9vcCh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICB2YXIgc2V0UmFjZU91dHB1dCA9IGZ1bmN0aW9uIHNldFJhY2VPdXRwdXQocm8pIHtcbiAgICByZXR1cm4gcmFjZU91dHB1dCA9IHJvO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dFN0YXRlOiAncTInLFxuICAgICAgICBlZmZlY3Q6IHlUYWtlLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3EzJyxcbiAgICAgICAgZWZmZWN0OiB5UmFjZSxcbiAgICAgICAgc3RhdGVVcGRhdGVyOiBzZXRSYWNlT3V0cHV0XG4gICAgICB9O1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIHJhY2VPdXRwdXQuZGVib3VuY2UgPyB7XG4gICAgICAgIG5leHRTdGF0ZTogJ3ExJyxcbiAgICAgICAgZWZmZWN0OiB5Rm9yayhhY3Rpb24pXG4gICAgICB9IDoge1xuICAgICAgICBuZXh0U3RhdGU6ICdxMicsXG4gICAgICAgIGVmZmVjdDogeU5vb3AocmFjZU91dHB1dC5hY3Rpb24pLFxuICAgICAgICBzdGF0ZVVwZGF0ZXI6IHNldEFjdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sICdxMScsIFwiZGVib3VuY2UoXCIgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArIFwiLCBcIiArIHdvcmtlci5uYW1lICsgXCIpXCIpO1xufVxuXG52YXIgdmFsaWRhdGVUYWtlRWZmZWN0ID0gZnVuY3Rpb24gdmFsaWRhdGVUYWtlRWZmZWN0KGZuLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgaW8uY2hlY2socGF0dGVybk9yQ2hhbm5lbCwgaXMubm90VW5kZWYsIGZuLm5hbWUgKyBcIiByZXF1aXJlcyBhIHBhdHRlcm4gb3IgY2hhbm5lbFwiKTtcbiAgaW8uY2hlY2sod29ya2VyLCBpcy5ub3RVbmRlZiwgZm4ubmFtZSArIFwiIHJlcXVpcmVzIGEgc2FnYSBwYXJhbWV0ZXJcIik7XG59O1xuXG5mdW5jdGlvbiB0YWtlRXZlcnkkMShwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAge1xuICAgIHZhbGlkYXRlVGFrZUVmZmVjdCh0YWtlRXZlcnkkMSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBpby5mb3JrLmFwcGx5KHZvaWQgMCwgW3Rha2VFdmVyeSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuZnVuY3Rpb24gdGFrZUxhdGVzdCQxKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICB7XG4gICAgdmFsaWRhdGVUYWtlRWZmZWN0KHRha2VMYXRlc3QkMSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBpby5mb3JrLmFwcGx5KHZvaWQgMCwgW3Rha2VMYXRlc3QsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cbmZ1bmN0aW9uIHRha2VMZWFkaW5nJDEocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIHtcbiAgICB2YWxpZGF0ZVRha2VFZmZlY3QodGFrZUxlYWRpbmckMSwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDIgPyBfbGVuMyAtIDIgOiAwKSwgX2tleTMgPSAyOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiBpby5mb3JrLmFwcGx5KHZvaWQgMCwgW3Rha2VMZWFkaW5nLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5mdW5jdGlvbiB0aHJvdHRsZSQxKG1zLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAge1xuICAgIGlvLmNoZWNrKHBhdHRlcm4sIGlzLm5vdFVuZGVmLCAndGhyb3R0bGUgcmVxdWlyZXMgYSBwYXR0ZXJuJyk7XG4gICAgaW8uY2hlY2sod29ya2VyLCBpcy5ub3RVbmRlZiwgJ3Rocm90dGxlIHJlcXVpcmVzIGEgc2FnYSBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCA+IDMgPyBfbGVuNCAtIDMgOiAwKSwgX2tleTQgPSAzOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgYXJnc1tfa2V5NCAtIDNdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIHJldHVybiBpby5mb3JrLmFwcGx5KHZvaWQgMCwgW3Rocm90dGxlLCBtcywgcGF0dGVybiwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuZnVuY3Rpb24gcmV0cnkkMShtYXhUcmllcywgZGVsYXlMZW5ndGgsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUgPiAzID8gX2xlbjUgLSAzIDogMCksIF9rZXk1ID0gMzsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTUgLSAzXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICByZXR1cm4gaW8uY2FsbC5hcHBseSh2b2lkIDAsIFtyZXRyeSwgbWF4VHJpZXMsIGRlbGF5TGVuZ3RoLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5mdW5jdGlvbiBkZWJvdW5jZShkZWxheUxlbmd0aCwgcGF0dGVybiwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiA+IDMgPyBfbGVuNiAtIDMgOiAwKSwgX2tleTYgPSAzOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5NiAtIDNdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIHJldHVybiBpby5mb3JrLmFwcGx5KHZvaWQgMCwgW2RlYm91bmNlSGVscGVyLCBkZWxheUxlbmd0aCwgcGF0dGVybiwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG5leHBvcnRzLmFjdGlvbkNoYW5uZWwgPSBpby5hY3Rpb25DaGFubmVsO1xuZXhwb3J0cy5hbGwgPSBpby5hbGw7XG5leHBvcnRzLmFwcGx5ID0gaW8uYXBwbHk7XG5leHBvcnRzLmNhbGwgPSBpby5jYWxsO1xuZXhwb3J0cy5jYW5jZWwgPSBpby5jYW5jZWw7XG5leHBvcnRzLmNhbmNlbGxlZCA9IGlvLmNhbmNlbGxlZDtcbmV4cG9ydHMuY3BzID0gaW8uY3BzO1xuZXhwb3J0cy5kZWxheSA9IGlvLmRlbGF5O1xuZXhwb3J0cy5lZmZlY3RUeXBlcyA9IGlvLmVmZmVjdFR5cGVzO1xuZXhwb3J0cy5mbHVzaCA9IGlvLmZsdXNoO1xuZXhwb3J0cy5mb3JrID0gaW8uZm9yaztcbmV4cG9ydHMuZ2V0Q29udGV4dCA9IGlvLmdldENvbnRleHQ7XG5leHBvcnRzLmpvaW4gPSBpby5qb2luO1xuZXhwb3J0cy5wdXQgPSBpby5wdXQ7XG5leHBvcnRzLnB1dFJlc29sdmUgPSBpby5wdXRSZXNvbHZlO1xuZXhwb3J0cy5yYWNlID0gaW8ucmFjZTtcbmV4cG9ydHMuc2VsZWN0ID0gaW8uc2VsZWN0O1xuZXhwb3J0cy5zZXRDb250ZXh0ID0gaW8uc2V0Q29udGV4dDtcbmV4cG9ydHMuc3Bhd24gPSBpby5zcGF3bjtcbmV4cG9ydHMudGFrZSA9IGlvLnRha2U7XG5leHBvcnRzLnRha2VNYXliZSA9IGlvLnRha2VNYXliZTtcbmV4cG9ydHMuZGVib3VuY2UgPSBkZWJvdW5jZTtcbmV4cG9ydHMucmV0cnkgPSByZXRyeSQxO1xuZXhwb3J0cy50YWtlRXZlcnkgPSB0YWtlRXZlcnkkMTtcbmV4cG9ydHMudGFrZUxhdGVzdCA9IHRha2VMYXRlc3QkMTtcbmV4cG9ydHMudGFrZUxlYWRpbmcgPSB0YWtlTGVhZGluZyQxO1xuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlJDE7XG4iXX0=