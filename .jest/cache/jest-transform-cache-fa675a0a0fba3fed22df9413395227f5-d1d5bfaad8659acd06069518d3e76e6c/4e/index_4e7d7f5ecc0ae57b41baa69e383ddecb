4ccde1e6ad75c8916fc67dfd058256f1
'use strict';function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}

var _ansiStyles = _interopRequireDefault(require('ansi-styles'));



var _AsymmetricMatcher = _interopRequireDefault(
require('./plugins/AsymmetricMatcher'));


var _ConvertAnsi = _interopRequireDefault(require('./plugins/ConvertAnsi'));

var _DOMCollection = _interopRequireDefault(require('./plugins/DOMCollection'));

var _DOMElement = _interopRequireDefault(require('./plugins/DOMElement'));

var _Immutable = _interopRequireDefault(require('./plugins/Immutable'));

var _ReactElement = _interopRequireDefault(require('./plugins/ReactElement'));

var _ReactTestComponent = _interopRequireDefault(
require('./plugins/ReactTestComponent'));


function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}









var toString = Object.prototype.toString;
var toISOString = Date.prototype.toISOString;
var errorToString = Error.prototype.toString;
var regExpToString = RegExp.prototype.toString;





var getConstructorName = function getConstructorName(val) {return (
    typeof val.constructor === 'function' && val.constructor.name || 'Object');};




var isWindow = function isWindow(val) {return typeof window !== 'undefined' && val === window;};

var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
var NEWLINE_REGEXP = /\n/gi;var

PrettyFormatPluginError = function (_Error) {require("@babel/runtime/helpers/inherits")(PrettyFormatPluginError, _Error);var _super = _createSuper(PrettyFormatPluginError);
  function PrettyFormatPluginError(message, stack) {var _this;require("@babel/runtime/helpers/classCallCheck")(this, PrettyFormatPluginError);
    _this = _super.call(this, message);
    _this.stack = stack;
    _this.name = _this.constructor.name;return _this;
  }return PrettyFormatPluginError;}(require("@babel/runtime/helpers/wrapNativeSuper")(Error));


function isToStringedArrayType(toStringed) {
  return (
    toStringed === '[object Array]' ||
    toStringed === '[object ArrayBuffer]' ||
    toStringed === '[object DataView]' ||
    toStringed === '[object Float32Array]' ||
    toStringed === '[object Float64Array]' ||
    toStringed === '[object Int8Array]' ||
    toStringed === '[object Int16Array]' ||
    toStringed === '[object Int32Array]' ||
    toStringed === '[object Uint8Array]' ||
    toStringed === '[object Uint8ClampedArray]' ||
    toStringed === '[object Uint16Array]' ||
    toStringed === '[object Uint32Array]');

}

function printNumber(val) {
  return Object.is(val, -0) ? '-0' : String(val);
}

function printBigInt(val) {
  return String(val + "n");
}

function printFunction(val, printFunctionName) {
  if (!printFunctionName) {
    return '[Function]';
  }

  return '[Function ' + (val.name || 'anonymous') + ']';
}

function printSymbol(val) {
  return String(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
}

function printError(val) {
  return '[' + errorToString.call(val) + ']';
}





function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
  if (val === true || val === false) {
    return '' + val;
  }

  if (val === undefined) {
    return 'undefined';
  }

  if (val === null) {
    return 'null';
  }

  var typeOf = typeof val;

  if (typeOf === 'number') {
    return printNumber(val);
  }

  if (typeOf === 'bigint') {
    return printBigInt(val);
  }

  if (typeOf === 'string') {
    if (escapeString) {
      return '"' + val.replace(/"|\\/g, '\\$&') + '"';
    }

    return '"' + val + '"';
  }

  if (typeOf === 'function') {
    return printFunction(val, printFunctionName);
  }

  if (typeOf === 'symbol') {
    return printSymbol(val);
  }

  var toStringed = toString.call(val);

  if (toStringed === '[object WeakMap]') {
    return 'WeakMap {}';
  }

  if (toStringed === '[object WeakSet]') {
    return 'WeakSet {}';
  }

  if (
  toStringed === '[object Function]' ||
  toStringed === '[object GeneratorFunction]')
  {
    return printFunction(val, printFunctionName);
  }

  if (toStringed === '[object Symbol]') {
    return printSymbol(val);
  }

  if (toStringed === '[object Date]') {
    return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);
  }

  if (toStringed === '[object Error]') {
    return printError(val);
  }

  if (toStringed === '[object RegExp]') {
    if (escapeRegex) {

      return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    return regExpToString.call(val);
  }

  if (val instanceof Error) {
    return printError(val);
  }

  return null;
}





function printComplexValue(
val,
config,
indentation,
depth,
refs,
hasCalledToJSON)
{
  if (refs.indexOf(val) !== -1) {
    return '[Circular]';
  }

  refs = refs.slice();
  refs.push(val);
  var hitMaxDepth = ++depth > config.maxDepth;
  var min = config.min;

  if (
  config.callToJSON &&
  !hitMaxDepth &&
  val.toJSON &&
  typeof val.toJSON === 'function' &&
  !hasCalledToJSON)
  {
    return printer(val.toJSON(), config, indentation, depth, refs, true);
  }

  var toStringed = toString.call(val);

  if (toStringed === '[object Arguments]') {
    return hitMaxDepth ?
    '[Arguments]' :
    (min ? '' : 'Arguments ') +
    '[' +
    (0, require('./collections').printListItems)(
    val,
    config,
    indentation,
    depth,
    refs,
    printer) +

    ']';
  }

  if (isToStringedArrayType(toStringed)) {
    return hitMaxDepth ?
    '[' + val.constructor.name + ']' :
    (min ? '' : val.constructor.name + ' ') +
    '[' +
    (0, require('./collections').printListItems)(
    val,
    config,
    indentation,
    depth,
    refs,
    printer) +

    ']';
  }

  if (toStringed === '[object Map]') {
    return hitMaxDepth ?
    '[Map]' :
    'Map {' +
    (0, require('./collections').printIteratorEntries)(
    val.entries(),
    config,
    indentation,
    depth,
    refs,
    printer,
    ' => ') +

    '}';
  }

  if (toStringed === '[object Set]') {
    return hitMaxDepth ?
    '[Set]' :
    'Set {' +
    (0, require('./collections').printIteratorValues)(
    val.values(),
    config,
    indentation,
    depth,
    refs,
    printer) +

    '}';
  }


  return hitMaxDepth || isWindow(val) ?
  '[' + getConstructorName(val) + ']' :
  (min ? '' : getConstructorName(val) + ' ') +
  '{' +
  (0, require('./collections').printObjectProperties)(
  val,
  config,
  indentation,
  depth,
  refs,
  printer) +

  '}';
}

function isNewPlugin(plugin) {
  return plugin.serialize != null;
}

function printPlugin(plugin, val, config, indentation, depth, refs) {
  var printed;

  try {
    printed = isNewPlugin(plugin) ?
    plugin.serialize(val, config, indentation, depth, refs, printer) :
    plugin.print(
    val,
    function (valChild) {return printer(valChild, config, indentation, depth, refs);},
    function (str) {
      var indentationNext = indentation + config.indent;
      return (
        indentationNext +
        str.replace(NEWLINE_REGEXP, '\n' + indentationNext));

    },
    {
      edgeSpacing: config.spacingOuter,
      min: config.min,
      spacing: config.spacingInner },

    config.colors);

  } catch (error) {
    throw new PrettyFormatPluginError(error.message, error.stack);
  }

  if (typeof printed !== 'string') {
    throw new Error("pretty-format: Plugin must return type \"string\" but instead returned \"" +
    typeof printed + "\".");

  }

  return printed;
}

function findPlugin(plugins, val) {
  for (var p = 0; p < plugins.length; p++) {
    try {
      if (plugins[p].test(val)) {
        return plugins[p];
      }
    } catch (error) {
      throw new PrettyFormatPluginError(error.message, error.stack);
    }
  }

  return null;
}

function printer(val, config, indentation, depth, refs, hasCalledToJSON) {
  var plugin = findPlugin(config.plugins, val);

  if (plugin !== null) {
    return printPlugin(plugin, val, config, indentation, depth, refs);
  }

  var basicResult = printBasicValue(
  val,
  config.printFunctionName,
  config.escapeRegex,
  config.escapeString);


  if (basicResult !== null) {
    return basicResult;
  }

  return printComplexValue(
  val,
  config,
  indentation,
  depth,
  refs,
  hasCalledToJSON);

}

var DEFAULT_THEME = {
  comment: 'gray',
  content: 'reset',
  prop: 'yellow',
  tag: 'cyan',
  value: 'green' };

var DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
var DEFAULT_OPTIONS = {
  callToJSON: true,
  escapeRegex: false,
  escapeString: true,
  highlight: false,
  indent: 2,
  maxDepth: Infinity,
  min: false,
  plugins: [],
  printFunctionName: true,
  theme: DEFAULT_THEME };


function validateOptions(options) {
  Object.keys(options).forEach(function (key) {
    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
      throw new Error("pretty-format: Unknown option \"" + key + "\".");
    }
  });

  if (options.min && options.indent !== undefined && options.indent !== 0) {
    throw new Error(
    'pretty-format: Options "min" and "indent" cannot be used together.');

  }

  if (options.theme !== undefined) {
    if (options.theme === null) {
      throw new Error("pretty-format: Option \"theme\" must not be null.");
    }

    if (typeof options.theme !== 'object') {
      throw new Error("pretty-format: Option \"theme\" must be of type \"object\" but instead received \"" +
      typeof options.theme + "\".");

    }
  }
}

var getColorsHighlight = function getColorsHighlight(options) {return (
    DEFAULT_THEME_KEYS.reduce(function (colors, key) {
      var value =
      options.theme && options.theme[key] !== undefined ?
      options.theme[key] :
      DEFAULT_THEME[key];
      var color = value && _ansiStyles.default[value];

      if (
      color &&
      typeof color.close === 'string' &&
      typeof color.open === 'string')
      {
        colors[key] = color;
      } else {
        throw new Error("pretty-format: Option \"theme\" has a key \"" +
        key + "\" whose value \"" + value + "\" is undefined in ansi-styles.");

      }

      return colors;
    }, Object.create(null)));};

var getColorsEmpty = function getColorsEmpty() {return (
    DEFAULT_THEME_KEYS.reduce(function (colors, key) {
      colors[key] = {
        close: '',
        open: '' };

      return colors;
    }, Object.create(null)));};

var getPrintFunctionName = function getPrintFunctionName(options) {return (
    options && options.printFunctionName !== undefined ?
    options.printFunctionName :
    DEFAULT_OPTIONS.printFunctionName);};

var getEscapeRegex = function getEscapeRegex(options) {return (
    options && options.escapeRegex !== undefined ?
    options.escapeRegex :
    DEFAULT_OPTIONS.escapeRegex);};

var getEscapeString = function getEscapeString(options) {return (
    options && options.escapeString !== undefined ?
    options.escapeString :
    DEFAULT_OPTIONS.escapeString);};

var getConfig = function getConfig(options) {return {
    callToJSON:
    options && options.callToJSON !== undefined ?
    options.callToJSON :
    DEFAULT_OPTIONS.callToJSON,
    colors:
    options && options.highlight ?
    getColorsHighlight(options) :
    getColorsEmpty(),
    escapeRegex: getEscapeRegex(options),
    escapeString: getEscapeString(options),
    indent:
    options && options.min ?
    '' :
    createIndent(
    options && options.indent !== undefined ?
    options.indent :
    DEFAULT_OPTIONS.indent),

    maxDepth:
    options && options.maxDepth !== undefined ?
    options.maxDepth :
    DEFAULT_OPTIONS.maxDepth,
    min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
    plugins:
    options && options.plugins !== undefined ?
    options.plugins :
    DEFAULT_OPTIONS.plugins,
    printFunctionName: getPrintFunctionName(options),
    spacingInner: options && options.min ? ' ' : '\n',
    spacingOuter: options && options.min ? '' : '\n' };};


function createIndent(indent) {
  return new Array(indent + 1).join(' ');
}






function prettyFormat(val, options) {
  if (options) {
    validateOptions(options);

    if (options.plugins) {
      var plugin = findPlugin(options.plugins, val);

      if (plugin !== null) {
        return printPlugin(plugin, val, getConfig(options), '', 0, []);
      }
    }
  }

  var basicResult = printBasicValue(
  val,
  getPrintFunctionName(options),
  getEscapeRegex(options),
  getEscapeString(options));


  if (basicResult !== null) {
    return basicResult;
  }

  return printComplexValue(val, getConfig(options), '', 0, []);
}

prettyFormat.plugins = {
  AsymmetricMatcher: _AsymmetricMatcher.default,
  ConvertAnsi: _ConvertAnsi.default,
  DOMCollection: _DOMCollection.default,
  DOMElement: _DOMElement.default,
  Immutable: _Immutable.default,
  ReactElement: _ReactElement.default,
  ReactTestComponent: _ReactTestComponent.default };

module.exports = prettyFormat;