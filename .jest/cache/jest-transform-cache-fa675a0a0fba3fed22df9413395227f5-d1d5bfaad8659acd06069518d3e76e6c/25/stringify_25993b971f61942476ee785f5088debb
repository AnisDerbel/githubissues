3ceb50cae0a0d0de986df9c6889df0d5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = stringify;

var _circularJsonEs = _interopRequireDefault(require("circular-json-es6"));

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function stringifySingle(key, value) {
  var stringifyingValue = value;
  var skipCircularCheck = false;

  if (Array.isArray(value)) {
    var values = value.map(function (v) {
      return stringifySingle('', v)[1];
    });
    skipCircularCheck = true;
    var joined = values.join(' ');

    var initialBracket = _colors.default.gray('[');

    var endingBracket = _colors.default.gray(']');

    if (joined.length > 20) {
      var pad = '\n  ';
      joined = values.join(pad) + "\n";
      initialBracket += pad;
    }

    stringifyingValue = _colors.default.gray("" + initialBracket + joined + endingBracket);
  } else if (value === null) {
    stringifyingValue = _colors.default.gray(value);
  } else if (typeof value === 'object') {
    stringifyingValue = _colors.default.gray(_circularJsonEs.default.stringify(value));
  } else if (typeof value === 'string') {
    stringifyingValue = _colors.default.gray("\"" + value + "\"");
  } else if (typeof value === 'number') {
    stringifyingValue = _colors.default.blue(value);
  } else if (value) {
    stringifyingValue = _colors.default.green(value);
  } else if (!value) {
    stringifyingValue = _colors.default.red(value);
  }

  try {
    if (!skipCircularCheck) {
      JSON.stringify((0, _defineProperty2.default)({}, key, value));
    }

    return [key, stringifyingValue];
  } catch (e) {
    return [key, _colors.default.gray('[Circular]')];
  }
}

function color(_ref) {
  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      key = _ref2[0],
      value = _ref2[1];

  return "" + _colors.default.yellow(key) + _colors.default.gray(':') + " " + _colors.default.yellow(value);
}

function stringify(object) {
  var keys = Object.keys(object);
  return keys.map(function (key) {
    return color(stringifySingle(key, object[key]));
  }).join('\n');
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ2lmeS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJzdHJpbmdpZnkiLCJfY2lyY3VsYXJKc29uRXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb2xvcnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwic3RyaW5naWZ5U2luZ2xlIiwia2V5Iiwic3RyaW5naWZ5aW5nVmFsdWUiLCJza2lwQ2lyY3VsYXJDaGVjayIsIkFycmF5IiwiaXNBcnJheSIsInZhbHVlcyIsIm1hcCIsInYiLCJqb2luZWQiLCJqb2luIiwiaW5pdGlhbEJyYWNrZXQiLCJncmF5IiwiZW5kaW5nQnJhY2tldCIsImxlbmd0aCIsInBhZCIsImJsdWUiLCJncmVlbiIsInJlZCIsIkpTT04iLCJlIiwiY29sb3IiLCJ5ZWxsb3ciLCJvYmplY3QiLCJrZXlzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsU0FBbEI7O0FBRUEsSUFBSUMsZUFBZSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG1CQUFELENBQVIsQ0FBNUM7O0FBRUEsSUFBSUMsT0FBTyxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFVBQUQsQ0FBUixDQUFwQzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRU4sSUFBQUEsT0FBTyxFQUFFTTtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRixTQUFTRSxlQUFULENBQXlCQyxHQUF6QixFQUE4QlYsS0FBOUIsRUFBcUM7QUFDbkMsTUFBSVcsaUJBQWlCLEdBQUdYLEtBQXhCO0FBQ0EsTUFBSVksaUJBQWlCLEdBQUcsS0FBeEI7O0FBRUEsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNkLEtBQWQsQ0FBSixFQUEwQjtBQUN4QixRQUFNZSxNQUFNLEdBQUdmLEtBQUssQ0FBQ2dCLEdBQU4sQ0FBVSxVQUFBQyxDQUFDO0FBQUEsYUFBSVIsZUFBZSxDQUFDLEVBQUQsRUFBS1EsQ0FBTCxDQUFmLENBQXVCLENBQXZCLENBQUo7QUFBQSxLQUFYLENBQWY7QUFFQUwsSUFBQUEsaUJBQWlCLEdBQUcsSUFBcEI7QUFDQSxRQUFJTSxNQUFNLEdBQUdILE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLEdBQVosQ0FBYjs7QUFFQSxRQUFJQyxjQUFjLEdBQUdkLE9BQU8sQ0FBQ0wsT0FBUixDQUFnQm9CLElBQWhCLENBQXFCLEdBQXJCLENBQXJCOztBQUVBLFFBQU1DLGFBQWEsR0FBR2hCLE9BQU8sQ0FBQ0wsT0FBUixDQUFnQm9CLElBQWhCLENBQXFCLEdBQXJCLENBQXRCOztBQUVBLFFBQUlILE1BQU0sQ0FBQ0ssTUFBUCxHQUFnQixFQUFwQixFQUF3QjtBQUN0QixVQUFNQyxHQUFHLEdBQUcsTUFBWjtBQUNBTixNQUFBQSxNQUFNLEdBQU1ILE1BQU0sQ0FBQ0ksSUFBUCxDQUFZSyxHQUFaLENBQU4sT0FBTjtBQUNBSixNQUFBQSxjQUFjLElBQUlJLEdBQWxCO0FBQ0Q7O0FBRURiLElBQUFBLGlCQUFpQixHQUFHTCxPQUFPLENBQUNMLE9BQVIsQ0FBZ0JvQixJQUFoQixNQUF3QkQsY0FBeEIsR0FBeUNGLE1BQXpDLEdBQWtESSxhQUFsRCxDQUFwQjtBQUNELEdBakJELE1BaUJPLElBQUl0QixLQUFLLEtBQUssSUFBZCxFQUFvQjtBQUN6QlcsSUFBQUEsaUJBQWlCLEdBQUdMLE9BQU8sQ0FBQ0wsT0FBUixDQUFnQm9CLElBQWhCLENBQXFCckIsS0FBckIsQ0FBcEI7QUFDRCxHQUZNLE1BRUEsSUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQ3BDVyxJQUFBQSxpQkFBaUIsR0FBR0wsT0FBTyxDQUFDTCxPQUFSLENBQWdCb0IsSUFBaEIsQ0FBcUJsQixlQUFlLENBQUNGLE9BQWhCLENBQXdCQyxTQUF4QixDQUFrQ0YsS0FBbEMsQ0FBckIsQ0FBcEI7QUFDRCxHQUZNLE1BRUEsSUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQ3BDVyxJQUFBQSxpQkFBaUIsR0FBR0wsT0FBTyxDQUFDTCxPQUFSLENBQWdCb0IsSUFBaEIsUUFBeUJyQixLQUF6QixRQUFwQjtBQUNELEdBRk0sTUFFQSxJQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDcENXLElBQUFBLGlCQUFpQixHQUFHTCxPQUFPLENBQUNMLE9BQVIsQ0FBZ0J3QixJQUFoQixDQUFxQnpCLEtBQXJCLENBQXBCO0FBQ0QsR0FGTSxNQUVBLElBQUlBLEtBQUosRUFBVztBQUNoQlcsSUFBQUEsaUJBQWlCLEdBQUdMLE9BQU8sQ0FBQ0wsT0FBUixDQUFnQnlCLEtBQWhCLENBQXNCMUIsS0FBdEIsQ0FBcEI7QUFDRCxHQUZNLE1BRUEsSUFBSSxDQUFDQSxLQUFMLEVBQVk7QUFDakJXLElBQUFBLGlCQUFpQixHQUFHTCxPQUFPLENBQUNMLE9BQVIsQ0FBZ0IwQixHQUFoQixDQUFvQjNCLEtBQXBCLENBQXBCO0FBQ0Q7O0FBRUQsTUFBSTtBQUVGLFFBQUksQ0FBQ1ksaUJBQUwsRUFBd0I7QUFDdEJnQixNQUFBQSxJQUFJLENBQUMxQixTQUFMLG1DQUNHUSxHQURILEVBQ1NWLEtBRFQ7QUFHRDs7QUFFRCxXQUFPLENBQUNVLEdBQUQsRUFBTUMsaUJBQU4sQ0FBUDtBQUNELEdBVEQsQ0FTRSxPQUFPa0IsQ0FBUCxFQUFVO0FBQ1YsV0FBTyxDQUFDbkIsR0FBRCxFQUFNSixPQUFPLENBQUNMLE9BQVIsQ0FBZ0JvQixJQUFoQixDQUFxQixZQUFyQixDQUFOLENBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNTLEtBQVQsT0FBNkI7QUFBQTtBQUFBLE1BQWJwQixHQUFhO0FBQUEsTUFBUlYsS0FBUTs7QUFDM0IsY0FBVU0sT0FBTyxDQUFDTCxPQUFSLENBQWdCOEIsTUFBaEIsQ0FBdUJyQixHQUF2QixDQUFWLEdBQXdDSixPQUFPLENBQUNMLE9BQVIsQ0FBZ0JvQixJQUFoQixDQUFxQixHQUFyQixDQUF4QyxTQUFxRWYsT0FBTyxDQUFDTCxPQUFSLENBQWdCOEIsTUFBaEIsQ0FBdUIvQixLQUF2QixDQUFyRTtBQUNEOztBQUVELFNBQVNFLFNBQVQsQ0FBbUI4QixNQUFuQixFQUEyQjtBQUN6QixNQUFNQyxJQUFJLEdBQUdwQyxNQUFNLENBQUNvQyxJQUFQLENBQVlELE1BQVosQ0FBYjtBQUNBLFNBQU9DLElBQUksQ0FBQ2pCLEdBQUwsQ0FBUyxVQUFBTixHQUFHO0FBQUEsV0FBSW9CLEtBQUssQ0FBQ3JCLGVBQWUsQ0FBQ0MsR0FBRCxFQUFNc0IsTUFBTSxDQUFDdEIsR0FBRCxDQUFaLENBQWhCLENBQVQ7QUFBQSxHQUFaLEVBQTBEUyxJQUExRCxDQUErRCxJQUEvRCxDQUFQO0FBQ0Q7O0FBRURlLE1BQU0sQ0FBQ25DLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0cmluZ2lmeTtcblxudmFyIF9jaXJjdWxhckpzb25FcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNpcmN1bGFyLWpzb24tZXM2XCIpKTtcblxudmFyIF9jb2xvcnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbG9yc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNpbmdsZShrZXksIHZhbHVlKSB7XG4gIGxldCBzdHJpbmdpZnlpbmdWYWx1ZSA9IHZhbHVlO1xuICBsZXQgc2tpcENpcmN1bGFyQ2hlY2sgPSBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB2YWx1ZS5tYXAodiA9PiBzdHJpbmdpZnlTaW5nbGUoJycsIHYpWzFdKTsgLy8gU2tpcCBjaXJjdWxhciBjaGVjayBiZWNhdXNlIHdlIGhhdmUgYWxyZWFkeSBzYWZlbHkgZGVhbHQgd2l0aCBpdCBhYm92ZVxuXG4gICAgc2tpcENpcmN1bGFyQ2hlY2sgPSB0cnVlO1xuICAgIGxldCBqb2luZWQgPSB2YWx1ZXMuam9pbignICcpO1xuXG4gICAgbGV0IGluaXRpYWxCcmFja2V0ID0gX2NvbG9ycy5kZWZhdWx0LmdyYXkoJ1snKTtcblxuICAgIGNvbnN0IGVuZGluZ0JyYWNrZXQgPSBfY29sb3JzLmRlZmF1bHQuZ3JheSgnXScpO1xuXG4gICAgaWYgKGpvaW5lZC5sZW5ndGggPiAyMCkge1xuICAgICAgY29uc3QgcGFkID0gJ1xcbiAgJztcbiAgICAgIGpvaW5lZCA9IGAke3ZhbHVlcy5qb2luKHBhZCl9XFxuYDtcbiAgICAgIGluaXRpYWxCcmFja2V0ICs9IHBhZDtcbiAgICB9XG5cbiAgICBzdHJpbmdpZnlpbmdWYWx1ZSA9IF9jb2xvcnMuZGVmYXVsdC5ncmF5KGAke2luaXRpYWxCcmFja2V0fSR7am9pbmVkfSR7ZW5kaW5nQnJhY2tldH1gKTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHN0cmluZ2lmeWluZ1ZhbHVlID0gX2NvbG9ycy5kZWZhdWx0LmdyYXkodmFsdWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBzdHJpbmdpZnlpbmdWYWx1ZSA9IF9jb2xvcnMuZGVmYXVsdC5ncmF5KF9jaXJjdWxhckpzb25Fcy5kZWZhdWx0LnN0cmluZ2lmeSh2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmdpZnlpbmdWYWx1ZSA9IF9jb2xvcnMuZGVmYXVsdC5ncmF5KGBcIiR7dmFsdWV9XCJgKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgc3RyaW5naWZ5aW5nVmFsdWUgPSBfY29sb3JzLmRlZmF1bHQuYmx1ZSh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICBzdHJpbmdpZnlpbmdWYWx1ZSA9IF9jb2xvcnMuZGVmYXVsdC5ncmVlbih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoIXZhbHVlKSB7XG4gICAgc3RyaW5naWZ5aW5nVmFsdWUgPSBfY29sb3JzLmRlZmF1bHQucmVkKHZhbHVlKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gY2lyY3VsYXIgaWYgeW91IGNhbnQgc3RyaW5naWZ5XG4gICAgaWYgKCFza2lwQ2lyY3VsYXJDaGVjaykge1xuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBba2V5XTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBba2V5LCBzdHJpbmdpZnlpbmdWYWx1ZV07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW2tleSwgX2NvbG9ycy5kZWZhdWx0LmdyYXkoJ1tDaXJjdWxhcl0nKV07XG4gIH1cbn1cblxuZnVuY3Rpb24gY29sb3IoW2tleSwgdmFsdWVdKSB7XG4gIHJldHVybiBgJHtfY29sb3JzLmRlZmF1bHQueWVsbG93KGtleSl9JHtfY29sb3JzLmRlZmF1bHQuZ3JheSgnOicpfSAke19jb2xvcnMuZGVmYXVsdC55ZWxsb3codmFsdWUpfWA7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmplY3QpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIHJldHVybiBrZXlzLm1hcChrZXkgPT4gY29sb3Ioc3RyaW5naWZ5U2luZ2xlKGtleSwgb2JqZWN0W2tleV0pKSkuam9pbignXFxuJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==