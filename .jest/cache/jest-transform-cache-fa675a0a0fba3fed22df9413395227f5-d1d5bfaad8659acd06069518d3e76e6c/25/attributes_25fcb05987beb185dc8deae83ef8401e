924b6f0a17c6dd5cffdd4b3d8bea9c2d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var text = require('../static').text;

var utils = require('../utils');

var isTag = utils.isTag;
var domEach = utils.domEach;
var hasOwn = Object.prototype.hasOwnProperty;
var camelCase = utils.camelCase;
var cssCase = utils.cssCase;
var rspace = /\s+/;
var dataAttrPrefix = 'data-';
var primitives = {
  null: null,
  true: true,
  false: false
};
var rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;

var getAttr = function getAttr(elem, name) {
  if (!elem || !isTag(elem)) return;

  if (!elem.attribs) {
    elem.attribs = {};
  }

  if (!name) {
    return elem.attribs;
  }

  if (hasOwn.call(elem.attribs, name)) {
    return rboolean.test(name) ? name : elem.attribs[name];
  }

  if (elem.name === 'option' && name === 'value') {
    return text(elem.children);
  }

  if (elem.name === 'input' && (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') && name === 'value') {
    return 'on';
  }
};

var setAttr = function setAttr(el, name, value) {
  if (value === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = value + '';
  }
};

exports.attr = function (name, value) {
  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function (i, el) {
        setAttr(el, name, value.call(el, i, el.attribs[name]));
      });
    }

    return domEach(this, function (i, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        Object.keys(name).forEach(function (objName) {
          var objValue = name[objName];
          setAttr(el, objName, objValue);
        });
      } else {
        setAttr(el, name, value);
      }
    });
  }

  return getAttr(this[0], name);
};

var getProp = function getProp(el, name) {
  if (!el || !isTag(el)) return;
  return name in el ? el[name] : rboolean.test(name) ? getAttr(el, name) !== undefined : getAttr(el, name);
};

var setProp = function setProp(el, name, value) {
  el[name] = rboolean.test(name) ? !!value : value;
};

exports.prop = function (name, value) {
  var i = 0;
  var property;

  if (typeof name === 'string' && value === undefined) {
    switch (name) {
      case 'style':
        property = this.css();
        Object.keys(property).forEach(function (p) {
          property[i++] = p;
        });
        property.length = i;
        break;

      case 'tagName':
      case 'nodeName':
        property = this[0].name.toUpperCase();
        break;

      case 'outerHTML':
        property = this.clone().wrap('<container />').parent().html();
        break;

      default:
        property = getProp(this[0], name);
    }

    return property;
  }

  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function (j, el) {
        setProp(el, name, value.call(el, j, getProp(el, name)));
      });
    }

    return domEach(this, function (__, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        Object.keys(name).forEach(function (key) {
          var val = name[key];
          setProp(el, key, val);
        });
      } else {
        setProp(el, name, value);
      }
    });
  }
};

var setData = function setData(el, name, value) {
  if (!el.data) {
    el.data = {};
  }

  if (typeof name === 'object') return (0, _extends2.default)(el.data, name);

  if (typeof name === 'string' && value !== undefined) {
    el.data[name] = value;
  }
};

var readData = function readData(el, name) {
  var readAll = arguments.length === 1;
  var domNames;
  var domName;
  var jsNames;
  var jsName;
  var value;
  var idx;
  var length;

  if (readAll) {
    domNames = Object.keys(el.attribs).filter(function (attrName) {
      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;
    });
    jsNames = domNames.map(function (_domName) {
      return camelCase(_domName.slice(dataAttrPrefix.length));
    });
  } else {
    domNames = [dataAttrPrefix + cssCase(name)];
    jsNames = [name];
  }

  for (idx = 0, length = domNames.length; idx < length; ++idx) {
    domName = domNames[idx];
    jsName = jsNames[idx];

    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {
      value = el.attribs[domName];

      if (hasOwn.call(primitives, value)) {
        value = primitives[value];
      } else if (value === String(Number(value))) {
        value = Number(value);
      } else if (rbrace.test(value)) {
        try {
          value = JSON.parse(value);
        } catch (e) {}
      }

      el.data[jsName] = value;
    }
  }

  return readAll ? el.data : value;
};

exports.data = function (name, value) {
  var elem = this[0];
  if (!elem || !isTag(elem)) return;

  if (!elem.data) {
    elem.data = {};
  }

  if (!name) {
    return readData(elem);
  }

  if (typeof name === 'object' || value !== undefined) {
    domEach(this, function (i, el) {
      setData(el, name, value);
    });
    return this;
  } else if (hasOwn.call(elem.data, name)) {
    return elem.data[name];
  }

  return readData(elem, name);
};

exports.val = function (value) {
  var querying = arguments.length === 0;
  var element = this[0];
  if (!element) return;

  switch (element.name) {
    case 'textarea':
      return this.text(value);

    case 'input':
      if (this.attr('type') === 'radio') {
        if (querying) {
          return this.attr('value');
        }

        this.attr('value', value);
        return this;
      }

      return this.attr('value', value);

    case 'select':
      var option = this.find('option:selected');
      var returnValue;
      if (option === undefined) return undefined;

      if (!querying) {
        if (!hasOwn.call(this.attr(), 'multiple') && typeof value == 'object') {
          return this;
        }

        if (typeof value != 'object') {
          value = [value];
        }

        this.find('option').removeAttr('selected');

        for (var i = 0; i < value.length; i++) {
          this.find('option[value="' + value[i] + '"]').attr('selected', '');
        }

        return this;
      }

      returnValue = option.attr('value');

      if (hasOwn.call(this.attr(), 'multiple')) {
        returnValue = [];
        domEach(option, function (__, el) {
          returnValue.push(getAttr(el, 'value'));
        });
      }

      return returnValue;

    case 'option':
      if (!querying) {
        this.attr('value', value);
        return this;
      }

      return this.attr('value');
  }
};

var removeAttribute = function removeAttribute(elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;
  delete elem.attribs[name];
};

var splitNames = function splitNames(names) {
  return names ? names.trim().split(rspace) : [];
};

exports.removeAttr = function (name) {
  var attrNames = splitNames(name);

  for (var i = 0; i < attrNames.length; i++) {
    domEach(this, function (j, elem) {
      removeAttribute(elem, attrNames[i]);
    });
  }

  return this;
};

exports.hasClass = function (className) {
  return this.toArray().some(function (elem) {
    var attrs = elem.attribs;
    var clazz = attrs && attrs['class'];
    var idx = -1;
    var end;

    if (clazz && className.length) {
      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
        end = idx + className.length;

        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {
          return true;
        }
      }
    }
  });
};

exports.addClass = function (value) {
  if (typeof value === 'function') {
    return domEach(this, function (i, el) {
      var className = el.attribs['class'] || '';
      exports.addClass.call([el], value.call(el, i, className));
    });
  }

  if (!value || typeof value !== 'string') return this;
  var classNames = value.split(rspace);
  var numElements = this.length;

  for (var i = 0; i < numElements; i++) {
    if (!isTag(this[i])) continue;
    var className = getAttr(this[i], 'class');
    var numClasses;
    var setClass;

    if (!className) {
      setAttr(this[i], 'class', classNames.join(' ').trim());
    } else {
      setClass = ' ' + className + ' ';
      numClasses = classNames.length;

      for (var j = 0; j < numClasses; j++) {
        var appendClass = classNames[j] + ' ';
        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;
      }

      setAttr(this[i], 'class', setClass.trim());
    }
  }

  return this;
};

exports.removeClass = function (value) {
  var classes;
  var numClasses;
  var removeAll;

  if (typeof value === 'function') {
    return domEach(this, function (i, el) {
      exports.removeClass.call([el], value.call(el, i, el.attribs['class'] || ''));
    });
  }

  classes = splitNames(value);
  numClasses = classes.length;
  removeAll = arguments.length === 0;
  return domEach(this, function (i, el) {
    if (!isTag(el)) return;

    if (removeAll) {
      el.attribs.class = '';
    } else {
      var elClasses = splitNames(el.attribs.class);
      var index;
      var changed;

      for (var j = 0; j < numClasses; j++) {
        index = elClasses.indexOf(classes[j]);

        if (index >= 0) {
          elClasses.splice(index, 1);
          changed = true;
          j--;
        }
      }

      if (changed) {
        el.attribs.class = elClasses.join(' ');
      }
    }
  });
};

exports.toggleClass = function (value, stateVal) {
  if (typeof value === 'function') {
    return domEach(this, function (i, el) {
      exports.toggleClass.call([el], value.call(el, i, el.attribs['class'] || '', stateVal), stateVal);
    });
  }

  if (!value || typeof value !== 'string') return this;
  var classNames = value.split(rspace);
  var numClasses = classNames.length;
  var state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0;
  var numElements = this.length;
  var elementClasses;
  var index;

  for (var i = 0; i < numElements; i++) {
    if (!isTag(this[i])) continue;
    elementClasses = splitNames(this[i].attribs.class);

    for (var j = 0; j < numClasses; j++) {
      index = elementClasses.indexOf(classNames[j]);

      if (state >= 0 && index < 0) {
        elementClasses.push(classNames[j]);
      } else if (state <= 0 && index >= 0) {
        elementClasses.splice(index, 1);
      }
    }

    this[i].attribs.class = elementClasses.join(' ');
  }

  return this;
};

exports.is = function (selector) {
  if (selector) {
    return this.filter(selector).length > 0;
  }

  return false;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,