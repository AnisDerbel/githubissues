59f9a7c841c452bf786359e9d6965b65
"use strict";

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
var actionTypes = {
  equals: "",
  element: "~",
  start: "^",
  end: "$",
  any: "*",
  not: "!",
  hyphen: "|"
};
var charsToEscape = new Set(__spreadArrays(Object.keys(actionTypes).map(function (typeKey) {
  return actionTypes[typeKey];
}).filter(Boolean), [":", "[", "]", " ", "\\", "(", ")"]));

function stringify(selector) {
  return selector.map(stringifySubselector).join(", ");
}

exports.default = stringify;

function stringifySubselector(token) {
  return token.map(stringifyToken).join("");
}

function stringifyToken(token) {
  switch (token.type) {
    case "child":
      return " > ";

    case "parent":
      return " < ";

    case "sibling":
      return " ~ ";

    case "adjacent":
      return " + ";

    case "descendant":
      return " ";

    case "universal":
      return getNamespace(token.namespace) + "*";

    case "tag":
      return getNamespacedName(token);

    case "pseudo-element":
      return "::" + escapeName(token.name);

    case "pseudo":
      if (token.data === null) return ":" + escapeName(token.name);

      if (typeof token.data === "string") {
        return ":" + escapeName(token.name) + "(" + escapeName(token.data) + ")";
      }

      return ":" + escapeName(token.name) + "(" + stringify(token.data) + ")";

    case "attribute":
      {
        if (token.name === "id" && token.action === "equals" && !token.ignoreCase && !token.namespace) {
          return "#" + escapeName(token.value);
        }

        if (token.name === "class" && token.action === "element" && !token.ignoreCase && !token.namespace) {
          return "." + escapeName(token.value);
        }

        var name_1 = getNamespacedName(token);

        if (token.action === "exists") {
          return "[" + name_1 + "]";
        }

        return "[" + name_1 + actionTypes[token.action] + "='" + escapeName(token.value) + "'" + (token.ignoreCase ? "i" : "") + "]";
      }
  }
}

function getNamespacedName(token) {
  return "" + getNamespace(token.namespace) + escapeName(token.name);
}

function getNamespace(namespace) {
  return namespace ? (namespace === "*" ? "*" : escapeName(namespace)) + "|" : "";
}

function escapeName(str) {
  return str.split("").map(function (c) {
    return charsToEscape.has(c) ? "\\" + c : c;
  }).join("");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ2lmeS5qcyJdLCJuYW1lcyI6WyJfX3NwcmVhZEFycmF5cyIsInMiLCJpIiwiaWwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiQXJyYXkiLCJrIiwiYSIsImoiLCJqbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWN0aW9uVHlwZXMiLCJlcXVhbHMiLCJlbGVtZW50Iiwic3RhcnQiLCJlbmQiLCJhbnkiLCJub3QiLCJoeXBoZW4iLCJjaGFyc1RvRXNjYXBlIiwiU2V0Iiwia2V5cyIsIm1hcCIsInR5cGVLZXkiLCJmaWx0ZXIiLCJCb29sZWFuIiwic3RyaW5naWZ5Iiwic2VsZWN0b3IiLCJzdHJpbmdpZnlTdWJzZWxlY3RvciIsImpvaW4iLCJkZWZhdWx0IiwidG9rZW4iLCJzdHJpbmdpZnlUb2tlbiIsInR5cGUiLCJnZXROYW1lc3BhY2UiLCJuYW1lc3BhY2UiLCJnZXROYW1lc3BhY2VkTmFtZSIsImVzY2FwZU5hbWUiLCJuYW1lIiwiZGF0YSIsImFjdGlvbiIsImlnbm9yZUNhc2UiLCJuYW1lXzEiLCJzdHIiLCJzcGxpdCIsImMiLCJoYXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLGNBQWMsR0FBSSxRQUFRLEtBQUtBLGNBQWQsSUFBaUMsWUFBWTtBQUM5RCxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBRyxDQUFmLEVBQWtCQyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBdEMsRUFBOENILENBQUMsR0FBR0MsRUFBbEQsRUFBc0RELENBQUMsRUFBdkQ7QUFBMkRELElBQUFBLENBQUMsSUFBSUcsU0FBUyxDQUFDRixDQUFELENBQVQsQ0FBYUcsTUFBbEI7QUFBM0Q7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUdDLEtBQUssQ0FBQ04sQ0FBRCxDQUFiLEVBQWtCTyxDQUFDLEdBQUcsQ0FBdEIsRUFBeUJOLENBQUMsR0FBRyxDQUFsQyxFQUFxQ0EsQ0FBQyxHQUFH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S0FBM0IsRUFBa0M7QUFDOUIsU0FBTyxLQUFLRyxZQUFZLENBQUNILEtBQUssQ0FBQ0ksU0FBUCxDQUFqQixHQUFxQ0UsVUFBVSxDQUFDTixLQUFLLENBQUNPLElBQVAsQ0FBdEQ7QUFDSDs7QUFDRCxTQUFTSixZQUFULENBQXNCQyxTQUF0QixFQUFpQztBQUM3QixTQUFPQSxTQUFTLEdBQ1YsQ0FBQ0EsU0FBUyxLQUFLLEdBQWQsR0FBb0IsR0FBcEIsR0FBMEJFLFVBQVUsQ0FBQ0YsU0FBRCxDQUFyQyxJQUFvRCxHQUQxQyxHQUVWLEVBRk47QUFHSDs7QUFDRCxTQUFTRSxVQUFULENBQW9CTSxHQUFwQixFQUF5QjtBQUNyQixTQUFPQSxHQUFHLENBQ0xDLEtBREUsQ0FDSSxFQURKLEVBRUZ0QixHQUZFLENBRUUsVUFBVXVCLENBQVYsRUFBYTtBQUFFLFdBQVExQixhQUFhLENBQUMyQixHQUFkLENBQWtCRCxDQUFsQixJQUF1QixPQUFPQSxDQUE5QixHQUFrQ0EsQ0FBMUM7QUFBK0MsR0FGaEUsRUFHRmhCLElBSEUsQ0FHRyxFQUhILENBQVA7QUFJSCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcbiAgICByZXR1cm4gcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYWN0aW9uVHlwZXMgPSB7XG4gICAgZXF1YWxzOiBcIlwiLFxuICAgIGVsZW1lbnQ6IFwiflwiLFxuICAgIHN0YXJ0OiBcIl5cIixcbiAgICBlbmQ6IFwiJFwiLFxuICAgIGFueTogXCIqXCIsXG4gICAgbm90OiBcIiFcIixcbiAgICBoeXBoZW46IFwifFwiLFxufTtcbnZhciBjaGFyc1RvRXNjYXBlID0gbmV3IFNldChfX3NwcmVhZEFycmF5cyhPYmplY3Qua2V5cyhhY3Rpb25UeXBlcylcbiAgICAubWFwKGZ1bmN0aW9uICh0eXBlS2V5KSB7IHJldHVybiBhY3Rpb25UeXBlc1t0eXBlS2V5XTsgfSlcbiAgICAuZmlsdGVyKEJvb2xlYW4pLCBbXG4gICAgXCI6XCIsXG4gICAgXCJbXCIsXG4gICAgXCJdXCIsXG4gICAgXCIgXCIsXG4gICAgXCJcXFxcXCIsXG4gICAgXCIoXCIsXG4gICAgXCIpXCIsXG5dKSk7XG4vKipcbiAqIFR1cm5zIGBzZWxlY3RvcmAgYmFjayBpbnRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3RvciB0byBzdHJpbmdpZnkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeShzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3Rvci5tYXAoc3RyaW5naWZ5U3Vic2VsZWN0b3IpLmpvaW4oXCIsIFwiKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHN0cmluZ2lmeTtcbmZ1bmN0aW9uIHN0cmluZ2lmeVN1YnNlbGVjdG9yKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuLm1hcChzdHJpbmdpZnlUb2tlbikuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVRva2VuKHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIC8vIFNpbXBsZSB0eXBlc1xuICAgICAgICBjYXNlIFwiY2hpbGRcIjpcbiAgICAgICAgICAgIHJldHVybiBcIiA+IFwiO1xuICAgICAgICBjYXNlIFwicGFyZW50XCI6XG4gICAgICAgICAgICByZXR1cm4gXCIgPCBcIjtcbiAgICAgICAgY2FzZSBcInNpYmxpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBcIiB+IFwiO1xuICAgICAgICBjYXNlIFwiYWRqYWNlbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBcIiArIFwiO1xuICAgICAgICBjYXNlIFwiZGVzY2VuZGFudFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiIFwiO1xuICAgICAgICBjYXNlIFwidW5pdmVyc2FsXCI6XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmFtZXNwYWNlKHRva2VuLm5hbWVzcGFjZSkgKyBcIipcIjtcbiAgICAgICAgY2FzZSBcInRhZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIGdldE5hbWVzcGFjZWROYW1lKHRva2VuKTtcbiAgICAgICAgY2FzZSBcInBzZXVkby1lbGVtZW50XCI6XG4gICAgICAgICAgICByZXR1cm4gXCI6OlwiICsgZXNjYXBlTmFtZSh0b2tlbi5uYW1lKTtcbiAgICAgICAgY2FzZSBcInBzZXVkb1wiOlxuICAgICAgICAgICAgaWYgKHRva2VuLmRhdGEgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiOlwiICsgZXNjYXBlTmFtZSh0b2tlbi5uYW1lKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4uZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIjpcIiArIGVzY2FwZU5hbWUodG9rZW4ubmFtZSkgKyBcIihcIiArIGVzY2FwZU5hbWUodG9rZW4uZGF0YSkgKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIjpcIiArIGVzY2FwZU5hbWUodG9rZW4ubmFtZSkgKyBcIihcIiArIHN0cmluZ2lmeSh0b2tlbi5kYXRhKSArIFwiKVwiO1xuICAgICAgICBjYXNlIFwiYXR0cmlidXRlXCI6IHtcbiAgICAgICAgICAgIGlmICh0b2tlbi5uYW1lID09PSBcImlkXCIgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi5hY3Rpb24gPT09IFwiZXF1YWxzXCIgJiZcbiAgICAgICAgICAgICAgICAhdG9rZW4uaWdub3JlQ2FzZSAmJlxuICAgICAgICAgICAgICAgICF0b2tlbi5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIjXCIgKyBlc2NhcGVOYW1lKHRva2VuLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbi5uYW1lID09PSBcImNsYXNzXCIgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi5hY3Rpb24gPT09IFwiZWxlbWVudFwiICYmXG4gICAgICAgICAgICAgICAgIXRva2VuLmlnbm9yZUNhc2UgJiZcbiAgICAgICAgICAgICAgICAhdG9rZW4ubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLlwiICsgZXNjYXBlTmFtZSh0b2tlbi52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gZ2V0TmFtZXNwYWNlZE5hbWUodG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRva2VuLmFjdGlvbiA9PT0gXCJleGlzdHNcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltcIiArIG5hbWVfMSArIFwiXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiW1wiICsgbmFtZV8xICsgYWN0aW9uVHlwZXNbdG9rZW4uYWN0aW9uXSArIFwiPSdcIiArIGVzY2FwZU5hbWUodG9rZW4udmFsdWUpICsgXCInXCIgKyAodG9rZW4uaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIikgKyBcIl1cIjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE5hbWVzcGFjZWROYW1lKHRva2VuKSB7XG4gICAgcmV0dXJuIFwiXCIgKyBnZXROYW1lc3BhY2UodG9rZW4ubmFtZXNwYWNlKSArIGVzY2FwZU5hbWUodG9rZW4ubmFtZSk7XG59XG5mdW5jdGlvbiBnZXROYW1lc3BhY2UobmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIG5hbWVzcGFjZVxuICAgICAgICA/IChuYW1lc3BhY2UgPT09IFwiKlwiID8gXCIqXCIgOiBlc2NhcGVOYW1lKG5hbWVzcGFjZSkpICsgXCJ8XCJcbiAgICAgICAgOiBcIlwiO1xufVxuZnVuY3Rpb24gZXNjYXBlTmFtZShzdHIpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiAoY2hhcnNUb0VzY2FwZS5oYXMoYykgPyBcIlxcXFxcIiArIGMgOiBjKTsgfSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG59XG4iXX0=