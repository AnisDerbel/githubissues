3977001d84303ea5359bc38f275b4dbd
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

module.exports = function buildURL(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkVVJMLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImVuY29kZSIsInZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsImlzVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJwYXJ0cyIsImZvckVhY2giLCJzZXJpYWxpemUiLCJrZXkiLCJpc0FycmF5IiwicGFyc2VWYWx1ZSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsImluZGV4T2YiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFFQSxTQUFTQyxNQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNuQixTQUFPQyxrQkFBa0IsQ0FBQ0QsR0FBRCxDQUFsQixDQUNMRSxPQURLLENBQ0csT0FESCxFQUNZLEdBRFosRUFFTEEsT0FGSyxDQUVHLE1BRkgsRUFFVyxHQUZYLEVBR0xBLE9BSEssQ0FHRyxPQUhILEVBR1ksR0FIWixFQUlMQSxPQUpLLENBSUcsTUFKSCxFQUlXLEdBSlgsRUFLTEEsT0FMSyxDQUtHLE9BTEgsRUFLWSxHQUxaLEVBTUxBLE9BTkssQ0FNRyxPQU5ILEVBTVksR0FOWixDQUFQO0FBT0Q7O0FBU0RDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxHQUFsQixFQUF1QkMsTUFBdkIsRUFBK0JDLGdCQUEvQixFQUFpRDtBQUVoRSxNQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYLFdBQU9ELEdBQVA7QUFDRDs7QUFFRCxNQUFJRyxnQkFBSjs7QUFDQSxNQUFJRCxnQkFBSixFQUFzQjtBQUNwQkMsSUFBQUEsZ0JBQWdCLEdBQUdELGdCQUFnQixDQUFDRCxNQUFELENBQW5DO0FBQ0QsR0FGRCxNQUVPLElBQUlWLEtBQUssQ0FBQ2EsaUJBQU4sQ0FBd0JILE1BQXhCLENBQUosRUFBcUM7QUFDMUNFLElBQUFBLGdCQUFnQixHQUFHRixNQUFNLENBQUNJLFFBQVAsRUFBbkI7QUFDRCxHQUZNLE1BRUE7QUFDTCxRQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUVBZixJQUFBQSxLQUFLLENBQUNnQixPQUFOLENBQWNOLE1BQWQsRUFBc0IsU0FBU08sU0FBVCxDQUFtQmQsR0FBbkIsRUFBd0JlLEdBQXhCLEVBQTZCO0FBQ2pELFVBQUlmLEdBQUcsS0FBSyxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxXQUFuQyxFQUFnRDtBQUM5QztBQUNEOztBQUVELFVBQUlILEtBQUssQ0FBQ21CLE9BQU4sQ0FBY2hCLEdBQWQsQ0FBSixFQUF3QjtBQUN0QmUsUUFBQUEsR0FBRyxHQUFHQSxHQUFHLEdBQUcsSUFBWjtBQUNELE9BRkQsTUFFTztBQUNMZixRQUFBQSxHQUFHLEdBQUcsQ0FBQ0EsR0FBRCxDQUFOO0FBQ0Q7O0FBRURILE1BQUFBLEtBQUssQ0FBQ2dCLE9BQU4sQ0FBY2IsR0FBZCxFQUFtQixTQUFTaUIsVUFBVCxDQUFvQkMsQ0FBcEIsRUFBdUI7QUFDeEMsWUFBSXJCLEtBQUssQ0FBQ3NCLE1BQU4sQ0FBYUQsQ0FBYixDQUFKLEVBQXFCO0FBQ25CQSxVQUFBQSxDQUFDLEdBQUdBLENBQUMsQ0FBQ0UsV0FBRixFQUFKO0FBQ0QsU0FGRCxNQUVPLElBQUl2QixLQUFLLENBQUN3QixRQUFOLENBQWVILENBQWYsQ0FBSixFQUF1QjtBQUM1QkEsVUFBQUEsQ0FBQyxHQUFHSSxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsQ0FBZixDQUFKO0FBQ0Q7O0FBQ0ROLFFBQUFBLEtBQUssQ0FBQ1ksSUFBTixDQUFXekIsTUFBTSxDQUFDZ0IsR0FBRCxDQUFOLEdBQWMsR0FBZCxHQUFvQmhCLE1BQU0sQ0FBQ21CLENBQUQsQ0FBckM7QUFDRCxPQVBEO0FBUUQsS0FuQkQ7QUFxQkFULElBQUFBLGdCQUFnQixHQUFHRyxLQUFLLENBQUNhLElBQU4sQ0FBVyxHQUFYLENBQW5CO0FBQ0Q7O0FBRUQsTUFBSWhCLGdCQUFKLEVBQXNCO0FBQ3BCLFFBQUlpQixhQUFhLEdBQUdwQixHQUFHLENBQUNxQixPQUFKLENBQVksR0FBWixDQUFwQjs7QUFDQSxRQUFJRCxhQUFhLEtBQUssQ0FBQyxDQUF2QixFQUEwQjtBQUN4QnBCLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDc0IsS0FBSixDQUFVLENBQVYsRUFBYUYsYUFBYixDQUFOO0FBQ0Q7O0FBRURwQixJQUFBQSxHQUFHLElBQUksQ0FBQ0EsR0FBRyxDQUFDcUIsT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBQyxDQUF0QixHQUEwQixHQUExQixHQUFnQyxHQUFqQyxJQUF3Q2xCLGdCQUEvQztBQUNEOztBQUVELFNBQU9ILEdBQVA7QUFDRCxDQWhERCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iXX0=