4f89202db1581da2ede1e9cc6206587d
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

var COMPARE_PARTIAL_FLAG = 1;
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9iYXNlSXNFcXVhbERlZXAuanMiXSwibmFtZXMiOlsiU3RhY2siLCJyZXF1aXJlIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiZ2V0VGFnIiwiaXNBcnJheSIsImlzQnVmZmVyIiwiaXNUeXBlZEFycmF5IiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiYmFzZUlzRXF1YWxEZWVwIiwib2JqZWN0Iiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImVxdWFsRnVuYyIsInN0YWNrIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJjYWxsIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwidmFsdWUiLCJvdGhVbndyYXBwZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQW5CO0FBQUEsSUFDSUMsV0FBVyxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FEekI7QUFBQSxJQUVJRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBRnhCO0FBQUEsSUFHSUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FIMUI7QUFBQSxJQUlJSSxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxXQUFELENBSnBCO0FBQUEsSUFLSUssT0FBTyxHQUFHTCxPQUFPLENBQUMsV0FBRCxDQUxyQjtBQUFBLElBTUlNLFFBQVEsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FOdEI7QUFBQSxJQU9JTyxZQUFZLEdBQUdQLE9BQU8sQ0FBQyxnQkFBRCxDQVAxQjs7QUFVQSxJQUFJUSxvQkFBb0IsR0FBRyxDQUEzQjtBQUdBLElBQUlDLE9BQU8sR0FBRyxvQkFBZDtBQUFBLElBQ0lDLFFBQVEsR0FBRyxnQkFEZjtBQUFBLElBRUlDLFNBQVMsR0FBRyxpQkFGaEI7QUFLQSxJQUFJQyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBekI7QUFHQSxJQUFJQyxjQUFjLEdBQUdILFdBQVcsQ0FBQ0csY0FBakM7O0FBZ0JBLFNBQVNDLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDQyxLQUFqQyxFQUF3Q0MsT0FBeEMsRUFBaURDLFVBQWpELEVBQTZEQyxTQUE3RCxFQUF3RUMsS0FBeEUsRUFBK0U7QUFDN0UsTUFBSUMsUUFBUSxHQUFHbEIsT0FBTyxDQUFDWSxNQUFELENBQXRCO0FBQUEsTUFDSU8sUUFBUSxHQUFHbkIsT0FBTyxDQUFDYSxLQUFELENBRHRCO0FBQUEsTUFFSU8sTUFBTSxHQUFHRixRQUFRLEdBQUdiLFFBQUgsR0FBY04sTUFBTSxDQUFDYSxNQUFELENBRnpDO0FBQUEsTUFHSVMsTUFBTSxHQUFHRixRQUFRLEdBQUdkLFFBQUgsR0FBY04sTUFBTSxDQUFDYyxLQUFELENBSHpDO0FBS0FPLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJaEIsT0FBVixHQUFvQkUsU0FBcEIsR0FBZ0NjLE1BQXpDO0FBQ0FDLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJakIsT0FBVixHQUFvQkUsU0FBcEIsR0FBZ0NlLE1BQXpDO0FBRUEsTUFBSUMsUUFBUSxHQUFHRixNQUFNLElBQUlkLFNBQXpCO0FBQUEsTUFDSWlCLFFBQVEsR0FBR0YsTUFBTSxJQUFJZixTQUR6QjtBQUFBLE1BRUlrQixTQUFTLEdBQUdKLE1BQU0sSUFBSUMsTUFGMUI7O0FBSUEsTUFBSUcsU0FBUyxJQUFJdkIsUUFBUSxDQUFDVyxNQUFELENBQXpCLEVBQW1DO0FBQ2pDLFFBQUksQ0FBQ1gsUUFBUSxDQUFDWSxLQUFELENBQWIsRUFBc0I7QUFDcEIsYUFBTyxLQUFQO0FBQ0Q7O0FBQ0RLLElBQUFBLFFBQVEsR0FBRyxJQUFYO0FBQ0FJLElBQUFBLFFBQVEsR0FBRyxLQUFYO0FBQ0Q7O0FBQ0QsTUFBSUUsU0FBUyxJQUFJLENBQUNGLFFBQWxCLEVBQTRCO0FBQzFCTCxJQUFBQSxLQUFLLEtBQUtBLEtBQUssR0FBRyxJQUFJdkIsS0FBSixFQUFiLENBQUw7QUFDQSxXQUFRd0IsUUFBUSxJQUFJaEIsWUFBWSxDQUFDVSxNQUFELENBQXpCLEdBQ0hoQixXQUFXLENBQUNnQixNQUFELEVBQVNDLEtBQVQsRUFBZ0JDLE9BQWhCLEVBQXlCQyxVQUF6QixFQUFxQ0MsU0FBckMsRUFBZ0RDLEtBQWhELENBRFIsR0FFSHBCLFVBQVUsQ0FBQ2UsTUFBRCxFQUFTQyxLQUFULEVBQWdCTyxNQUFoQixFQUF3Qk4sT0FBeEIsRUFBaUNDLFVBQWpDLEVBQTZDQyxTQUE3QyxFQUF3REMsS0FBeEQsQ0FGZDtBQUdEOztBQUNELE1BQUksRUFBRUgsT0FBTyxHQUFHWCxvQkFBWixDQUFKLEVBQXVDO0FBQ3JDLFFBQUlzQixZQUFZLEdBQUdILFFBQVEsSUFBSVosY0FBYyxDQUFDZ0IsSUFBZixDQUFvQmQsTUFBcEIsRUFBNEIsYUFBNUIsQ0FBL0I7QUFBQSxRQUNJZSxZQUFZLEdBQUdKLFFBQVEsSUFBSWIsY0FBYyxDQUFDZ0IsSUFBZixDQUFvQmIsS0FBcEIsRUFBMkIsYUFBM0IsQ0FEL0I7O0FBR0EsUUFBSVksWUFBWSxJQUFJRSxZQUFwQixFQUFrQztBQUNoQyxVQUFJQyxZQUFZLEdBQUdILFlBQVksR0FBR2IsTUFBTSxDQUFDaUIsS0FBUCxFQUFILEdBQW9CakIsTUFBbkQ7QUFBQSxVQUNJa0IsWUFBWSxHQUFHSCxZQUFZLEdBQUdkLEtBQUssQ0FBQ2dCLEtBQU4sRUFBSCxHQUFtQmhCLEtBRGxEO0FBR0FJLE1BQUFBLEtBQUssS0FBS0EsS0FBSyxHQUFHLElBQUl2QixLQUFKLEVBQWIsQ0FBTDtBQUNBLGFBQU9zQixTQUFTLENBQUNZLFlBQUQsRUFBZUUsWUFBZixFQUE2QmhCLE9BQTdCLEVBQXNDQyxVQUF0QyxFQUFrREUsS0FBbEQsQ0FBaEI7QUFDRDtBQUNGOztBQUNELE1BQUksQ0FBQ08sU0FBTCxFQUFnQjtBQUNkLFdBQU8sS0FBUDtBQUNEOztBQUNEUCxFQUFBQSxLQUFLLEtBQUtBLEtBQUssR0FBRyxJQUFJdkIsS0FBSixFQUFiLENBQUw7QUFDQSxTQUFPSSxZQUFZLENBQUNjLE1BQUQsRUFBU0MsS0FBVCxFQUFnQkMsT0FBaEIsRUFBeUJDLFVBQXpCLEVBQXFDQyxTQUFyQyxFQUFnREMsS0FBaEQsQ0FBbkI7QUFDRDs7QUFFRGMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCckIsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iXX0=