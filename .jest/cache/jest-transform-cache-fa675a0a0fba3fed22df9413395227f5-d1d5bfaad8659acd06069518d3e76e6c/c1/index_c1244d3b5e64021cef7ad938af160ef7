4f78dd4604aabd1341ee95d10497b376
function bindCallback(func, thisArg, argCount) {
  if (typeof func != 'function') {
    return identity;
  }

  if (thisArg === undefined) {
    return func;
  }

  switch (argCount) {
    case 1:
      return function (value) {
        return func.call(thisArg, value);
      };

    case 3:
      return function (value, index, collection) {
        return func.call(thisArg, value, index, collection);
      };

    case 4:
      return function (accumulator, value, index, collection) {
        return func.call(thisArg, accumulator, value, index, collection);
      };

    case 5:
      return function (value, other, key, object, source) {
        return func.call(thisArg, value, other, key, object, source);
      };
  }

  return function () {
    return func.apply(thisArg, arguments);
  };
}

function identity(value) {
  return value;
}

module.exports = bindCallback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImJpbmRDYWxsYmFjayIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJnQ291bnQiLCJpZGVudGl0eSIsInVuZGVmaW5lZCIsInZhbHVlIiwiY2FsbCIsImluZGV4IiwiY29sbGVjdGlvbiIsImFjY3VtdWxhdG9yIiwib3RoZXIiLCJrZXkiLCJvYmplY3QiLCJzb3VyY2UiLCJhcHBseSIsImFyZ3VtZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQW1CQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsT0FBNUIsRUFBcUNDLFFBQXJDLEVBQStDO0FBQzdDLE1BQUksT0FBT0YsSUFBUCxJQUFlLFVBQW5CLEVBQStCO0FBQzdCLFdBQU9HLFFBQVA7QUFDRDs7QUFDRCxNQUFJRixPQUFPLEtBQUtHLFNBQWhCLEVBQTJCO0FBQ3pCLFdBQU9KLElBQVA7QUFDRDs7QUFDRCxVQUFRRSxRQUFSO0FBQ0UsU0FBSyxDQUFMO0FBQVEsYUFBTyxVQUFTRyxLQUFULEVBQWdCO0FBQzdCLGVBQU9MLElBQUksQ0FBQ00sSUFBTCxDQUFVTCxPQUFWLEVBQW1CSSxLQUFuQixDQUFQO0FBQ0QsT0FGTzs7QUFHUixTQUFLLENBQUw7QUFBUSxhQUFPLFVBQVNBLEtBQVQsRUFBZ0JFLEtBQWhCLEVBQXVCQyxVQUF2QixFQUFtQztBQUNoRCxlQUFPUixJQUFJLENBQUNNLElBQUwsQ0FBVUwsT0FBVixFQUFtQkksS0FBbkIsRUFBMEJFLEtBQTFCLEVBQWlDQyxVQUFqQyxDQUFQO0FBQ0QsT0FGTzs7QUFHUixTQUFLLENBQUw7QUFBUSxhQUFPLFVBQVNDLFdBQVQsRUFBc0JKLEtBQXRCLEVBQTZCRSxLQUE3QixFQUFvQ0MsVUFBcEMsRUFBZ0Q7QUFDN0QsZUFBT1IsSUFBSSxDQUFDTSxJQUFMLENBQVVMLE9BQVYsRUFBbUJRLFdBQW5CLEVBQWdDSixLQUFoQyxFQUF1Q0UsS0FBdkMsRUFBOENDLFVBQTlDLENBQVA7QUFDRCxPQUZPOztBQUdSLFNBQUssQ0FBTDtBQUFRLGFBQU8sVUFBU0gsS0FBVCxFQUFnQkssS0FBaEIsRUFBdUJDLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQ0MsTUFBcEMsRUFBNEM7QUFDekQsZUFBT2IsSUFBSSxDQUFDTSxJQUFMLENBQVVMLE9BQVYsRUFBbUJJLEtBQW5CLEVBQTBCSyxLQUExQixFQUFpQ0MsR0FBakMsRUFBc0NDLE1BQXRDLEVBQThDQyxNQUE5QyxDQUFQO0FBQ0QsT0FGTztBQVZWOztBQWNBLFNBQU8sWUFBVztBQUNoQixXQUFPYixJQUFJLENBQUNjLEtBQUwsQ0FBV2IsT0FBWCxFQUFvQmMsU0FBcEIsQ0FBUDtBQUNELEdBRkQ7QUFHRDs7QUFpQkQsU0FBU1osUUFBVCxDQUFrQkUsS0FBbEIsRUFBeUI7QUFDdkIsU0FBT0EsS0FBUDtBQUNEOztBQUVEVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogbG9kYXNoIDMuMC4xIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kZXJuIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNSBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE1IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQ2FsbGJhY2tgIHdoaWNoIG9ubHkgc3VwcG9ydHMgYHRoaXNgIGJpbmRpbmdcbiAqIGFuZCBzcGVjaWZ5aW5nIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIGJpbmRDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodGhpc0FyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbiAgc3dpdGNoIChhcmdDb3VudCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIHZhbHVlKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH07XG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9O1xuICAgIGNhc2UgNTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlciwga2V5LCBvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgb3RoZXIsIGtleSwgb2JqZWN0LCBzb3VyY2UpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgcHJvdmlkZWQgdG8gaXQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3Q7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kQ2FsbGJhY2s7XG4iXX0=