c1b548b14d174290501eea5dff01ad3f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var react_1 = tslib_1.__importDefault(require("react"));

var enzyme_1 = require("enzyme");

var enzyme_adapter_react_17_1 = tslib_1.__importDefault(require("@wojtekmaj/enzyme-adapter-react-17"));

var react_native_paper_1 = require("react-native-paper");

var repo_1 = require("../../__mocks__/repo");

var theme_1 = tslib_1.__importDefault(require("../../theme"));

var Title_1 = tslib_1.__importStar(require("../Title"));

var react_native_parsed_text_1 = tslib_1.__importDefault(require("react-native-parsed-text"));

enzyme_1.configure({
  adapter: new enzyme_adapter_react_17_1.default()
});
var component;
describe('Title', function () {
  var renderComponent = function renderComponent(title) {
    return enzyme_1.mount(react_1.default.createElement(react_native_paper_1.Provider, {
      theme: theme_1.default
    }, react_1.default.createElement(Title_1.default, null, title)));
  };

  beforeEach(function () {
    component = renderComponent(repo_1.repoIssuesMock.data[0].title);
  });
  it('should render title correctly', function () {
    expect(component.find(react_native_parsed_text_1.default).text()).toEqual(repo_1.repoIssuesMock.data[0].title);
  });
  it('should return plain text if surrounding with quotes', function () {
    expect(Title_1.renderText('`this is highlighted`')).toEqual('this is highlighted');
    expect(Title_1.renderText('`this is not highlighted')).toEqual('`this is not a highlighted');
    expect(Title_1.renderText('this is not highlighted')).toEqual('this is not a highlighted');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmlzZGVyYmVsL0RvY3VtZW50cy9hcGNnaXRodWJpc3N1ZXMvc3JjL2NvbXBvbmVudHMvX190ZXN0c19fL3RpdGxlLnNwZWMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7QUFFQSxJQUFBLHlCQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsb0NBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsb0JBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7QUFDQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLDBCQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsMEJBQUEsQ0FBQSxDQUFBOztBQUVBLFFBQUEsQ0FBQSxTQUFBLENBQVU7QUFBRSxFQUFBLE9BQU8sRUFBRSxJQUFJLHlCQUFBLENBQUEsT0FBSjtBQUFYLENBQVY7QUFHQSxJQUFJLFNBQUo7QUFFQSxRQUFRLENBQUMsT0FBRCxFQUFVLFlBQUs7QUFDckIsTUFBTSxlQUFlLEdBQUcsU0FBbEIsZUFBa0IsQ0FBQyxLQUFEO0FBQUEsV0FDdEIsUUFBQSxDQUFBLEtBQUEsQ0FDRSxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxvQkFBQSxDQUFBLFFBQUQsRUFBYztBQUFDLE1BQUEsS0FBSyxFQUFFLE9BQUEsQ0FBQTtBQUFSLEtBQWQsRUFDRSxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxPQUFBLENBQUEsT0FBRCxFQUFNLElBQU4sRUFBUSxLQUFSLENBREYsQ0FERixDQURzQjtBQUFBLEdBQXhCOztBQU1BLEVBQUEsVUFBVSxDQUFDLFlBQUs7QUFDZCxJQUFBLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBQSxDQUFBLGNBQUEsQ0FBZSxJQUFmLENBQW9CLENBQXBCLEVBQXVCLEtBQXhCLENBQTNCO0FBQ0QsR0FGUyxDQUFWO0FBSUEsRUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBSztBQUN2QyxJQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBVixDQUFlLDBCQUFBLENBQUEsT0FBZixFQUEyQixJQUEzQixFQUFELENBQU4sQ0FBMEMsT0FBMUMsQ0FBa0QsTUFBQSxDQUFBLGNBQUEsQ0FBZSxJQUFmLENBQW9CLENBQXBCLEVBQXVCLEtBQXpFO0FBQ0QsR0FGQyxDQUFGO0FBSUEsRUFBQSxFQUFFLENBQUMscURBQUQsRUFBd0QsWUFBSztBQUM3RCxJQUFBLE1BQU0sQ0FBQyxPQUFBLENBQUEsVUFBQSxDQUFXLHVCQUFYLENBQUQsQ0FBTixDQUE0QyxPQUE1QyxDQUFvRCxxQkFBcEQ7QUFDQSxJQUFBLE1BQU0sQ0FBQyxPQUFBLENBQUEsVUFBQSxDQUFXLDBCQUFYLENBQUQsQ0FBTixDQUErQyxPQUEvQyxDQUF1RCw0QkFBdkQ7QUFDQSxJQUFBLE1BQU0sQ0FBQyxPQUFBLENBQUEsVUFBQSxDQUFXLHlCQUFYLENBQUQsQ0FBTixDQUE4QyxPQUE5QyxDQUFzRCwyQkFBdEQ7QUFDRCxHQUpDLENBQUY7QUFLRCxDQXBCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50LCBSZWFjdFdyYXBwZXIsIGNvbmZpZ3VyZSB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgeyBJc3N1ZUl0ZW1Qcm9wcyB9IGZyb20gJy4uL0lzc3VlSXRlbSc7XG5pbXBvcnQgQWRhcHRlciBmcm9tICdAd29qdGVrbWFqL2VuenltZS1hZGFwdGVyLXJlYWN0LTE3JztcbmltcG9ydCB7IFByb3ZpZGVyIGFzIFBhcGVyUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuaW1wb3J0IHsgcmVwb0lzc3Vlc01vY2sgfSBmcm9tICcuLi8uLi9fX21vY2tzX18vcmVwbyc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vdGhlbWUnO1xuaW1wb3J0IFRpdGxlLCB7IHJlbmRlclRleHQgfSBmcm9tICcuLi9UaXRsZSc7XG5pbXBvcnQgUGFyc2VkVGV4dCBmcm9tICdyZWFjdC1uYXRpdmUtcGFyc2VkLXRleHQnO1xuXG5jb25maWd1cmUoeyBhZGFwdGVyOiBuZXcgQWRhcHRlcigpIH0pO1xudHlwZSBDb21wb25lbnRXcmFwcGVyID0gUmVhY3RXcmFwcGVyPElzc3VlSXRlbVByb3BzLCB2b2lkLCBSZWFjdC5Db21wb25lbnQ+O1xuXG5sZXQgY29tcG9uZW50OiBDb21wb25lbnRXcmFwcGVyO1xuXG5kZXNjcmliZSgnVGl0bGUnLCAoKSA9PiB7XG4gIGNvbnN0IHJlbmRlckNvbXBvbmVudCA9ICh0aXRsZTogc3RyaW5nKTogQ29tcG9uZW50V3JhcHBlciA9PlxuICAgIG1vdW50KFxuICAgICAgPFBhcGVyUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT5cbiAgICAgICAgPFRpdGxlPnt0aXRsZX08L1RpdGxlPlxuICAgICAgPC9QYXBlclByb3ZpZGVyPixcbiAgICApO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb21wb25lbnQgPSByZW5kZXJDb21wb25lbnQocmVwb0lzc3Vlc01vY2suZGF0YVswXS50aXRsZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHRpdGxlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBleHBlY3QoY29tcG9uZW50LmZpbmQoUGFyc2VkVGV4dCkudGV4dCgpKS50b0VxdWFsKHJlcG9Jc3N1ZXNNb2NrLmRhdGFbMF0udGl0bGUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBwbGFpbiB0ZXh0IGlmIHN1cnJvdW5kaW5nIHdpdGggcXVvdGVzJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZW5kZXJUZXh0KCdgdGhpcyBpcyBoaWdobGlnaHRlZGAnKSkudG9FcXVhbCgndGhpcyBpcyBoaWdobGlnaHRlZCcpO1xuICAgIGV4cGVjdChyZW5kZXJUZXh0KCdgdGhpcyBpcyBub3QgaGlnaGxpZ2h0ZWQnKSkudG9FcXVhbCgnYHRoaXMgaXMgbm90IGEgaGlnaGxpZ2h0ZWQnKTtcbiAgICBleHBlY3QocmVuZGVyVGV4dCgndGhpcyBpcyBub3QgaGlnaGxpZ2h0ZWQnKSkudG9FcXVhbCgndGhpcyBpcyBub3QgYSBoaWdobGlnaHRlZCcpO1xuICB9KTtcbn0pO1xuIl19