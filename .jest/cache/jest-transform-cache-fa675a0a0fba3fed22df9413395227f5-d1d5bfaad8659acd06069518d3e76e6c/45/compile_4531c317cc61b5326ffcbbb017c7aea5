a0cda36f189d0e2048df8c8b45199c55
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compile = void 0;

var boolbase_1 = require("boolbase");

function compile(parsed) {
  var a = parsed[0];
  var b = parsed[1] - 1;
  if (b < 0 && a <= 0) return boolbase_1.falseFunc;
  if (a === -1) return function (index) {
    return index <= b;
  };
  if (a === 0) return function (index) {
    return index === b;
  };
  if (a === 1) return b < 0 ? boolbase_1.trueFunc : function (index) {
    return index >= b;
  };
  var absA = Math.abs(a);
  var bMod = (b % absA + absA) % absA;
  return a > 1 ? function (index) {
    return index >= b && index % absA === bMod;
  } : function (index) {
    return index <= b && index % absA === bMod;
  };
}

exports.compile = compile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBpbGUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21waWxlIiwiYm9vbGJhc2VfMSIsInJlcXVpcmUiLCJwYXJzZWQiLCJhIiwiYiIsImZhbHNlRnVuYyIsImluZGV4IiwidHJ1ZUZ1bmMiLCJhYnNBIiwiTWF0aCIsImFicyIsImJNb2QiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDO0FBQ0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUNBLElBQUlDLFVBQVUsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7O0FBa0JBLFNBQVNGLE9BQVQsQ0FBaUJHLE1BQWpCLEVBQXlCO0FBQ3JCLE1BQUlDLENBQUMsR0FBR0QsTUFBTSxDQUFDLENBQUQsQ0FBZDtBQUVBLE1BQUlFLENBQUMsR0FBR0YsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZLENBQXBCO0FBUUEsTUFBSUUsQ0FBQyxHQUFHLENBQUosSUFBU0QsQ0FBQyxJQUFJLENBQWxCLEVBQ0ksT0FBT0gsVUFBVSxDQUFDSyxTQUFsQjtBQUVKLE1BQUlGLENBQUMsS0FBSyxDQUFDLENBQVgsRUFDSSxPQUFPLFVBQVVHLEtBQVYsRUFBaUI7QUFBRSxXQUFPQSxLQUFLLElBQUlGLENBQWhCO0FBQW9CLEdBQTlDO0FBQ0osTUFBSUQsQ0FBQyxLQUFLLENBQVYsRUFDSSxPQUFPLFVBQVVHLEtBQVYsRUFBaUI7QUFBRSxXQUFPQSxLQUFLLEtBQUtGLENBQWpCO0FBQXFCLEdBQS9DO0FBRUosTUFBSUQsQ0FBQyxLQUFLLENBQVYsRUFDSSxPQUFPQyxDQUFDLEdBQUcsQ0FBSixHQUFRSixVQUFVLENBQUNPLFFBQW5CLEdBQThCLFVBQVVELEtBQVYsRUFBaUI7QUFBRSxXQUFPQSxLQUFLLElBQUlGLENBQWhCO0FBQW9CLEdBQTVFO0FBTUosTUFBSUksSUFBSSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1AsQ0FBVCxDQUFYO0FBRUEsTUFBSVEsSUFBSSxHQUFHLENBQUVQLENBQUMsR0FBR0ksSUFBTCxHQUFhQSxJQUFkLElBQXNCQSxJQUFqQztBQUNBLFNBQU9MLENBQUMsR0FBRyxDQUFKLEdBQ0QsVUFBVUcsS0FBVixFQUFpQjtBQUFFLFdBQU9BLEtBQUssSUFBSUYsQ0FBVCxJQUFjRSxLQUFLLEdBQUdFLElBQVIsS0FBaUJHLElBQXRDO0FBQTZDLEdBRC9ELEdBRUQsVUFBVUwsS0FBVixFQUFpQjtBQUFFLFdBQU9BLEtBQUssSUFBSUYsQ0FBVCxJQUFjRSxLQUFLLEdBQUdFLElBQVIsS0FBaUJHLElBQXRDO0FBQTZDLEdBRnRFO0FBR0g7O0FBQ0RkLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkEsT0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcGlsZSA9IHZvaWQgMDtcbnZhciBib29sYmFzZV8xID0gcmVxdWlyZShcImJvb2xiYXNlXCIpO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgYW4gZWxlbWVudHMgaW5kZXggbWF0Y2hlcyB0aGUgZ2l2ZW4gcnVsZVxuICogaGlnaGx5IG9wdGltaXplZCB0byByZXR1cm4gdGhlIGZhc3Rlc3Qgc29sdXRpb24uXG4gKlxuICogQHBhcmFtIHBhcnNlZCBBIHR1cGxlIFthLCBiXSwgYXMgcmV0dXJuZWQgYnkgYHBhcnNlYC5cbiAqIEByZXR1cm5zIEEgaGlnaGx5IG9wdGltaXplZCBmdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBhbiBpbmRleCBtYXRjaGVzIHRoZSBudGgtY2hlY2suXG4gKiBAZXhhbXBsZVxuICogY29uc3QgY2hlY2sgPSBudGhDaGVjay5jb21waWxlKFsyLCAzXSk7XG4gKlxuICogY2hlY2soMCk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDEpOyAvLyBgZmFsc2VgXG4gKiBjaGVjaygyKTsgLy8gYHRydWVgXG4gKiBjaGVjaygzKTsgLy8gYGZhbHNlYFxuICogY2hlY2soNCk7IC8vIGB0cnVlYFxuICogY2hlY2soNSk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDYpOyAvLyBgdHJ1ZWBcbiAqL1xuZnVuY3Rpb24gY29tcGlsZShwYXJzZWQpIHtcbiAgICB2YXIgYSA9IHBhcnNlZFswXTtcbiAgICAvLyBTdWJ0cmFjdCAxIGZyb20gYGJgLCB0byBjb252ZXJ0IGZyb20gb25lLSB0byB6ZXJvLWluZGV4ZWQuXG4gICAgdmFyIGIgPSBwYXJzZWRbMV0gLSAxO1xuICAgIC8qXG4gICAgICogV2hlbiBgYiA8PSAwYCwgYGEgKiBuYCB3b24ndCBiZSBsZWFkIHRvIGFueSBtYXRjaGVzIGZvciBgYSA8IDBgLlxuICAgICAqIEJlc2lkZXMsIHRoZSBzcGVjaWZpY2F0aW9uIHN0YXRlcyB0aGF0IG5vIGVsZW1lbnRzIGFyZVxuICAgICAqIG1hdGNoZWQgd2hlbiBgYWAgYW5kIGBiYCBhcmUgMC5cbiAgICAgKlxuICAgICAqIGBiIDwgMGAgaGVyZSBhcyB3ZSBzdWJ0cmFjdGVkIDEgZnJvbSBgYmAgYWJvdmUuXG4gICAgICovXG4gICAgaWYgKGIgPCAwICYmIGEgPD0gMClcbiAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZmFsc2VGdW5jO1xuICAgIC8vIFdoZW4gYGFgIGlzIGluIHRoZSByYW5nZSAtMS4uMSwgaXQgbWF0Y2hlcyBhbnkgZWxlbWVudCAoc28gb25seSBgYmAgaXMgY2hlY2tlZCkuXG4gICAgaWYgKGEgPT09IC0xKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA8PSBiOyB9O1xuICAgIGlmIChhID09PSAwKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA9PT0gYjsgfTtcbiAgICAvLyBXaGVuIGBiIDw9IDBgIGFuZCBgYSA9PT0gMWAsIHRoZXkgbWF0Y2ggYW55IGVsZW1lbnQuXG4gICAgaWYgKGEgPT09IDEpXG4gICAgICAgIHJldHVybiBiIDwgMCA/IGJvb2xiYXNlXzEudHJ1ZUZ1bmMgOiBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIGluZGV4ID49IGI7IH07XG4gICAgLypcbiAgICAgKiBPdGhlcndpc2UsIG1vZHVsbyBjYW4gYmUgdXNlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBhIG1hdGNoLlxuICAgICAqXG4gICAgICogTW9kdWxvIGRvZXNuJ3QgY2FyZSBhYm91dCB0aGUgc2lnbiwgc28gbGV0J3MgdXNlIGBhYHMgYWJzb2x1dGUgdmFsdWUuXG4gICAgICovXG4gICAgdmFyIGFic0EgPSBNYXRoLmFicyhhKTtcbiAgICAvLyBHZXQgYGIgbW9kIGFgLCArIGEgaWYgdGhpcyBpcyBuZWdhdGl2ZS5cbiAgICB2YXIgYk1vZCA9ICgoYiAlIGFic0EpICsgYWJzQSkgJSBhYnNBO1xuICAgIHJldHVybiBhID4gMVxuICAgICAgICA/IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gaW5kZXggPj0gYiAmJiBpbmRleCAlIGFic0EgPT09IGJNb2Q7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIGluZGV4IDw9IGIgJiYgaW5kZXggJSBhYnNBID09PSBiTW9kOyB9O1xufVxuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZTtcbiJdfQ==