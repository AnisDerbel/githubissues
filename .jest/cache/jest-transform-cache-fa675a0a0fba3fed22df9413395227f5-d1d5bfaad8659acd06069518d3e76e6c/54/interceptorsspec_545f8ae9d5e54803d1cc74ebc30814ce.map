{"version":3,"sources":["/Users/anisderbel/Documents/apcgithubissues/src/redux/interceptors/__tests__/interceptors.spec.ts"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;AAEA,QAAQ,CAAC,cAAD,EAAiB,YAAK;AAC5B,EAAA,QAAQ,CAAC,6BAAD,EAAgC,YAAK;AAC3C,IAAA,UAAU,CAAC,YAAK;AACb,2CAA0B,SAA1B;;AACD,MAAA,IAAI,CAAC,aAAL;AACD,KAHS,CAAV;AAIA,oCAAa,iCAAb;AAEA,IAAA,EAAE,CAAC,yDAAD,EAA4D,YAAK;AACjE,UAAM,GAAG,GAAG;AACV,QAAA,QAAQ,EAAE;AAAC,UAAA,MAAM,EAAE;AAAT;AADA,OAAZ;;AAGA,UAAM,WAAW,GAAG,eAAM,YAAN,CAAmB,QAAnB,CAA4B,QAA5B,CAAqC,CAArC,EAAwC,QAAxC,CAAiD,GAAjD,CAApB;;AAIA,MAAA,MAAM,CAAC,WAAD,CAAN,CAAoB,OAApB,CAA4B,aAA5B,CAA0C,GAA1C;AAEA,UAAM,MAAM,GAAG,IAAI,CAAC,EAAL,CAAQ,oCAAR,CAAf;AACA,MAAA,MAAM,CAAC,oCAAD,CAAN,CAAoB,gBAApB;AAKD,KAhBC,CAAF;AA6BD,GApCO,CAAR;AAqCD,CAtCO,CAAR","sourcesContent":["import {showMessage} from 'react-native-flash-message';\nimport axios, {createAxiosInstance} from '../../axios';\nimport {interceptors} from '../interceptors';\n\ndescribe('Interceptors', () => {\n  describe('NotFoundResponseInterceptor', () => {\n    beforeEach(() => {\n      (showMessage as jest.Mock).mockReset();\n      jest.useFakeTimers();\n    });\n    interceptors(createAxiosInstance());\n\n    it('should throw error if response status is other then 403', () => {\n      const res = {\n        response: {status: 404},\n      };\n      const rejectedRes = axios.interceptors.response.handlers[0].rejected(res);\n\n      // 'Not found',\n      //     'Organization and/or repository not found!',\n      expect(rejectedRes).rejects.toMatchObject(res);\n      // interceptor.showErrorAlert = sendNotificationMock;\n      const mockFn = jest.fn(showMessage);\n      expect(showMessage).toHaveBeenCalled();\n      // expect(showMessage).toHaveBeenCalledWith({\n      //   message: 'Organization and/or repository not found!',\n      //   type: 'danger',\n      // });\n    });\n\n    // it('it should redirect to login page if response status is 403', () => {\n    //   // global is `window` in jest\n    //   global.location.replace = jest.fn();\n\n    //   const rejectedRes = axios.interceptors.response.handlers[0].rejected({\n    //     response: {status: 403},\n    //   });\n\n    //   expect(global.location.replace).toBeCalledWith('/login');\n    //   expect(rejectedRes).toBeUndefined();\n    // });\n  });\n});\n"]}