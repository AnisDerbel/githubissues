caaf2cfc2f6851e610074a9a4b1bd4df
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;







function removeSubsets(nodes) {
  var idx = nodes.length;




  while (--idx >= 0) {
    var node = nodes[idx];





    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }
    for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }
  return nodes;
}
exports.removeSubsets = removeSubsets;

























function compareDocumentPosition(nodeA, nodeB) {
  var aParents = [];
  var bParents = [];
  if (nodeA === nodeB) {
    return 0;
  }
  var current = require("./tagtypes").hasChildren(nodeA) ? nodeA : nodeA.parent;
  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }
  current = require("./tagtypes").hasChildren(nodeB) ? nodeB : nodeB.parent;
  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }
  var maxIdx = Math.min(aParents.length, bParents.length);
  var idx = 0;
  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }
  if (idx === 0) {
    return 1;
  }
  var sharedParent = aParents[idx - 1];
  var siblings = sharedParent.children;
  var aSibling = aParents[idx];
  var bSibling = bParents[idx];
  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return 4 | 16;
    }
    return 4;
  }
  if (sharedParent === nodeA) {
    return 2 | 8;
  }
  return 2;
}
exports.compareDocumentPosition = compareDocumentPosition;








function uniqueSort(nodes) {
  nodes = nodes.filter(function (node, i, arr) {return !arr.includes(node, i + 1);});
  nodes.sort(function (a, b) {
    var relative = compareDocumentPosition(a, b);
    if (relative & 2) {
        return -1;
      } else
    if (relative & 4) {
        return 1;
      }
    return 0;
  });
  return nodes;
}
exports.uniqueSort = uniqueSort;